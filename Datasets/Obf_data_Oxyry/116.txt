import ctypes #line:10
import io #line:11
import os #line:12
import sys #line:13
import time #line:14
import zlib #line:15
from ctypes import byref #line:16
from ctypes import c_char #line:17
from ctypes import c_char_p #line:18
from ctypes import c_int #line:19
from ctypes import c_ssize_t #line:20
from ctypes import c_ulong #line:21
from ctypes import c_void_p #line:22
from ctypes import POINTER #line:23
from ctypes import py_object #line:24
from ctypes import windll #line:25
from ctypes import WinError #line:26
from ctypes import WINFUNCTYPE #line:27
from ctypes .wintypes import DWORD #line:28
from ctypes .wintypes import HANDLE #line:29
from ctypes .wintypes import LPCWSTR #line:30
from ctypes .wintypes import LPWSTR #line:31
import msvcrt #line:33
from ._compat import _NonClosingTextIOWrapper #line:35
from ._compat import PY2 #line:36
from ._compat import text_type #line:37
try :#line:39
    from ctypes import pythonapi #line:40
    PyObject_GetBuffer =pythonapi .PyObject_GetBuffer #line:42
    PyBuffer_Release =pythonapi .PyBuffer_Release #line:43
except ImportError :#line:44
    pythonapi =None #line:45
c_ssize_p =POINTER (c_ssize_t )#line:48
kernel32 =windll .kernel32 #line:50
GetStdHandle =kernel32 .GetStdHandle #line:51
ReadConsoleW =kernel32 .ReadConsoleW #line:52
WriteConsoleW =kernel32 .WriteConsoleW #line:53
GetConsoleMode =kernel32 .GetConsoleMode #line:54
GetLastError =kernel32 .GetLastError #line:55
GetCommandLineW =WINFUNCTYPE (LPWSTR )(("GetCommandLineW",windll .kernel32 ))#line:56
CommandLineToArgvW =WINFUNCTYPE (POINTER (LPWSTR ),LPCWSTR ,POINTER (c_int ))(("CommandLineToArgvW",windll .shell32 ))#line:59
LocalFree =WINFUNCTYPE (ctypes .c_void_p ,ctypes .c_void_p )(("LocalFree",windll .kernel32 ))#line:62
STDIN_HANDLE =GetStdHandle (-10 )#line:65
STDOUT_HANDLE =GetStdHandle (-11 )#line:66
STDERR_HANDLE =GetStdHandle (-12 )#line:67
PyBUF_SIMPLE =0 #line:70
PyBUF_WRITABLE =1 #line:71
ERROR_SUCCESS =0 #line:73
ERROR_NOT_ENOUGH_MEMORY =8 #line:74
ERROR_OPERATION_ABORTED =995 #line:75
STDIN_FILENO =0 #line:77
STDOUT_FILENO =1 #line:78
STDERR_FILENO =2 #line:79
EOF =b"\x1a"#line:81
MAX_BYTES_WRITTEN =32767 #line:82
class Py_buffer (ctypes .Structure ):#line:85
    _fields_ =[("buf",c_void_p ),("obj",py_object ),("len",c_ssize_t ),("itemsize",c_ssize_t ),("readonly",c_int ),("ndim",c_int ),("format",c_char_p ),("shape",c_ssize_p ),("strides",c_ssize_p ),("suboffsets",c_ssize_p ),("internal",c_void_p ),]#line:98
    if PY2 :#line:100
        _fields_ .insert (-1 ,("smalltable",c_ssize_t *2 ))#line:101
if pythonapi is None :#line:106
    get_buffer =None #line:107
else :#line:108
    def get_buffer (O0O000O0O000000OO ,writable =False ):#line:110
        OO0O0OO00OOOOOO00 =Py_buffer ()#line:111
        OO0000OO000O0O0O0 =PyBUF_WRITABLE if writable else PyBUF_SIMPLE #line:112
        PyObject_GetBuffer (py_object (O0O000O0O000000OO ),byref (OO0O0OO00OOOOOO00 ),OO0000OO000O0O0O0 )#line:113
        try :#line:114
            O0000OOO0OOOOOOO0 =c_char *OO0O0OO00OOOOOO00 .len #line:115
            return O0000OOO0OOOOOOO0 .from_address (OO0O0OO00OOOOOO00 .buf )#line:116
        finally :#line:117
            PyBuffer_Release (byref (OO0O0OO00OOOOOO00 ))#line:118
class _O00O0OOOOO0OOOO0O (io .RawIOBase ):#line:121
    def __init__ (O0OOOO00O00O0OOO0 ,OOOO00000OOO0OOO0 ):#line:122
        O0OOOO00O00O0OOO0 .handle =OOOO00000OOO0OOO0 #line:123
    def isatty (OOOO00OOOO0O0OOO0 ):#line:125
        io .RawIOBase .isatty (OOOO00OOOO0O0OOO0 )#line:126
        return True #line:127
class _O0OO0OO0000O00O0O (_O00O0OOOOO0OOOO0O ):#line:130
    def readable (OOO0OOO00O0000OO0 ):#line:131
        return True #line:132
    def readinto (OOO0O000O0OO0O00O ,OO0OOOO0OO000OOOO ):#line:134
        OOOOOO0OO00OO0000 =len (OO0OOOO0OO000OOOO )#line:135
        if not OOOOOO0OO00OO0000 :#line:136
            return 0 #line:137
        elif OOOOOO0OO00OO0000 %2 :#line:138
            raise ValueError ("cannot read odd number of bytes from UTF-16-LE encoded console")#line:141
        O000000OO0OOO0O00 =get_buffer (OO0OOOO0OO000OOOO ,writable =True )#line:143
        OO00OOO0OOOOOOO00 =OOOOOO0OO00OO0000 //2 #line:144
        O0OOO00OOOO0OO000 =c_ulong ()#line:145
        OOOO0O0OOO0OO0OO0 =ReadConsoleW (HANDLE (OOO0O000O0OO0O00O .handle ),O000000OO0OOO0O00 ,OO00OOO0OOOOOOO00 ,byref (O0OOO00OOOO0OO000 ),None ,)#line:153
        if GetLastError ()==ERROR_OPERATION_ABORTED :#line:154
            time .sleep (0.1 )#line:156
        if not OOOO0O0OOO0OO0OO0 :#line:157
            raise OSError ("Windows error: {}".format (GetLastError ()))#line:158
        if O000000OO0OOO0O00 [0 ]==EOF :#line:160
            return 0 #line:161
        return 2 *O0OOO00OOOO0OO000 .value #line:162
class _O0OO0O00OO00OO0O0 (_O00O0OOOOO0OOOO0O ):#line:165
    def writable (OOOO0OO00O00OOO00 ):#line:166
        return True #line:167
    @staticmethod #line:169
    def _get_error_message (OO0O0000O0O0000OO ):#line:170
        if OO0O0000O0O0000OO ==ERROR_SUCCESS :#line:171
            return "ERROR_SUCCESS"#line:172
        elif OO0O0000O0O0000OO ==ERROR_NOT_ENOUGH_MEMORY :#line:173
            return "ERROR_NOT_ENOUGH_MEMORY"#line:174
        return "Windows error {}".format (OO0O0000O0O0000OO )#line:175
    def write (OO0O00OO000000O00 ,O0O0OOOO0O00O0000 ):#line:177
        OOO0O0OOO0O0OOO0O =len (O0O0OOOO0O00O0000 )#line:178
        OOOO0OOO000O000OO =get_buffer (O0O0OOOO0O00O0000 )#line:179
        OO00O00OO0OO00OO0 =min (OOO0O0OOO0O0OOO0O ,MAX_BYTES_WRITTEN )//2 #line:180
        O0O0OOOO00OO00OO0 =c_ulong ()#line:181
        WriteConsoleW (HANDLE (OO0O00OO000000O00 .handle ),OOOO0OOO000O000OO ,OO00O00OO0OO00OO0 ,byref (O0O0OOOO00OO00OO0 ),None ,)#line:189
        O00O00O000O00OO00 =2 *O0O0OOOO00OO00OO0 .value #line:190
        if O00O00O000O00OO00 ==0 and OOO0O0OOO0O0OOO0O >0 :#line:192
            raise OSError (OO0O00OO000000O00 ._get_error_message (GetLastError ()))#line:193
        return O00O00O000O00OO00 #line:194
class ConsoleStream (object ):#line:197
    def __init__ (O0OO000O0O0OO00OO ,OOO000O0O0OO0OO0O ,O000OO00O000O000O ):#line:198
        O0OO000O0O0OO00OO ._text_stream =OOO000O0O0OO0OO0O #line:199
        O0OO000O0O0OO00OO .buffer =O000OO00O000O000O #line:200
    @property #line:202
    def name (O0OOO000OO00OOO00 ):#line:203
        return O0OOO000OO00OOO00 .buffer .name #line:204
    def write (OOOOO000OOOO000OO ,OO000000O0000O0O0 ):#line:206
        if isinstance (OO000000O0000O0O0 ,text_type ):#line:207
            return OOOOO000OOOO000OO ._text_stream .write (OO000000O0000O0O0 )#line:208
        try :#line:209
            OOOOO000OOOO000OO .flush ()#line:210
        except Exception :#line:211
            pass #line:212
        return OOOOO000OOOO000OO .buffer .write (OO000000O0000O0O0 )#line:213
    def writelines (OO0OOO0O000OO00OO ,O0O0000OOO0OOO0O0 ):#line:215
        for OO000OOO00000O000 in O0O0000OOO0OOO0O0 :#line:216
            OO0OOO0O000OO00OO .write (OO000OOO00000O000 )#line:217
    def __getattr__ (OOOO0OO00OOOOO0OO ,O00O0O0O000OO0O0O ):#line:219
        return getattr (OOOO0OO00OOOOO0OO ._text_stream ,O00O0O0O000OO0O0O )#line:220
    def isatty (OOO0OOO000O00O00O ):#line:222
        return OOO0OOO000O00O00O .buffer .isatty ()#line:223
    def __repr__ (O00O0OO00OOOO0O00 ):#line:225
        return "<ConsoleStream name={!r} encoding={!r}>".format (O00O0OO00OOOO0O00 .name ,O00O0OO00OOOO0O00 .encoding )#line:228
class WindowsChunkedWriter (object ):#line:231
    ""#line:236
    def __init__ (O00OOOOOOOOOOOO00 ,OO0OO0O0O0OO0000O ):#line:238
        O00OOOOOOOOOOOO00 .__OOOO0O0OOO00000OO =OO0OO0O0O0OO0000O #line:241
    def __getattr__ (OOOO0OO000OO0OOO0 ,OOOOO0OO00OOOO000 ):#line:243
        return getattr (OOOO0OO000OO0OOO0 .__OOOO0O0OOO00000OO ,OOOOO0OO00OOOO000 )#line:244
    def write (O00OO000O0OOOOO00 ,O000O00OOOO00OO0O ):#line:246
        OOOOOOO0O0000O00O =len (O000O00OOOO00OO0O )#line:247
        O0000OO00O00O00OO =0 #line:248
        while O0000OO00O00O00OO <OOOOOOO0O0000O00O :#line:250
            OOO00OO0OOO0O00O0 =min (OOOOOOO0O0000O00O -O0000OO00O00O00OO ,MAX_BYTES_WRITTEN )#line:251
            O00OO000O0OOOOO00 .__OOOO0O0OOO00000OO .write (O000O00OOOO00OO0O [O0000OO00O00O00OO :O0000OO00O00O00OO +OOO00OO0OOO0O00O0 ])#line:252
            O0000OO00O00O00OO +=OOO00OO0OOO0O00O0 #line:253
_OOOOO0OO0O00O00O0 =set ()#line:256
def _OOOO0O0O000OOO000 (O0000O00OO000OOOO ):#line:259
    if (PY2 and sys .getwindowsversion ()[:2 ]<=(6 ,1 )and O0000O00OO000OOOO not in _OOOOO0OO0O00O00O0 ):#line:265
        setattr (sys ,O0000O00OO000OOOO ,WindowsChunkedWriter (getattr (sys ,O0000O00OO000OOOO )))#line:266
        _OOOOO0OO0O00O00O0 .add (O0000O00OO000OOOO )#line:267
def _O0OOOO0O0O0OOO0O0 (O00O0O00000OO0O0O ):#line:270
    O0OOOOOOO0OO0OOO0 =_NonClosingTextIOWrapper (io .BufferedReader (_O0OO0OO0000O00O0O (STDIN_HANDLE )),"utf-16-le","strict",line_buffering =True ,)#line:276
    return ConsoleStream (O0OOOOOOO0OO0OOO0 ,O00O0O00000OO0O0O )#line:277
def _O0O0000000O0OOO0O (OOO0O00O000OOO0OO ):#line:280
    O00O0OOOO0O000O0O =_NonClosingTextIOWrapper (io .BufferedWriter (_O0OO0O00OO00OO0O0 (STDOUT_HANDLE )),"utf-16-le","strict",line_buffering =True ,)#line:286
    return ConsoleStream (O00O0OOOO0O000O0O ,OOO0O00O000OOO0OO )#line:287
def _O0O0O00OOOO0OOOOO (O00OOO0O00O00O00O ):#line:290
    O000000OO0OO0O00O =_NonClosingTextIOWrapper (io .BufferedWriter (_O0OO0O00OO00OO0O0 (STDERR_HANDLE )),"utf-16-le","strict",line_buffering =True ,)#line:296
    return ConsoleStream (O000000OO0OO0O00O ,O00OOO0O00O00O00O )#line:297
if PY2 :#line:300
    def _O00OO00000O0OOO00 ():#line:302
        return zlib .crc32 ("\x00".join (sys .argv [1 :]))#line:303
    _OO0O0OOOOO0OO0000 =_O00OO00000O0OOO00 ()#line:305
    def _OO0OO000OO000O0OO ():#line:307
        OOOOOOO00OO0O0OO0 =c_int (0 )#line:308
        OO0000O0OOOO0O000 =CommandLineToArgvW (GetCommandLineW (),byref (OOOOOOO00OO0O0OO0 ))#line:309
        if not OO0000O0OOOO0O000 :#line:310
            raise WinError ()#line:311
        try :#line:312
            OO0OOO0O0OO00O0O0 =[OO0000O0OOOO0O000 [OOOOO00OO000O0O00 ]for OOOOO00OO000O0O00 in range (0 ,OOOOOOO00OO0O0OO0 .value )]#line:313
        finally :#line:314
            LocalFree (OO0000O0OOOO0O000 )#line:315
            del OO0000O0OOOO0O000 #line:316
        if not hasattr (sys ,"frozen"):#line:318
            OO0OOO0O0OO00O0O0 =OO0OOO0O0OO00O0O0 [1 :]#line:319
            while len (OO0OOO0O0OO00O0O0 )>0 :#line:320
                OO0OO0O000OOO0OOO =OO0OOO0O0OO00O0O0 [0 ]#line:321
                if not OO0OO0O000OOO0OOO .startswith ("-")or OO0OO0O000OOO0OOO =="-":#line:322
                    break #line:323
                OO0OOO0O0OO00O0O0 =OO0OOO0O0OO00O0O0 [1 :]#line:324
                if OO0OO0O000OOO0OOO .startswith (("-c","-m")):#line:325
                    break #line:326
        return OO0OOO0O0OO00O0O0 [1 :]#line:328
_OO0O0OO0O0OOOOO0O ={0 :_O0OOOO0O0O0OOO0O0 ,1 :_O0O0000000O0OOO0O ,2 :_O0O0O00OOOO0OOOOO ,}#line:335
def _O00OO0OOOO00000O0 (OOOO0000OOOOOO0O0 ):#line:338
    if not hasattr (OOOO0000OOOOOO0O0 ,"fileno"):#line:339
        return False #line:340
    try :#line:342
        OO0O0O0OOO00OO0O0 =OOOO0000OOOOOO0O0 .fileno ()#line:343
    except OSError :#line:344
        return False #line:345
    O0OOOOOOO00O00O0O =msvcrt .get_osfhandle (OO0O0O0OOO00OO0O0 )#line:347
    return bool (GetConsoleMode (O0OOOOOOO00O00O0O ,byref (DWORD ())))#line:348
def _O0OOOOO0O0O0OOO00 (OO0O00O0OO00000O0 ,O0O00OO0OOOO0O00O ,O0OO000OOO0OO00O0 ):#line:351
    if (get_buffer is not None and O0O00OO0OOOO0O00O in ("utf-16-le",None )and O0OO000OOO0OO00O0 in ("strict",None )and _O00OO0OOOO00000O0 (OO0O00O0OO00000O0 )):#line:357
        O00000OOOO0O00O0O =_OO0O0OO0O0OOOOO0O .get (OO0O00O0OO00000O0 .fileno ())#line:358
        if O00000OOOO0O00O0O is not None :#line:359
            if not PY2 :#line:360
                OO0O00O0OO00000O0 =getattr (OO0O00O0OO00000O0 ,"buffer",None )#line:361
                if OO0O00O0OO00000O0 is None :#line:362
                    return None #line:363
            else :#line:364
                msvcrt .setmode (OO0O00O0OO00000O0 .fileno (),os .O_BINARY )#line:369
            return O00000OOOO0O00O0O (OO0O00O0OO00000O0 )#line:370
