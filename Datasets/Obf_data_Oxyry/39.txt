from __future__ import absolute_import #line:1:from __future__ import absolute_import
import collections #line:2:import collections
import functools #line:3:import functools
import logging #line:4:import logging
from ._collections import RecentlyUsedContainer #line:6:from ._collections import RecentlyUsedContainer
from .connectionpool import HTTPConnectionPool ,HTTPSConnectionPool #line:7:from .connectionpool import HTTPConnectionPool, HTTPSConnectionPool
from .connectionpool import port_by_scheme #line:8:from .connectionpool import port_by_scheme
from .exceptions import LocationValueError ,MaxRetryError ,ProxySchemeUnknown #line:9:from .exceptions import LocationValueError, MaxRetryError, ProxySchemeUnknown
from .packages .six .moves .urllib .parse import urljoin #line:10:from .packages.six.moves.urllib.parse import urljoin
from .request import RequestMethods #line:11:from .request import RequestMethods
from .util .url import parse_url #line:12:from .util.url import parse_url
from .util .retry import Retry #line:13:from .util.retry import Retry
__all__ =['PoolManager','ProxyManager','proxy_from_url']#line:16:__all__ = ['PoolManager', 'ProxyManager', 'proxy_from_url']
OO0OO0O000OO000O0 =logging .getLogger (__name__ )#line:19:log = logging.getLogger(__name__)
O00000O0000OOOO00 =('key_file','cert_file','cert_reqs','ca_certs','ssl_version','ca_cert_dir','ssl_context')#line:22:'ssl_version', 'ca_cert_dir', 'ssl_context')
_O0O00OO000O00O0O0 =('key_scheme','key_host','key_port','key_timeout','key_retries','key_strict','key_block','key_source_address','key_key_file','key_cert_file','key_cert_reqs','key_ca_certs','key_ssl_version','key_ca_cert_dir','key_ssl_context','key_maxsize','key_headers','key__proxy','key__proxy_headers','key_socket_options','key__socks_options','key_assert_hostname','key_assert_fingerprint','key_server_hostname',)#line:51:)
O0O0OO0OO0O0OO000 =collections .namedtuple ('PoolKey',_O0O00OO000O00O0O0 )#line:55:PoolKey = collections.namedtuple('PoolKey', _key_fields)
def _OOOO0O00000OO0000 (O0O0O00OOO000O0O0 ,OO000O00OO0000000 ):#line:58:def _default_key_normalizer(key_class, request_context):
    ""#line:77:"""
    OOOOO0OOOO0OOOO0O =OO000O00OO0000000 .copy ()#line:79:context = request_context.copy()
    OOOOO0OOOO0OOOO0O ['scheme']=OOOOO0OOOO0OOOO0O ['scheme'].lower ()#line:80:context['scheme'] = context['scheme'].lower()
    OOOOO0OOOO0OOOO0O ['host']=OOOOO0OOOO0OOOO0O ['host'].lower ()#line:81:context['host'] = context['host'].lower()
    for OO0OO0O0000OOOOOO in ('headers','_proxy_headers','_socks_options'):#line:84:for key in ('headers', '_proxy_headers', '_socks_options'):
        if OO0OO0O0000OOOOOO in OOOOO0OOOO0OOOO0O and OOOOO0OOOO0OOOO0O [OO0OO0O0000OOOOOO ]is not None :#line:85:if key in context and context[key] is not None:
            OOOOO0OOOO0OOOO0O [OO0OO0O0000OOOOOO ]=frozenset (OOOOO0OOOO0OOOO0O [OO0OO0O0000OOOOOO ].items ())#line:86:context[key] = frozenset(context[key].items())
    O0O0O000O0OOOO000 =OOOOO0OOOO0OOOO0O .get ('socket_options')#line:90:socket_opts = context.get('socket_options')
    if O0O0O000O0OOOO000 is not None :#line:91:if socket_opts is not None:
        OOOOO0OOOO0OOOO0O ['socket_options']=tuple (O0O0O000O0OOOO000 )#line:92:context['socket_options'] = tuple(socket_opts)
    for OO0OO0O0000OOOOOO in list (OOOOO0OOOO0OOOO0O .keys ()):#line:96:for key in list(context.keys()):
        OOOOO0OOOO0OOOO0O ['key_'+OO0OO0O0000OOOOOO ]=OOOOO0OOOO0OOOO0O .pop (OO0OO0O0000OOOOOO )#line:97:context['key_' + key] = context.pop(key)
    for OO0O00O000OO0O0O0 in O0O0O00OOO000O0O0 ._fields :#line:100:for field in key_class._fields:
        if OO0O00O000OO0O0O0 not in OOOOO0OOOO0OOOO0O :#line:101:if field not in context:
            OOOOO0OOOO0OOOO0O [OO0O00O000OO0O0O0 ]=None #line:102:context[field] = None
    return O0O0O00OOO000O0O0 (**OOOOO0OOOO0OOOO0O )#line:104:return key_class(**context)
OOOO0O0O00OO000O0 ={'http':functools .partial (_OOOO0O00000OO0000 ,O0O0OO0OO0O0OO000 ),'https':functools .partial (_OOOO0O00000OO0000 ,O0O0OO0OO0O0OO000 ),}#line:114:}
OOO0OO0O0O00OOO0O ={'http':HTTPConnectionPool ,'https':HTTPSConnectionPool ,}#line:119:}
class PoolManager (RequestMethods ):#line:122:class PoolManager(RequestMethods):
    ""#line:148:"""
    proxy =None #line:150:proxy = None
    def __init__ (O0O00OO00O000OO00 ,num_pools =10 ,headers =None ,**O0OO0OO0O0O0OOOO0 ):#line:152:def __init__(self, num_pools=10, headers=None, **connection_pool_kw):
        RequestMethods .__init__ (O0O00OO00O000OO00 ,headers )#line:153:RequestMethods.__init__(self, headers)
        O0O00OO00O000OO00 .connection_pool_kw =O0OO0OO0O0O0OOOO0 #line:154:self.connection_pool_kw = connection_pool_kw
        O0O00OO00O000OO00 .pools =RecentlyUsedContainer (num_pools ,dispose_func =lambda OOO0OO0O000OO00OO :OOO0OO0O000OO00OO .close ())#line:156:dispose_func=lambda p: p.close())
        O0O00OO00O000OO00 .pool_classes_by_scheme =OOO0OO0O0O00OOO0O #line:160:self.pool_classes_by_scheme = pool_classes_by_scheme
        O0O00OO00O000OO00 .key_fn_by_scheme =OOOO0O0O00OO000O0 .copy ()#line:161:self.key_fn_by_scheme = key_fn_by_scheme.copy()
    def __enter__ (O0OO0OO0OO0OOO000 ):#line:163:def __enter__(self):
        return O0OO0OO0OO0OOO000 #line:164:return self
    def __exit__ (O0OO000OOO0OOO0O0 ,OO00O00O0OO000000 ,OO0OO0O00OOOOO00O ,OOO00OOO0O000O00O ):#line:166:def __exit__(self, exc_type, exc_val, exc_tb):
        O0OO000OOO0OOO0O0 .clear ()#line:167:self.clear()
        return False #line:169:return False
    def _new_pool (O00O0OOO0000O0OOO ,O0O00OO00O0O0OOOO ,OO0000OO000O0O00O ,O0OOO0OO0O00000O0 ,request_context =None ):#line:171:def _new_pool(self, scheme, host, port, request_context=None):
        ""#line:180:"""
        O0000O0OOO00000O0 =O00O0OOO0000O0OOO .pool_classes_by_scheme [O0O00OO00O0O0OOOO ]#line:181:pool_cls = self.pool_classes_by_scheme[scheme]
        if request_context is None :#line:182:if request_context is None:
            request_context =O00O0OOO0000O0OOO .connection_pool_kw .copy ()#line:183:request_context = self.connection_pool_kw.copy()
        for OOOOOO0O0O0OOOOO0 in ('scheme','host','port'):#line:189:for key in ('scheme', 'host', 'port'):
            request_context .pop (OOOOOO0O0O0OOOOO0 ,None )#line:190:request_context.pop(key, None)
        if O0O00OO00O0O0OOOO =='http':#line:192:if scheme == 'http':
            for O00O0O000OO0000OO in O00000O0000OOOO00 :#line:193:for kw in SSL_KEYWORDS:
                request_context .pop (O00O0O000OO0000OO ,None )#line:194:request_context.pop(kw, None)
        return O0000O0OOO00000O0 (OO0000OO000O0O00O ,O0OOO0OO0O00000O0 ,**request_context )#line:196:return pool_cls(host, port, **request_context)
    def clear (OOOOO0OO0OO0OOO00 ):#line:198:def clear(self):
        ""#line:204:"""
        OOOOO0OO0OO0OOO00 .pools .clear ()#line:205:self.pools.clear()
    def connection_from_host (O000O0000O0000OOO ,O00OOO0OOO00OO000 ,port =None ,scheme ='http',pool_kwargs =None ):#line:207:def connection_from_host(self, host, port=None, scheme='http', pool_kwargs=None):
        ""#line:216:"""
        if not O00OOO0OOO00OO000 :#line:218:if not host:
            raise LocationValueError ("No host specified.")#line:219:raise LocationValueError("No host specified.")
        O000OO0O000OO0000 =O000O0000O0000OOO ._merge_pool_kwargs (pool_kwargs )#line:221:request_context = self._merge_pool_kwargs(pool_kwargs)
        O000OO0O000OO0000 ['scheme']=scheme or 'http'#line:222:request_context['scheme'] = scheme or 'http'
        if not port :#line:223:if not port:
            port =port_by_scheme .get (O000OO0O000OO0000 ['scheme'].lower (),80 )#line:224:port = port_by_scheme.get(request_context['scheme'].lower(), 80)
        O000OO0O000OO0000 ['port']=port #line:225:request_context['port'] = port
        O000OO0O000OO0000 ['host']=O00OOO0OOO00OO000 #line:226:request_context['host'] = host
        return O000O0000O0000OOO .connection_from_context (O000OO0O000OO0000 )#line:228:return self.connection_from_context(request_context)
    def connection_from_context (O000OOOO0O000OOOO ,OO0000O00OO0O0OO0 ):#line:230:def connection_from_context(self, request_context):
        ""#line:236:"""
        OOO0O00OO0OOO0OO0 =OO0000O00OO0O0OO0 ['scheme'].lower ()#line:237:scheme = request_context['scheme'].lower()
        OO000O0OOO0000O00 =O000OOOO0O000OOOO .key_fn_by_scheme [OOO0O00OO0OOO0OO0 ]#line:238:pool_key_constructor = self.key_fn_by_scheme[scheme]
        OO0OO0OO000OO0000 =OO000O0OOO0000O00 (OO0000O00OO0O0OO0 )#line:239:pool_key = pool_key_constructor(request_context)
        return O000OOOO0O000OOOO .connection_from_pool_key (OO0OO0OO000OO0000 ,request_context =OO0000O00OO0O0OO0 )#line:241:return self.connection_from_pool_key(pool_key, request_context=request_context)
    def connection_from_pool_key (OO00O0OOOOOOO00O0 ,OOOO000O0O0OOOOOO ,request_context =None ):#line:243:def connection_from_pool_key(self, pool_key, request_context=None):
        ""#line:250:"""
        with OO00O0OOOOOOO00O0 .pools .lock :#line:251:with self.pools.lock:
            O0O000O00O0000O0O =OO00O0OOOOOOO00O0 .pools .get (OOOO000O0O0OOOOOO )#line:254:pool = self.pools.get(pool_key)
            if O0O000O00O0000O0O :#line:255:if pool:
                return O0O000O00O0000O0O #line:256:return pool
            OOO0O00O0000OO00O =request_context ['scheme']#line:259:scheme = request_context['scheme']
            OOOOOO0O0O00OOOO0 =request_context ['host']#line:260:host = request_context['host']
            O00000O0O00OO0OO0 =request_context ['port']#line:261:port = request_context['port']
            O0O000O00O0000O0O =OO00O0OOOOOOO00O0 ._new_pool (OOO0O00O0000OO00O ,OOOOOO0O0O00OOOO0 ,O00000O0O00OO0OO0 ,request_context =request_context )#line:262:pool = self._new_pool(scheme, host, port, request_context=request_context)
            OO00O0OOOOOOO00O0 .pools [OOOO000O0O0OOOOOO ]=O0O000O00O0000O0O #line:263:self.pools[pool_key] = pool
        return O0O000O00O0000O0O #line:265:return pool
    def connection_from_url (O0OO0O000O00OO0O0 ,OO0OO000O0OO000O0 ,pool_kwargs =None ):#line:267:def connection_from_url(self, url, pool_kwargs=None):
        ""#line:277:"""
        OO0OOO00O00O0000O =parse_url (OO0OO000O0OO000O0 )#line:278:u = parse_url(url)
        return O0OO0O000O00OO0O0 .connection_from_host (OO0OOO00O00O0000O .host ,port =OO0OOO00O00O0000O .port ,scheme =OO0OOO00O00O0000O .scheme ,pool_kwargs =pool_kwargs )#line:280:pool_kwargs=pool_kwargs)
    def _merge_pool_kwargs (O0OO0O00O0OO0O000 ,OO00OOOO00O0OO000 ):#line:282:def _merge_pool_kwargs(self, override):
        ""#line:289:"""
        OO0O0O0OO0OO0OO00 =O0OO0O00O0OO0O000 .connection_pool_kw .copy ()#line:290:base_pool_kwargs = self.connection_pool_kw.copy()
        if OO00OOOO00O0OO000 :#line:291:if override:
            for O00O0000O0O000OOO ,OO0O00O0OOO00OOOO in OO00OOOO00O0OO000 .items ():#line:292:for key, value in override.items():
                if OO0O00O0OOO00OOOO is None :#line:293:if value is None:
                    try :#line:294:try:
                        del OO0O0O0OO0OO0OO00 [O00O0000O0O000OOO ]#line:295:del base_pool_kwargs[key]
                    except KeyError :#line:296:except KeyError:
                        pass #line:297:pass
                else :#line:298:else:
                    OO0O0O0OO0OO0OO00 [O00O0000O0O000OOO ]=OO0O00O0OOO00OOOO #line:299:base_pool_kwargs[key] = value
        return OO0O0O0OO0OO0OO00 #line:300:return base_pool_kwargs
    def urlopen (OOOOOOO00O0000O0O ,O0O0O00O0OO0O0000 ,O0O000O00OO00OOOO ,redirect =True ,**OOO0OOO00O0O0OOOO ):#line:302:def urlopen(self, method, url, redirect=True, **kw):
        ""#line:310:"""
        OO00O0O00OOOO00O0 =parse_url (O0O000O00OO00OOOO )#line:311:u = parse_url(url)
        O0O000O000OOO0000 =OOOOOOO00O0000O0O .connection_from_host (OO00O0O00OOOO00O0 .host ,port =OO00O0O00OOOO00O0 .port ,scheme =OO00O0O00OOOO00O0 .scheme )#line:312:conn = self.connection_from_host(u.host, port=u.port, scheme=u.scheme)
        OOO0OOO00O0O0OOOO ['assert_same_host']=False #line:314:kw['assert_same_host'] = False
        OOO0OOO00O0O0OOOO ['redirect']=False #line:315:kw['redirect'] = False
        if 'headers'not in OOO0OOO00O0O0OOOO :#line:317:if 'headers' not in kw:
            OOO0OOO00O0O0OOOO ['headers']=OOOOOOO00O0000O0O .headers .copy ()#line:318:kw['headers'] = self.headers.copy()
        if OOOOOOO00O0000O0O .proxy is not None and OO00O0O00OOOO00O0 .scheme =="http":#line:320:if self.proxy is not None and u.scheme == "http":
            OO00OOO0000O00OOO =O0O000O000OOO0000 .urlopen (O0O0O00O0OO0O0000 ,O0O000O00OO00OOOO ,**OOO0OOO00O0O0OOOO )#line:321:response = conn.urlopen(method, url, **kw)
        else :#line:322:else:
            OO00OOO0000O00OOO =O0O000O000OOO0000 .urlopen (O0O0O00O0OO0O0000 ,OO00O0O00OOOO00O0 .request_uri ,**OOO0OOO00O0O0OOOO )#line:323:response = conn.urlopen(method, u.request_uri, **kw)
        O0OOOO00OO0O0O0OO =redirect and OO00OOO0000O00OOO .get_redirect_location ()#line:325:redirect_location = redirect and response.get_redirect_location()
        if not O0OOOO00OO0O0O0OO :#line:326:if not redirect_location:
            return OO00OOO0000O00OOO #line:327:return response
        O0OOOO00OO0O0O0OO =urljoin (O0O000O00OO00OOOO ,O0OOOO00OO0O0O0OO )#line:330:redirect_location = urljoin(url, redirect_location)
        if OO00OOO0000O00OOO .status ==303 :#line:333:if response.status == 303:
            O0O0O00O0OO0O0000 ='GET'#line:334:method = 'GET'
        OO00OO00O0000O00O =OOO0OOO00O0O0OOOO .get ('retries')#line:336:retries = kw.get('retries')
        if not isinstance (OO00OO00O0000O00O ,Retry ):#line:337:if not isinstance(retries, Retry):
            OO00OO00O0000O00O =Retry .from_int (OO00OO00O0000O00O ,redirect =redirect )#line:338:retries = Retry.from_int(retries, redirect=redirect)
        if (OO00OO00O0000O00O .remove_headers_on_redirect and not O0O000O000OOO0000 .is_same_host (O0OOOO00OO0O0O0OO )):#line:344:and not conn.is_same_host(redirect_location)):
            for O00OO00O0O000OO00 in OO00OO00O0000O00O .remove_headers_on_redirect :#line:345:for header in retries.remove_headers_on_redirect:
                OOO0OOO00O0O0OOOO ['headers'].pop (O00OO00O0O000OO00 ,None )#line:346:kw['headers'].pop(header, None)
        try :#line:348:try:
            OO00OO00O0000O00O =OO00OO00O0000O00O .increment (O0O0O00O0OO0O0000 ,O0O000O00OO00OOOO ,response =OO00OOO0000O00OOO ,_pool =O0O000O000OOO0000 )#line:349:retries = retries.increment(method, url, response=response, _pool=conn)
        except MaxRetryError :#line:350:except MaxRetryError:
            if OO00OO00O0000O00O .raise_on_redirect :#line:351:if retries.raise_on_redirect:
                raise #line:352:raise
            return OO00OOO0000O00OOO #line:353:return response
        OOO0OOO00O0O0OOOO ['retries']=OO00OO00O0000O00O #line:355:kw['retries'] = retries
        OOO0OOO00O0O0OOOO ['redirect']=redirect #line:356:kw['redirect'] = redirect
        OO0OO0O000OO000O0 .info ("Redirecting %s -> %s",O0O000O00OO00OOOO ,O0OOOO00OO0O0O0OO )#line:358:log.info("Redirecting %s -> %s", url, redirect_location)
        return OOOOOOO00O0000O0O .urlopen (O0O0O00O0OO0O0000 ,O0OOOO00OO0O0O0OO ,**OOO0OOO00O0O0OOOO )#line:359:return self.urlopen(method, redirect_location, **kw)
class ProxyManager (PoolManager ):#line:362:class ProxyManager(PoolManager):
    ""#line:387:"""
    def __init__ (O00000O000OOOO0O0 ,O00O0OO0OO00O0OO0 ,num_pools =10 ,headers =None ,proxy_headers =None ,**O0O0OO0000OO0O000 ):#line:390:proxy_headers=None, **connection_pool_kw):
        if isinstance (O00O0OO0OO00O0OO0 ,HTTPConnectionPool ):#line:392:if isinstance(proxy_url, HTTPConnectionPool):
            O00O0OO0OO00O0OO0 ='%s://%s:%i'%(O00O0OO0OO00O0OO0 .scheme ,O00O0OO0OO00O0OO0 .host ,O00O0OO0OO00O0OO0 .port )#line:394:proxy_url.port)
        OOO0O000O00OOO0OO =parse_url (O00O0OO0OO00O0OO0 )#line:395:proxy = parse_url(proxy_url)
        if not OOO0O000O00OOO0OO .port :#line:396:if not proxy.port:
            OOO0O00O0OOOOO0O0 =port_by_scheme .get (OOO0O000O00OOO0OO .scheme ,80 )#line:397:port = port_by_scheme.get(proxy.scheme, 80)
            OOO0O000O00OOO0OO =OOO0O000O00OOO0OO ._replace (port =OOO0O00O0OOOOO0O0 )#line:398:proxy = proxy._replace(port=port)
        if OOO0O000O00OOO0OO .scheme not in ("http","https"):#line:400:if proxy.scheme not in ("http", "https"):
            raise ProxySchemeUnknown (OOO0O000O00OOO0OO .scheme )#line:401:raise ProxySchemeUnknown(proxy.scheme)
        O00000O000OOOO0O0 .proxy =OOO0O000O00OOO0OO #line:403:self.proxy = proxy
        O00000O000OOOO0O0 .proxy_headers =proxy_headers or {}#line:404:self.proxy_headers = proxy_headers or {}
        O0O0OO0000OO0O000 ['_proxy']=O00000O000OOOO0O0 .proxy #line:406:connection_pool_kw['_proxy'] = self.proxy
        O0O0OO0000OO0O000 ['_proxy_headers']=O00000O000OOOO0O0 .proxy_headers #line:407:connection_pool_kw['_proxy_headers'] = self.proxy_headers
        super (ProxyManager ,O00000O000OOOO0O0 ).__init__ (num_pools ,headers ,**O0O0OO0000OO0O000 )#line:410:num_pools, headers, **connection_pool_kw)
    def connection_from_host (OO0OO00OOO000OO00 ,O0OOOOOOOO0OO0OO0 ,port =None ,scheme ='http',pool_kwargs =None ):#line:412:def connection_from_host(self, host, port=None, scheme='http', pool_kwargs=None):
        if scheme =="https":#line:413:if scheme == "https":
            return super (ProxyManager ,OO0OO00OOO000OO00 ).connection_from_host (O0OOOOOOOO0OO0OO0 ,port ,scheme ,pool_kwargs =pool_kwargs )#line:415:host, port, scheme, pool_kwargs=pool_kwargs)
        return super (ProxyManager ,OO0OO00OOO000OO00 ).connection_from_host (OO0OO00OOO000OO00 .proxy .host ,OO0OO00OOO000OO00 .proxy .port ,OO0OO00OOO000OO00 .proxy .scheme ,pool_kwargs =pool_kwargs )#line:418:self.proxy.host, self.proxy.port, self.proxy.scheme, pool_kwargs=pool_kwargs)
    def _set_proxy_headers (OO00O00000O0O0000 ,OO000OO0OO00OO0O0 ,headers =None ):#line:420:def _set_proxy_headers(self, url, headers=None):
        ""#line:424:"""
        OOO000OOO000O0O00 ={'Accept':'*/*'}#line:425:headers_ = {'Accept': '*/*'}
        OOO00OOOOO0O000OO =parse_url (OO000OO0OO00OO0O0 ).netloc #line:427:netloc = parse_url(url).netloc
        if OOO00OOOOO0O000OO :#line:428:if netloc:
            OOO000OOO000O0O00 ['Host']=OOO00OOOOO0O000OO #line:429:headers_['Host'] = netloc
        if headers :#line:431:if headers:
            OOO000OOO000O0O00 .update (headers )#line:432:headers_.update(headers)
        return OOO000OOO000O0O00 #line:433:return headers_
    def urlopen (OOO00000OO00O0O00 ,OOO0OO0O0OO0OOOO0 ,OOO00O0OOOOO00O00 ,redirect =True ,**O000O0OOO000O00OO ):#line:435:def urlopen(self, method, url, redirect=True, **kw):
        ""#line:436:"Same as HTTP(S)ConnectionPool.urlopen, ``url`` must be absolute."
        OO0000000OOO000OO =parse_url (OOO00O0OOOOO00O00 )#line:437:u = parse_url(url)
        if OO0000000OOO000OO .scheme =="http":#line:439:if u.scheme == "http":
            OO0OO0O0OOOOO0OO0 =O000O0OOO000O00OO .get ('headers',OOO00000OO00O0O00 .headers )#line:443:headers = kw.get('headers', self.headers)
            O000O0OOO000O00OO ['headers']=OOO00000OO00O0O00 ._set_proxy_headers (OOO00O0OOOOO00O00 ,OO0OO0O0OOOOO0OO0 )#line:444:kw['headers'] = self._set_proxy_headers(url, headers)
        return super (ProxyManager ,OOO00000OO00O0O00 ).urlopen (OOO0OO0O0OO0OOOO0 ,OOO00O0OOOOO00O00 ,redirect =redirect ,**O000O0OOO000O00OO )#line:446:return super(ProxyManager, self).urlopen(method, url, redirect=redirect, **kw)
def proxy_from_url (OO000OOO0OO000O0O ,**O00O00O0OOO0O0O00 ):#line:449:def proxy_from_url(url, **kw):
    return ProxyManager (proxy_url =OO000OOO0OO000O0O ,**O00O00O0OOO0O0O00 )#line:450:return ProxyManager(proxy_url=url, **kw)
