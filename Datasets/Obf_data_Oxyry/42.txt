import base64 #line:1
import io #line:2
import json #line:3
import zlib #line:4
from pip ._vendor import msgpack #line:6
from pip ._vendor .requests .structures import CaseInsensitiveDict #line:7
from .compat import HTTPResponse ,pickle ,text_type #line:9
def _O00O00OOO0O0O000O (OOO000OOOO00000OO ):#line:12
    return base64 .b64decode (OOO000OOOO00000OO .encode ("ascii"))#line:13
def _O0OOO000O0OOO00O0 (OOO00O0OOO0OOO0O0 ):#line:16
    return _O00O00OOO0O0O000O (OOO00O0OOO0OOO0O0 ).decode ("utf8")#line:17
class Serializer (object ):#line:20
    def dumps (O0000O0OOO000O0OO ,O0OO0000O0O0OO000 ,OO0OOO0O00O0OO000 ,body =None ):#line:22
        OOOOO0OO0OO0OO0O0 =CaseInsensitiveDict (OO0OOO0O00O0OO000 .headers )#line:23
        if body is None :#line:25
            body =OO0OOO0O00O0OO000 .read (decode_content =False )#line:26
            OO0OOO0O00O0OO000 ._fp =io .BytesIO (body )#line:38
        O0O0OOOO00OOOOOOO ={u"response":{u"body":body ,u"headers":dict ((text_type (O00O0000O0O00OO0O ),text_type (OO0O00000O0OO00O0 ))for O00O0000O0O00OO0O ,OO0O00000O0OO00O0 in OO0OOO0O00O0OO000 .headers .items ()),u"status":OO0OOO0O00O0OO000 .status ,u"version":OO0OOO0O00O0OO000 .version ,u"reason":text_type (OO0OOO0O00O0OO000 .reason ),u"strict":OO0OOO0O00O0OO000 .strict ,u"decode_content":OO0OOO0O00O0OO000 .decode_content ,}}#line:59
        O0O0OOOO00OOOOOOO [u"vary"]={}#line:62
        if u"vary"in OOOOO0OO0OO0OO0O0 :#line:63
            OOO0OOOOOO000O000 =OOOOO0OO0OO0OO0O0 [u"vary"].split (",")#line:64
            for OO00OO0OO0O0O0OOO in OOO0OOOOOO000O000 :#line:65
                OO00OO0OO0O0O0OOO =text_type (OO00OO0OO0O0O0OOO ).strip ()#line:66
                OOO0O0OOO0O0OO00O =O0OO0000O0O0OO000 .headers .get (OO00OO0OO0O0O0OOO ,None )#line:67
                if OOO0O0OOO0O0OO00O is not None :#line:68
                    OOO0O0OOO0O0OO00O =text_type (OOO0O0OOO0O0OO00O )#line:69
                O0O0OOOO00OOOOOOO [u"vary"][OO00OO0OO0O0O0OOO ]=OOO0O0OOO0O0OO00O #line:70
        return b",".join ([b"cc=4",msgpack .dumps (O0O0OOOO00OOOOOOO ,use_bin_type =True )])#line:72
    def loads (OOO0OO0O00OO000O0 ,O0OOO0OO0O0O0O0O0 ,OOO0O00000OOOOOOO ):#line:74
        if not OOO0O00000OOOOOOO :#line:76
            return #line:77
        try :#line:81
            OOO0O0OO0OO00000O ,OOO0O00000OOOOOOO =OOO0O00000OOOOOOO .split (b",",1 )#line:82
        except ValueError :#line:83
            OOO0O0OO0OO00000O =b"cc=0"#line:84
        if OOO0O0OO0OO00000O [:3 ]!=b"cc=":#line:88
            OOO0O00000OOOOOOO =OOO0O0OO0OO00000O +OOO0O00000OOOOOOO #line:89
            OOO0O0OO0OO00000O =b"cc=0"#line:90
        OOO0O0OO0OO00000O =OOO0O0OO0OO00000O .split (b"=",1 )[-1 ].decode ("ascii")#line:93
        try :#line:96
            return getattr (OOO0OO0O00OO000O0 ,"_loads_v{}".format (OOO0O0OO0OO00000O ))(O0OOO0OO0O0O0O0O0 ,OOO0O00000OOOOOOO )#line:97
        except AttributeError :#line:99
            return #line:102
    def prepare_response (OOOOO0OOO0O0O00OO ,O0OO0OO0OO0O00000 ,OO0O0OO0OOO0000OO ):#line:104
        ""#line:107
        if "*"in OO0O0OO0OOO0000OO .get ("vary",{}):#line:110
            return #line:111
        for O00OO000OOOOO0O00 ,OO0O0OOO0O0OO0O0O in OO0O0OO0OOO0000OO .get ("vary",{}).items ():#line:115
            if O0OO0OO0OO0O00000 .headers .get (O00OO000OOOOO0O00 ,None )!=OO0O0OOO0O0OO0O0O :#line:116
                return #line:117
        O0O00OOOO000OO0OO =OO0O0OO0OOO0000OO ["response"].pop ("body")#line:119
        OOOO000OOOOOO0O00 =CaseInsensitiveDict (data =OO0O0OO0OOO0000OO ["response"]["headers"])#line:121
        if OOOO000OOOOOO0O00 .get ("transfer-encoding","")=="chunked":#line:122
            OOOO000OOOOOO0O00 .pop ("transfer-encoding")#line:123
        OO0O0OO0OOO0000OO ["response"]["headers"]=OOOO000OOOOOO0O00 #line:125
        try :#line:127
            O000000O000O0O000 =io .BytesIO (O0O00OOOO000OO0OO )#line:128
        except TypeError :#line:129
            O000000O000O0O000 =io .BytesIO (O0O00OOOO000OO0OO .encode ("utf8"))#line:136
        return HTTPResponse (body =O000000O000O0O000 ,preload_content =False ,**OO0O0OO0OOO0000OO ["response"])#line:138
    def _loads_v0 (O0OOO0O00O0O00OO0 ,OO0O00O0O000000O0 ,O0O0000000O0O0000 ):#line:140
        return #line:144
    def _loads_v1 (O0OO0OO0OO0O0OOO0 ,OOOOO00O0OOOOO0OO ,O0OOO0000O0O0OOOO ):#line:146
        try :#line:147
            O0O0OO0000O0000OO =pickle .loads (O0OOO0000O0O0OOOO )#line:148
        except ValueError :#line:149
            return #line:150
        return O0OO0OO0OO0O0OOO0 .prepare_response (OOOOO00O0OOOOO0OO ,O0O0OO0000O0000OO )#line:152
    def _loads_v2 (O0OOO000O0OOO00O0 ,OO00OO0O00OOOO0OO ,O0OO000000000O00O ):#line:154
        try :#line:155
            O0O0O000O0OOO00O0 =json .loads (zlib .decompress (O0OO000000000O00O ).decode ("utf8"))#line:156
        except (ValueError ,zlib .error ):#line:157
            return #line:158
        O0O0O000O0OOO00O0 ["response"]["body"]=_O00O00OOO0O0O000O (O0O0O000O0OOO00O0 ["response"]["body"])#line:161
        O0O0O000O0OOO00O0 ["response"]["headers"]=dict ((_O0OOO000O0OOO00O0 (OO000OOO00O00O0O0 ),_O0OOO000O0OOO00O0 (OOOOOOO0000OOO00O ))for OO000OOO00O00O0O0 ,OOOOOOO0000OOO00O in O0O0O000O0OOO00O0 ["response"]["headers"].items ())#line:165
        O0O0O000O0OOO00O0 ["response"]["reason"]=_O0OOO000O0OOO00O0 (O0O0O000O0OOO00O0 ["response"]["reason"])#line:166
        O0O0O000O0OOO00O0 ["vary"]=dict ((_O0OOO000O0OOO00O0 (O00OOO0OOOOO0O000 ),_O0OOO000O0OOO00O0 (O000OO0O0OO000000 )if O000OO0O0OO000000 is not None else O000OO0O0OO000000 )for O00OOO0OOOOO0O000 ,O000OO0O0OO000000 in O0O0O000O0OOO00O0 ["vary"].items ())#line:170
        return O0OOO000O0OOO00O0 .prepare_response (OO00OO0O00OOOO0OO ,O0O0O000O0OOO00O0 )#line:172
    def _loads_v3 (OO00O0OOOO0OO00O0 ,O0OO0OOOOO000O000 ,OO0O0O00O00O0OO00 ):#line:174
        return #line:178
    def _loads_v4 (OOOOO0O0OO0000OOO ,OOOOO0000O00000OO ,OO00OOO0000OOO00O ):#line:180
        try :#line:181
            OO0O0OOO0OO0O00OO =msgpack .loads (OO00OOO0000OOO00O ,encoding ="utf-8")#line:182
        except ValueError :#line:183
            return #line:184
        return OOOOO0O0OO0000OOO .prepare_response (OOOOO0000O00000OO ,OO0O0OOO0OO0O00OO )#line:186
