from __future__ import print_function #line:28:from __future__ import print_function
"""Read from and write to tar format archives.
"""#line:31:"""
__version__ ="$Revision$"#line:33:__version__ = "$Revision$"
OOOO0O00O0O0O00O0 ="0.9.0"#line:35:version     = "0.9.0"
__author__ ="Lars Gust\u00e4bel (lars@gustaebel.de)"#line:36:__author__  = "Lars Gust\u00e4bel (lars@gustaebel.de)"
__date__ ="$Date: 2011-02-25 17:42:01 +0200 (Fri, 25 Feb 2011) $"#line:37:__date__    = "$Date: 2011-02-25 17:42:01 +0200 (Fri, 25 Feb 2011) $"
__cvsid__ ="$Id: tarfile.py 88586 2011-02-25 15:42:01Z marc-andre.lemburg $"#line:38:__cvsid__   = "$Id: tarfile.py 88586 2011-02-25 15:42:01Z marc-andre.lemburg $"
__credits__ ="Gustavo Niemeyer, Niels Gust\u00e4bel, Richard Townsend."#line:39:__credits__ = "Gustavo Niemeyer, Niels Gust\u00e4bel, Richard Townsend."
import sys #line:44:import sys
import os #line:45:import os
import stat #line:46:import stat
import errno #line:47:import errno
import time #line:48:import time
import struct #line:49:import struct
import copy #line:50:import copy
import re #line:51:import re
try :#line:53:try:
    import grp ,pwd #line:54:import grp, pwd
except ImportError :#line:55:except ImportError:
    grp =pwd =None #line:56:grp = pwd = None
O00OOOOOO0000O00O =(AttributeError ,NotImplementedError )#line:59:symlink_exception = (AttributeError, NotImplementedError)
try :#line:60:try:
    O00OOOOOO0000O00O +=(WindowsError ,)#line:63:symlink_exception += (WindowsError,)
except NameError :#line:64:except NameError:
    pass #line:65:pass
__all__ =["TarFile","TarInfo","is_tarfile","TarError"]#line:68:__all__ = ["TarFile", "TarInfo", "is_tarfile", "TarError"]
if sys .version_info [0 ]<3 :#line:70:if sys.version_info[0] < 3:
    import __builtin__ as builtins #line:71:import __builtin__ as builtins
else :#line:72:else:
    import builtins #line:73:import builtins
_OO0OO00O00OOO0O0O =builtins .open #line:75:_open = builtins.open   # Since 'open' is TarFile.open
OOO0OOO00OO0O00O0 =b"\0"#line:80:NUL = b"\0"                     # the null character
OO0000O000OO0O0O0 =512 #line:81:BLOCKSIZE = 512                 # length of processing blocks
OO0OOO0OOOO0OO0O0 =OO0000O000OO0O0O0 *20 #line:82:RECORDSIZE = BLOCKSIZE * 20     # length of records
OOO0O0OO0OOOOOOOO =b"ustar  \0"#line:83:GNU_MAGIC = b"ustar  \0"        # magic gnu tar string
O00000OO00OOO0OO0 =b"ustar\x0000"#line:84:POSIX_MAGIC = b"ustar\x0000"    # magic posix tar string
OOO0O00OO0OO0OO00 =100 #line:86:LENGTH_NAME = 100               # maximum length of a filename
O00O0OOOOO0OOO000 =100 #line:87:LENGTH_LINK = 100               # maximum length of a linkname
OO0000O0OOOOO00O0 =155 #line:88:LENGTH_PREFIX = 155             # maximum length of the prefix field
OO000OOO0OOO0000O =b"0"#line:90:REGTYPE = b"0"                  # regular file
O0OO00O0O0O0O000O =b"\0"#line:91:AREGTYPE = b"\0"                # regular file
OO0OO0O0OO0OO0O0O =b"1"#line:92:LNKTYPE = b"1"                  # link (inside tarfile)
O000O0OOOO0O00OOO =b"2"#line:93:SYMTYPE = b"2"                  # symbolic link
O0OO00OOOO000O0OO =b"3"#line:94:CHRTYPE = b"3"                  # character special device
O000000O0OO0OO0O0 =b"4"#line:95:BLKTYPE = b"4"                  # block special device
OOOO0O00000O00O00 =b"5"#line:96:DIRTYPE = b"5"                  # directory
OOO000000O0OOOO00 =b"6"#line:97:FIFOTYPE = b"6"                 # fifo special device
O0O00OO0OO0OO00OO =b"7"#line:98:CONTTYPE = b"7"                 # contiguous file
OOOO00O0OO00O0O00 =b"L"#line:100:GNUTYPE_LONGNAME = b"L"         # GNU tar longname
OOOOO00O0000000O0 =b"K"#line:101:GNUTYPE_LONGLINK = b"K"         # GNU tar longlink
OO0000O00OOO0O000 =b"S"#line:102:GNUTYPE_SPARSE = b"S"           # GNU tar sparse file
O0O0OO00OOO0OOO0O =b"x"#line:104:XHDTYPE = b"x"                  # POSIX.1-2001 extended header
O0000OO00OOOO000O =b"g"#line:105:XGLTYPE = b"g"                  # POSIX.1-2001 global header
OOO0OO0OOOOO00O0O =b"X"#line:106:SOLARIS_XHDTYPE = b"X"          # Solaris extended header
O00O0OOO000000O0O =0 #line:108:USTAR_FORMAT = 0                # POSIX.1-1988 (ustar) format
O0O00000OO00O0OO0 =1 #line:109:GNU_FORMAT = 1                  # GNU tar format
OOO000OO0O000OOO0 =2 #line:110:PAX_FORMAT = 2                  # POSIX.1-2001 (pax) format
OOOOOOO00O00OO000 =O0O00000OO00O0OO0 #line:111:DEFAULT_FORMAT = GNU_FORMAT
O0OOOO0OO0OOO0OO0 =(OO000OOO0OOO0000O ,O0OO00O0O0O0O000O ,OO0OO0O0OO0OO0O0O ,O000O0OOOO0O00OOO ,OOOO0O00000O00O00 ,OOO000000O0OOOO00 ,O0O00OO0OO0OO00OO ,O0OO00OOOO000O0OO ,O000000O0OO0OO0O0 ,OOOO00O0OO00O0O00 ,OOOOO00O0000000O0 ,OO0000O00OOO0O000 )#line:121:GNUTYPE_SPARSE)
O00OOOO00OOO0OOO0 =(OO000OOO0OOO0000O ,O0OO00O0O0O0O000O ,O0O00OO0OO0OO00OO ,OO0000O00OOO0O000 )#line:125:CONTTYPE, GNUTYPE_SPARSE)
O00O0OOOOOOO00OOO =(OOOO00O0OO00O0O00 ,OOOOO00O0000000O0 ,OO0000O00OOO0O000 )#line:129:GNUTYPE_SPARSE)
OO0O00000OO000OO0 =("path","linkpath","size","mtime","uid","gid","uname","gname")#line:133:"uid", "gid", "uname", "gname")
O0OOOOOO000OOOOO0 =set (("path","linkpath","uname","gname"))#line:136:PAX_NAME_FIELDS = set(("path", "linkpath", "uname", "gname"))
OO0O0OOO00O00OOO0 ={"atime":float ,"ctime":float ,"mtime":float ,"uid":int ,"gid":int ,"size":int }#line:147:}
OO0OOO0OO0O00O000 =0o120000 #line:152:S_IFLNK = 0o120000        # symbolic link
OO0O0O000OO000OOO =0o100000 #line:153:S_IFREG = 0o100000        # regular file
OO00OO00O0O00O0OO =0o060000 #line:154:S_IFBLK = 0o060000        # block device
O0O0OO0O0OOOOOOOO =0o040000 #line:155:S_IFDIR = 0o040000        # directory
OOO000O00OO000000 =0o020000 #line:156:S_IFCHR = 0o020000        # character device
O0OO00OO000OO0O0O =0o010000 #line:157:S_IFIFO = 0o010000        # fifo
OOO0O0O00O00O000O =0o4000 #line:159:TSUID   = 0o4000          # set UID on execution
OO00000OO000O0OO0 =0o2000 #line:160:TSGID   = 0o2000          # set GID on execution
O0O0OO00O00OO000O =0o1000 #line:161:TSVTX   = 0o1000          # reserved
O00O0000OO00O000O =0o400 #line:163:TUREAD  = 0o400           # read by owner
OO0OOOO0OO00O0000 =0o200 #line:164:TUWRITE = 0o200           # write by owner
O00O000O00000O0O0 =0o100 #line:165:TUEXEC  = 0o100           # execute/search by owner
OO0OO000O0O0OO0OO =0o040 #line:166:TGREAD  = 0o040           # read by group
O00O0000OO0OO0O00 =0o020 #line:167:TGWRITE = 0o020           # write by group
O0O0O0O0O000OO0O0 =0o010 #line:168:TGEXEC  = 0o010           # execute/search by group
OOO0O0000OOOOO0OO =0o004 #line:169:TOREAD  = 0o004           # read by other
O000O0OO0OO000000 =0o002 #line:170:TOWRITE = 0o002           # write by other
O00OO0OOO0O000OOO =0o001 #line:171:TOEXEC  = 0o001           # execute/search by other
if os .name in ("nt","ce"):#line:176:if os.name in ("nt", "ce"):
    OO00OOO000OOOOO0O ="utf-8"#line:177:ENCODING = "utf-8"
else :#line:178:else:
    OO00OOO000OOOOO0O =sys .getfilesystemencoding ()#line:179:ENCODING = sys.getfilesystemencoding()
def O000OO00O0OO00OOO (O0OOO0O0O0O0OOOOO ,OOO0O0000000OOOO0 ,O000O0O0O000O00O0 ,O0OO0OOO000O0O0O0 ):#line:185:def stn(s, length, encoding, errors):
    ""#line:187:"""
    O0OOO0O0O0O0OOOOO =O0OOO0O0O0O0OOOOO .encode (O000O0O0O000O00O0 ,O0OO0OOO000O0O0O0 )#line:188:s = s.encode(encoding, errors)
    return O0OOO0O0O0O0OOOOO [:OOO0O0000000OOOO0 ]+(OOO0O0000000OOOO0 -len (O0OOO0O0O0O0OOOOO ))*OOO0OOO00OO0O00O0 #line:189:return s[:length] + (length - len(s)) * NUL
def OO0O00O000OO0000O (O0OOOOO0O00OOO000 ,OO0000O0O0O000O00 ,O0OOO0O0O0O0000OO ):#line:191:def nts(s, encoding, errors):
    ""#line:193:"""
    O0OOOOOO0OO000O00 =O0OOOOO0O00OOO000 .find (b"\0")#line:194:p = s.find(b"\0")
    if O0OOOOOO0OO000O00 !=-1 :#line:195:if p != -1:
        O0OOOOO0O00OOO000 =O0OOOOO0O00OOO000 [:O0OOOOOO0OO000O00 ]#line:196:s = s[:p]
    return O0OOOOO0O00OOO000 .decode (OO0000O0O0O000O00 ,O0OOO0O0O0O0000OO )#line:197:return s.decode(encoding, errors)
def O000O0OO0OOOOOOOO (OOO0O00O0000OOOO0 ):#line:199:def nti(s):
    ""#line:201:"""
    if OOO0O00O0000OOOO0 [0 ]!=chr (0o200 ):#line:204:if s[0] != chr(0o200):
        try :#line:205:try:
            O0000OOOOO00O0O00 =int (OO0O00O000OO0000O (OOO0O00O0000OOOO0 ,"ascii","strict")or "0",8 )#line:206:n = int(nts(s, "ascii", "strict") or "0", 8)
        except ValueError :#line:207:except ValueError:
            raise InvalidHeaderError ("invalid header")#line:208:raise InvalidHeaderError("invalid header")
    else :#line:209:else:
        O0000OOOOO00O0O00 =0 #line:210:n = 0
        for OO00OOO0OO00O00OO in range (len (OOO0O00O0000OOOO0 )-1 ):#line:211:for i in range(len(s) - 1):
            O0000OOOOO00O0O00 <<=8 #line:212:n <<= 8
            O0000OOOOO00O0O00 +=ord (OOO0O00O0000OOOO0 [OO00OOO0OO00O00OO +1 ])#line:213:n += ord(s[i + 1])
    return O0000OOOOO00O0O00 #line:214:return n
def OO0000O0OO00O00O0 (O0OOO00O000O00OOO ,digits =8 ,format =OOOOOOO00O00OO000 ):#line:216:def itn(n, digits=8, format=DEFAULT_FORMAT):
    ""#line:218:"""
    if 0 <=O0OOO00O000O00OOO <8 **(digits -1 ):#line:225:if 0 <= n < 8 ** (digits - 1):
        O000O0000O0OO0O0O =("%0*o"%(digits -1 ,O0OOO00O000O00OOO )).encode ("ascii")+OOO0OOO00OO0O00O0 #line:226:s = ("%0*o" % (digits - 1, n)).encode("ascii") + NUL
    else :#line:227:else:
        if format !=O0O00000OO00O0OO0 or O0OOO00O000O00OOO >=256 **(digits -1 ):#line:228:if format != GNU_FORMAT or n >= 256 ** (digits - 1):
            raise ValueError ("overflow in number field")#line:229:raise ValueError("overflow in number field")
        if O0OOO00O000O00OOO <0 :#line:231:if n < 0:
            O0OOO00O000O00OOO =struct .unpack ("L",struct .pack ("l",O0OOO00O000O00OOO ))[0 ]#line:234:n = struct.unpack("L", struct.pack("l", n))[0]
        O000O0000O0OO0O0O =bytearray ()#line:236:s = bytearray()
        for OOOO0OOO0OO0O000O in range (digits -1 ):#line:237:for i in range(digits - 1):
            O000O0000O0OO0O0O .insert (0 ,O0OOO00O000O00OOO &0o377 )#line:238:s.insert(0, n & 0o377)
            O0OOO00O000O00OOO >>=8 #line:239:n >>= 8
        O000O0000O0OO0O0O .insert (0 ,0o200 )#line:240:s.insert(0, 0o200)
    return O000O0000O0OO0O0O #line:241:return s
def OOO0O0O00OO0O0000 (O0O0O0O000O000O0O ):#line:243:def calc_chksums(buf):
    ""#line:251:"""
    O0O000O0O000OO000 =256 +sum (struct .unpack ("148B",O0O0O0O000O000O0O [:148 ])+struct .unpack ("356B",O0O0O0O000O000O0O [156 :512 ]))#line:252:unsigned_chksum = 256 + sum(struct.unpack("148B", buf[:148]) + struct.unpack("356B", buf[156:512]))
    OO00OO0O00O0OOOOO =256 +sum (struct .unpack ("148b",O0O0O0O000O000O0O [:148 ])+struct .unpack ("356b",O0O0O0O000O000O0O [156 :512 ]))#line:253:signed_chksum = 256 + sum(struct.unpack("148b", buf[:148]) + struct.unpack("356b", buf[156:512]))
    return O0O000O0O000OO000 ,OO00OO0O00O0OOOOO #line:254:return unsigned_chksum, signed_chksum
def OOO0O0O0O0O00OO0O (O0O00OO00000O0000 ,OOO0OO00O0OOO00OO ,length =None ):#line:256:def copyfileobj(src, dst, length=None):
    ""#line:259:"""
    if length ==0 :#line:260:if length == 0:
        return #line:261:return
    if length is None :#line:262:if length is None:
        while True :#line:263:while True:
            OOO0O00OOO0O00O0O =O0O00OO00000O0000 .read (16 *1024 )#line:264:buf = src.read(16*1024)
            if not OOO0O00OOO0O00O0O :#line:265:if not buf:
                break #line:266:break
            OOO0OO00O0OOO00OO .write (OOO0O00OOO0O00O0O )#line:267:dst.write(buf)
        return #line:268:return
    OO0000OO0OOOOO0OO =16 *1024 #line:270:BUFSIZE = 16 * 1024
    O0O0OO0OO000O0OOO ,O0O0O000OOOOO0OOO =divmod (length ,OO0000OO0OOOOO0OO )#line:271:blocks, remainder = divmod(length, BUFSIZE)
    for OO000O00O0000OOOO in range (O0O0OO0OO000O0OOO ):#line:272:for b in range(blocks):
        OOO0O00OOO0O00O0O =O0O00OO00000O0000 .read (OO0000OO0OOOOO0OO )#line:273:buf = src.read(BUFSIZE)
        if len (OOO0O00OOO0O00O0O )<OO0000OO0OOOOO0OO :#line:274:if len(buf) < BUFSIZE:
            raise IOError ("end of file reached")#line:275:raise IOError("end of file reached")
        OOO0OO00O0OOO00OO .write (OOO0O00OOO0O00O0O )#line:276:dst.write(buf)
    if O0O0O000OOOOO0OOO !=0 :#line:278:if remainder != 0:
        OOO0O00OOO0O00O0O =O0O00OO00000O0000 .read (O0O0O000OOOOO0OOO )#line:279:buf = src.read(remainder)
        if len (OOO0O00OOO0O00O0O )<O0O0O000OOOOO0OOO :#line:280:if len(buf) < remainder:
            raise IOError ("end of file reached")#line:281:raise IOError("end of file reached")
        OOO0OO00O0OOO00OO .write (OOO0O00OOO0O00O0O )#line:282:dst.write(buf)
    return #line:283:return
OOOOO0OO00OO00OOO =(((OO0OOO0OO0O00O000 ,"l"),(OO0O0O000OO000OOO ,"-"),(OO00OO00O0O00O0OO ,"b"),(O0O0OO0O0OOOOOOOO ,"d"),(OOO000O00OO000000 ,"c"),(O0OO00OO000OO0O0O ,"p")),((O00O0000OO00O000O ,"r"),),((OO0OOOO0OO00O0000 ,"w"),),((O00O000O00000O0O0 |OOO0O0O00O00O000O ,"s"),(OOO0O0O00O00O000O ,"S"),(O00O000O00000O0O0 ,"x")),((OO0OO000O0O0OO0OO ,"r"),),((O00O0000OO0OO0O00 ,"w"),),((O0O0O0O0O000OO0O0 |OO00000OO000O0OO0 ,"s"),(OO00000OO000O0OO0 ,"S"),(O0O0O0O0O000OO0O0 ,"x")),((OOO0O0000OOOOO0OO ,"r"),),((O000O0OO0OO000000 ,"w"),),((O00OO0OOO0O000OOO |O0O0OO00O00OO000O ,"t"),(O0O0OO00O00OO000O ,"T"),(O00OO0OOO0O000OOO ,"x")))#line:310:)
def OOOO0O00000OOOOO0 (OO0000OO0000O0O00 ):#line:312:def filemode(mode):
    ""#line:316:"""
    OOOO0O00OOOO000OO =[]#line:317:perm = []
    for OO0OOOOOO00O0O00O in OOOOO0OO00OO00OOO :#line:318:for table in filemode_table:
        for OOO0OOOO000OO00OO ,OO000O0O000000O0O in OO0OOOOOO00O0O00O :#line:319:for bit, char in table:
            if OO0000OO0000O0O00 &OOO0OOOO000OO00OO ==OOO0OOOO000OO00OO :#line:320:if mode & bit == bit:
                OOOO0O00OOOO000OO .append (OO000O0O000000O0O )#line:321:perm.append(char)
                break #line:322:break
        else :#line:323:else:
            OOOO0O00OOOO000OO .append ("-")#line:324:perm.append("-")
    return "".join (OOOO0O00OOOO000OO )#line:325:return "".join(perm)
class TarError (Exception ):#line:327:class TarError(Exception):
    ""#line:328:"""Base exception."""
    pass #line:329:pass
class ExtractError (TarError ):#line:330:class ExtractError(TarError):
    ""#line:331:"""General exception for extract errors."""
    pass #line:332:pass
class ReadError (TarError ):#line:333:class ReadError(TarError):
    ""#line:334:"""Exception for unreadable tar archives."""
    pass #line:335:pass
class CompressionError (TarError ):#line:336:class CompressionError(TarError):
    ""#line:337:"""Exception for unavailable compression methods."""
    pass #line:338:pass
class StreamError (TarError ):#line:339:class StreamError(TarError):
    ""#line:340:"""Exception for unsupported operations on stream-like TarFiles."""
    pass #line:341:pass
class HeaderError (TarError ):#line:342:class HeaderError(TarError):
    ""#line:343:"""Base exception for header errors."""
    pass #line:344:pass
class EmptyHeaderError (HeaderError ):#line:345:class EmptyHeaderError(HeaderError):
    ""#line:346:"""Exception for empty headers."""
    pass #line:347:pass
class TruncatedHeaderError (HeaderError ):#line:348:class TruncatedHeaderError(HeaderError):
    ""#line:349:"""Exception for truncated headers."""
    pass #line:350:pass
class EOFHeaderError (HeaderError ):#line:351:class EOFHeaderError(HeaderError):
    ""#line:352:"""Exception for end of file headers."""
    pass #line:353:pass
class InvalidHeaderError (HeaderError ):#line:354:class InvalidHeaderError(HeaderError):
    ""#line:355:"""Exception for invalid headers."""
    pass #line:356:pass
class SubsequentHeaderError (HeaderError ):#line:357:class SubsequentHeaderError(HeaderError):
    ""#line:358:"""Exception for missing and invalid extended headers."""
    pass #line:359:pass
class _OO0O0OO0OOO0OOOO0 (object ):#line:364:class _LowLevelFile(object):
    ""#line:368:"""
    def __init__ (O0O000000O0OOOOO0 ,OOO00000OO0O00OOO ,OOO0O0OO00OO00OO0 ):#line:370:def __init__(self, name, mode):
        OOO0O0OO00OO00OO0 ={"r":os .O_RDONLY ,"w":os .O_WRONLY |os .O_CREAT |os .O_TRUNC ,}[OOO0O0OO00OO00OO0 ]#line:374:}[mode]
        if hasattr (os ,"O_BINARY"):#line:375:if hasattr(os, "O_BINARY"):
            OOO0O0OO00OO00OO0 |=os .O_BINARY #line:376:mode |= os.O_BINARY
        O0O000000O0OOOOO0 .fd =os .open (OOO00000OO0O00OOO ,OOO0O0OO00OO00OO0 ,0o666 )#line:377:self.fd = os.open(name, mode, 0o666)
    def close (O0OOO0OOO0O0OOO00 ):#line:379:def close(self):
        os .close (O0OOO0OOO0O0OOO00 .fd )#line:380:os.close(self.fd)
    def read (OOOOO0000000OOOOO ,O0O0O0OO000OO0O0O ):#line:382:def read(self, size):
        return os .read (OOOOO0000000OOOOO .fd ,O0O0O0OO000OO0O0O )#line:383:return os.read(self.fd, size)
    def write (O0O0O00000OO0OO00 ,O00O0000O00OO00O0 ):#line:385:def write(self, s):
        os .write (O0O0O00000OO0OO00 .fd ,O00O0000O00OO00O0 )#line:386:os.write(self.fd, s)
class _OO0O0O0O0000000OO (object ):#line:388:class _Stream(object):
    ""#line:397:"""
    def __init__ (O00OOOOOO00OOO0OO ,O0000O0OO0O0000O0 ,O00OO0OOOO0O0000O ,O0O0O00O000OO0000 ,OOO00OO0OOOO00OO0 ,O0OOOO00OOOO0O0O0 ):#line:399:def __init__(self, name, mode, comptype, fileobj, bufsize):
        ""#line:401:"""
        O00OOOOOO00OOO0OO ._extfileobj =True #line:402:self._extfileobj = True
        if OOO00OO0OOOO00OO0 is None :#line:403:if fileobj is None:
            OOO00OO0OOOO00OO0 =_OO0O0OO0OOO0OOOO0 (O0000O0OO0O0000O0 ,O00OO0OOOO0O0000O )#line:404:fileobj = _LowLevelFile(name, mode)
            O00OOOOOO00OOO0OO ._extfileobj =False #line:405:self._extfileobj = False
        if O0O0O00O000OO0000 =='*':#line:407:if comptype == '*':
            OOO00OO0OOOO00OO0 =_O0OOO0O0OO0O00OOO (OOO00OO0OOOO00OO0 )#line:410:fileobj = _StreamProxy(fileobj)
            O0O0O00O000OO0000 =OOO00OO0OOOO00OO0 .getcomptype ()#line:411:comptype = fileobj.getcomptype()
        O00OOOOOO00OOO0OO .name =O0000O0OO0O0000O0 or ""#line:413:self.name     = name or ""
        O00OOOOOO00OOO0OO .mode =O00OO0OOOO0O0000O #line:414:self.mode     = mode
        O00OOOOOO00OOO0OO .comptype =O0O0O00O000OO0000 #line:415:self.comptype = comptype
        O00OOOOOO00OOO0OO .fileobj =OOO00OO0OOOO00OO0 #line:416:self.fileobj  = fileobj
        O00OOOOOO00OOO0OO .bufsize =O0OOOO00OOOO0O0O0 #line:417:self.bufsize  = bufsize
        O00OOOOOO00OOO0OO .buf =b""#line:418:self.buf      = b""
        O00OOOOOO00OOO0OO .pos =0 #line:419:self.pos      = 0
        O00OOOOOO00OOO0OO .closed =False #line:420:self.closed   = False
        try :#line:422:try:
            if O0O0O00O000OO0000 =="gz":#line:423:if comptype == "gz":
                try :#line:424:try:
                    import zlib #line:425:import zlib
                except ImportError :#line:426:except ImportError:
                    raise CompressionError ("zlib module is not available")#line:427:raise CompressionError("zlib module is not available")
                O00OOOOOO00OOO0OO .zlib =zlib #line:428:self.zlib = zlib
                O00OOOOOO00OOO0OO .crc =zlib .crc32 (b"")#line:429:self.crc = zlib.crc32(b"")
                if O00OO0OOOO0O0000O =="r":#line:430:if mode == "r":
                    O00OOOOOO00OOO0OO ._init_read_gz ()#line:431:self._init_read_gz()
                else :#line:432:else:
                    O00OOOOOO00OOO0OO ._init_write_gz ()#line:433:self._init_write_gz()
            if O0O0O00O000OO0000 =="bz2":#line:435:if comptype == "bz2":
                try :#line:436:try:
                    import bz2 #line:437:import bz2
                except ImportError :#line:438:except ImportError:
                    raise CompressionError ("bz2 module is not available")#line:439:raise CompressionError("bz2 module is not available")
                if O00OO0OOOO0O0000O =="r":#line:440:if mode == "r":
                    O00OOOOOO00OOO0OO .dbuf =b""#line:441:self.dbuf = b""
                    O00OOOOOO00OOO0OO .cmp =bz2 .BZ2Decompressor ()#line:442:self.cmp = bz2.BZ2Decompressor()
                else :#line:443:else:
                    O00OOOOOO00OOO0OO .cmp =bz2 .BZ2Compressor ()#line:444:self.cmp = bz2.BZ2Compressor()
        except :#line:445:except:
            if not O00OOOOOO00OOO0OO ._extfileobj :#line:446:if not self._extfileobj:
                O00OOOOOO00OOO0OO .fileobj .close ()#line:447:self.fileobj.close()
            O00OOOOOO00OOO0OO .closed =True #line:448:self.closed = True
            raise #line:449:raise
    def __del__ (O00OO0OO0OOOO0OOO ):#line:451:def __del__(self):
        if hasattr (O00OO0OO0OOOO0OOO ,"closed")and not O00OO0OO0OOOO0OOO .closed :#line:452:if hasattr(self, "closed") and not self.closed:
            O00OO0OO0OOOO0OOO .close ()#line:453:self.close()
    def _init_write_gz (O0OOOOOO0OOO0OO00 ):#line:455:def _init_write_gz(self):
        ""#line:457:"""
        O0OOOOOO0OOO0OO00 .cmp =O0OOOOOO0OOO0OO00 .zlib .compressobj (9 ,O0OOOOOO0OOO0OO00 .zlib .DEFLATED ,-O0OOOOOO0OOO0OO00 .zlib .MAX_WBITS ,O0OOOOOO0OOO0OO00 .zlib .DEF_MEM_LEVEL ,0 )#line:461:0)
        OOOO0O000O00OO000 =struct .pack ("<L",int (time .time ()))#line:462:timestamp = struct.pack("<L", int(time.time()))
        O0OOOOOO0OOO0OO00 .___OOO0OOO00O0O00OOO (b"\037\213\010\010"+OOOO0O000O00OO000 +b"\002\377")#line:463:self.__write(b"\037\213\010\010" + timestamp + b"\002\377")
        if O0OOOOOO0OOO0OO00 .name .endswith (".gz"):#line:464:if self.name.endswith(".gz"):
            O0OOOOOO0OOO0OO00 .name =O0OOOOOO0OOO0OO00 .name [:-3 ]#line:465:self.name = self.name[:-3]
        O0OOOOOO0OOO0OO00 .___OOO0OOO00O0O00OOO (O0OOOOOO0OOO0OO00 .name .encode ("iso-8859-1","replace")+OOO0OOO00OO0O00O0 )#line:467:self.__write(self.name.encode("iso-8859-1", "replace") + NUL)
    def write (OOOOO00O0O00000OO ,OO0000O0000OOO000 ):#line:469:def write(self, s):
        ""#line:471:"""
        if OOOOO00O0O00000OO .comptype =="gz":#line:472:if self.comptype == "gz":
            OOOOO00O0O00000OO .crc =OOOOO00O0O00000OO .zlib .crc32 (OO0000O0000OOO000 ,OOOOO00O0O00000OO .crc )#line:473:self.crc = self.zlib.crc32(s, self.crc)
        OOOOO00O0O00000OO .pos +=len (OO0000O0000OOO000 )#line:474:self.pos += len(s)
        if OOOOO00O0O00000OO .comptype !="tar":#line:475:if self.comptype != "tar":
            OO0000O0000OOO000 =OOOOO00O0O00000OO .cmp .compress (OO0000O0000OOO000 )#line:476:s = self.cmp.compress(s)
        OOOOO00O0O00000OO .___OOO0OOO00O0O00OOO (OO0000O0000OOO000 )#line:477:self.__write(s)
    def ___OOO0OOO00O0O00OOO (OOO0OO000O0OO00OO ,O00OO0OO0O00OOOOO ):#line:479:def __write(self, s):
        ""#line:482:"""
        OOO0OO000O0OO00OO .buf +=O00OO0OO0O00OOOOO #line:483:self.buf += s
        while len (OOO0OO000O0OO00OO .buf )>OOO0OO000O0OO00OO .bufsize :#line:484:while len(self.buf) > self.bufsize:
            OOO0OO000O0OO00OO .fileobj .write (OOO0OO000O0OO00OO .buf [:OOO0OO000O0OO00OO .bufsize ])#line:485:self.fileobj.write(self.buf[:self.bufsize])
            OOO0OO000O0OO00OO .buf =OOO0OO000O0OO00OO .buf [OOO0OO000O0OO00OO .bufsize :]#line:486:self.buf = self.buf[self.bufsize:]
    def close (O0OO0000OOOOOO000 ):#line:488:def close(self):
        ""#line:491:"""
        if O0OO0000OOOOOO000 .closed :#line:492:if self.closed:
            return #line:493:return
        if O0OO0000OOOOOO000 .mode =="w"and O0OO0000OOOOOO000 .comptype !="tar":#line:495:if self.mode == "w" and self.comptype != "tar":
            O0OO0000OOOOOO000 .buf +=O0OO0000OOOOOO000 .cmp .flush ()#line:496:self.buf += self.cmp.flush()
        if O0OO0000OOOOOO000 .mode =="w"and O0OO0000OOOOOO000 .buf :#line:498:if self.mode == "w" and self.buf:
            O0OO0000OOOOOO000 .fileobj .write (O0OO0000OOOOOO000 .buf )#line:499:self.fileobj.write(self.buf)
            O0OO0000OOOOOO000 .buf =b""#line:500:self.buf = b""
            if O0OO0000OOOOOO000 .comptype =="gz":#line:501:if self.comptype == "gz":
                O0OO0000OOOOOO000 .fileobj .write (struct .pack ("<L",O0OO0000OOOOOO000 .crc &0xffffffff ))#line:508:self.fileobj.write(struct.pack("<L", self.crc & 0xffffffff))
                O0OO0000OOOOOO000 .fileobj .write (struct .pack ("<L",O0OO0000OOOOOO000 .pos &0xffffFFFF ))#line:509:self.fileobj.write(struct.pack("<L", self.pos & 0xffffFFFF))
        if not O0OO0000OOOOOO000 ._extfileobj :#line:511:if not self._extfileobj:
            O0OO0000OOOOOO000 .fileobj .close ()#line:512:self.fileobj.close()
        O0OO0000OOOOOO000 .closed =True #line:514:self.closed = True
    def _init_read_gz (OO0O000O00OO000OO ):#line:516:def _init_read_gz(self):
        ""#line:518:"""
        OO0O000O00OO000OO .cmp =OO0O000O00OO000OO .zlib .decompressobj (-OO0O000O00OO000OO .zlib .MAX_WBITS )#line:519:self.cmp = self.zlib.decompressobj(-self.zlib.MAX_WBITS)
        OO0O000O00OO000OO .dbuf =b""#line:520:self.dbuf = b""
        if OO0O000O00OO000OO .___O0O0OOO0O00O00O0O (2 )!=b"\037\213":#line:523:if self.__read(2) != b"\037\213":
            raise ReadError ("not a gzip file")#line:524:raise ReadError("not a gzip file")
        if OO0O000O00OO000OO .___O0O0OOO0O00O00O0O (1 )!=b"\010":#line:525:if self.__read(1) != b"\010":
            raise CompressionError ("unsupported compression method")#line:526:raise CompressionError("unsupported compression method")
        OOO0OOO000000O000 =ord (OO0O000O00OO000OO .___O0O0OOO0O00O00O0O (1 ))#line:528:flag = ord(self.__read(1))
        OO0O000O00OO000OO .___O0O0OOO0O00O00O0O (6 )#line:529:self.__read(6)
        if OOO0OOO000000O000 &4 :#line:531:if flag & 4:
            O0OO00O0OOO000OO0 =ord (OO0O000O00OO000OO .___O0O0OOO0O00O00O0O (1 ))+256 *ord (OO0O000O00OO000OO .___O0O0OOO0O00O00O0O (1 ))#line:532:xlen = ord(self.__read(1)) + 256 * ord(self.__read(1))
            OO0O000O00OO000OO .read (O0OO00O0OOO000OO0 )#line:533:self.read(xlen)
        if OOO0OOO000000O000 &8 :#line:534:if flag & 8:
            while True :#line:535:while True:
                OOOO0O0O000OOOO00 =OO0O000O00OO000OO .___O0O0OOO0O00O00O0O (1 )#line:536:s = self.__read(1)
                if not OOOO0O0O000OOOO00 or OOOO0O0O000OOOO00 ==OOO0OOO00OO0O00O0 :#line:537:if not s or s == NUL:
                    break #line:538:break
        if OOO0OOO000000O000 &16 :#line:539:if flag & 16:
            while True :#line:540:while True:
                OOOO0O0O000OOOO00 =OO0O000O00OO000OO .___O0O0OOO0O00O00O0O (1 )#line:541:s = self.__read(1)
                if not OOOO0O0O000OOOO00 or OOOO0O0O000OOOO00 ==OOO0OOO00OO0O00O0 :#line:542:if not s or s == NUL:
                    break #line:543:break
        if OOO0OOO000000O000 &2 :#line:544:if flag & 2:
            OO0O000O00OO000OO .___O0O0OOO0O00O00O0O (2 )#line:545:self.__read(2)
    def tell (O000O0OOOO0OO0O0O ):#line:547:def tell(self):
        ""#line:549:"""
        return O000O0OOOO0OO0O0O .pos #line:550:return self.pos
    def seek (OO0OO0000O0O0OO0O ,pos =0 ):#line:552:def seek(self, pos=0):
        ""#line:555:"""
        if pos -OO0OO0000O0O0OO0O .pos >=0 :#line:556:if pos - self.pos >= 0:
            OOOO0OO000O0000O0 ,OO0O00O0OOOOO00OO =divmod (pos -OO0OO0000O0O0OO0O .pos ,OO0OO0000O0O0OO0O .bufsize )#line:557:blocks, remainder = divmod(pos - self.pos, self.bufsize)
            for O0OO00O0O00OO0000 in range (OOOO0OO000O0000O0 ):#line:558:for i in range(blocks):
                OO0OO0000O0O0OO0O .read (OO0OO0000O0O0OO0O .bufsize )#line:559:self.read(self.bufsize)
            OO0OO0000O0O0OO0O .read (OO0O00O0OOOOO00OO )#line:560:self.read(remainder)
        else :#line:561:else:
            raise StreamError ("seeking backwards is not allowed")#line:562:raise StreamError("seeking backwards is not allowed")
        return OO0OO0000O0O0OO0O .pos #line:563:return self.pos
    def read (OOO0000O0O0O0OO0O ,size =None ):#line:565:def read(self, size=None):
        ""#line:569:"""
        if size is None :#line:570:if size is None:
            OOO0O0O00O00O00OO =[]#line:571:t = []
            while True :#line:572:while True:
                O00000OOOOO000O0O =OOO0000O0O0O0OO0O ._read (OOO0000O0O0O0OO0O .bufsize )#line:573:buf = self._read(self.bufsize)
                if not O00000OOOOO000O0O :#line:574:if not buf:
                    break #line:575:break
                OOO0O0O00O00O00OO .append (O00000OOOOO000O0O )#line:576:t.append(buf)
            O00000OOOOO000O0O ="".join (OOO0O0O00O00O00OO )#line:577:buf = "".join(t)
        else :#line:578:else:
            O00000OOOOO000O0O =OOO0000O0O0O0OO0O ._read (size )#line:579:buf = self._read(size)
        OOO0000O0O0O0OO0O .pos +=len (O00000OOOOO000O0O )#line:580:self.pos += len(buf)
        return O00000OOOOO000O0O #line:581:return buf
    def _read (O00OOO0O00OOOOOO0 ,O000OOOO0O0OO0000 ):#line:583:def _read(self, size):
        ""#line:585:"""
        if O00OOO0O00OOOOOO0 .comptype =="tar":#line:586:if self.comptype == "tar":
            return O00OOO0O00OOOOOO0 .___O0O0OOO0O00O00O0O (O000OOOO0O0OO0000 )#line:587:return self.__read(size)
        OO00O000OOOOOO0O0 =len (O00OOO0O00OOOOOO0 .dbuf )#line:589:c = len(self.dbuf)
        while OO00O000OOOOOO0O0 <O000OOOO0O0OO0000 :#line:590:while c < size:
            O00O0OOO00OO0OO0O =O00OOO0O00OOOOOO0 .___O0O0OOO0O00O00O0O (O00OOO0O00OOOOOO0 .bufsize )#line:591:buf = self.__read(self.bufsize)
            if not O00O0OOO00OO0OO0O :#line:592:if not buf:
                break #line:593:break
            try :#line:594:try:
                O00O0OOO00OO0OO0O =O00OOO0O00OOOOOO0 .cmp .decompress (O00O0OOO00OO0OO0O )#line:595:buf = self.cmp.decompress(buf)
            except IOError :#line:596:except IOError:
                raise ReadError ("invalid compressed data")#line:597:raise ReadError("invalid compressed data")
            O00OOO0O00OOOOOO0 .dbuf +=O00O0OOO00OO0OO0O #line:598:self.dbuf += buf
            OO00O000OOOOOO0O0 +=len (O00O0OOO00OO0OO0O )#line:599:c += len(buf)
        O00O0OOO00OO0OO0O =O00OOO0O00OOOOOO0 .dbuf [:O000OOOO0O0OO0000 ]#line:600:buf = self.dbuf[:size]
        O00OOO0O00OOOOOO0 .dbuf =O00OOO0O00OOOOOO0 .dbuf [O000OOOO0O0OO0000 :]#line:601:self.dbuf = self.dbuf[size:]
        return O00O0OOO00OO0OO0O #line:602:return buf
    def ___O0O0OOO0O00O00O0O (OOO00OO0OOO00O0O0 ,OO00O0OO0OOO0O000 ):#line:604:def __read(self, size):
        ""#line:607:"""
        OO00OO0OOO0O00OOO =len (OOO00OO0OOO00O0O0 .buf )#line:608:c = len(self.buf)
        while OO00OO0OOO0O00OOO <OO00O0OO0OOO0O000 :#line:609:while c < size:
            OOO0OOO0000O00000 =OOO00OO0OOO00O0O0 .fileobj .read (OOO00OO0OOO00O0O0 .bufsize )#line:610:buf = self.fileobj.read(self.bufsize)
            if not OOO0OOO0000O00000 :#line:611:if not buf:
                break #line:612:break
            OOO00OO0OOO00O0O0 .buf +=OOO0OOO0000O00000 #line:613:self.buf += buf
            OO00OO0OOO0O00OOO +=len (OOO0OOO0000O00000 )#line:614:c += len(buf)
        OOO0OOO0000O00000 =OOO00OO0OOO00O0O0 .buf [:OO00O0OO0OOO0O000 ]#line:615:buf = self.buf[:size]
        OOO00OO0OOO00O0O0 .buf =OOO00OO0OOO00O0O0 .buf [OO00O0OO0OOO0O000 :]#line:616:self.buf = self.buf[size:]
        return OOO0OOO0000O00000 #line:617:return buf
class _O0OOO0O0OO0O00OOO (object ):#line:620:class _StreamProxy(object):
    ""#line:623:"""
    def __init__ (OO0OO00000OO0O0OO ,OO0OOO0OOOO0O0O00 ):#line:625:def __init__(self, fileobj):
        OO0OO00000OO0O0OO .fileobj =OO0OOO0OOOO0O0O00 #line:626:self.fileobj = fileobj
        OO0OO00000OO0O0OO .buf =OO0OO00000OO0O0OO .fileobj .read (OO0000O000OO0O0O0 )#line:627:self.buf = self.fileobj.read(BLOCKSIZE)
    def read (O00OOO0O0O00OO00O ,OOOOOOOO000OOOO0O ):#line:629:def read(self, size):
        O00OOO0O0O00OO00O .read =O00OOO0O0O00OO00O .fileobj .read #line:630:self.read = self.fileobj.read
        return O00OOO0O0O00OO00O .buf #line:631:return self.buf
    def getcomptype (OOOO0O0O00O0OO00O ):#line:633:def getcomptype(self):
        if OOOO0O0O00O0OO00O .buf .startswith (b"\037\213\010"):#line:634:if self.buf.startswith(b"\037\213\010"):
            return "gz"#line:635:return "gz"
        if OOOO0O0O00O0OO00O .buf .startswith (b"BZh91"):#line:636:if self.buf.startswith(b"BZh91"):
            return "bz2"#line:637:return "bz2"
        return "tar"#line:638:return "tar"
    def close (OO0OOOO000OO0OOO0 ):#line:640:def close(self):
        OO0OOOO000OO0OOO0 .fileobj .close ()#line:641:self.fileobj.close()
class _O0OO00000OOO00O0O (object ):#line:644:class _BZ2Proxy(object):
    ""#line:650:"""
    blocksize =16 *1024 #line:652:blocksize = 16 * 1024
    def __init__ (O00OOO00O0OOOOOOO ,O0OOO0OO00O0OO000 ,O0OO0OOO0OO0000OO ):#line:654:def __init__(self, fileobj, mode):
        O00OOO00O0OOOOOOO .fileobj =O0OOO0OO00O0OO000 #line:655:self.fileobj = fileobj
        O00OOO00O0OOOOOOO .mode =O0OO0OOO0OO0000OO #line:656:self.mode = mode
        O00OOO00O0OOOOOOO .name =getattr (O00OOO00O0OOOOOOO .fileobj ,"name",None )#line:657:self.name = getattr(self.fileobj, "name", None)
        O00OOO00O0OOOOOOO .init ()#line:658:self.init()
    def init (OOOO0O0O00O000000 ):#line:660:def init(self):
        import bz2 #line:661:import bz2
        OOOO0O0O00O000000 .pos =0 #line:662:self.pos = 0
        if OOOO0O0O00O000000 .mode =="r":#line:663:if self.mode == "r":
            OOOO0O0O00O000000 .bz2obj =bz2 .BZ2Decompressor ()#line:664:self.bz2obj = bz2.BZ2Decompressor()
            OOOO0O0O00O000000 .fileobj .seek (0 )#line:665:self.fileobj.seek(0)
            OOOO0O0O00O000000 .buf =b""#line:666:self.buf = b""
        else :#line:667:else:
            OOOO0O0O00O000000 .bz2obj =bz2 .BZ2Compressor ()#line:668:self.bz2obj = bz2.BZ2Compressor()
    def read (O000OOOO0OOO0OO00 ,OOO0O000OO00000OO ):#line:670:def read(self, size):
        OO0OOO0OO00OOOOO0 =len (O000OOOO0OOO0OO00 .buf )#line:671:x = len(self.buf)
        while OO0OOO0OO00OOOOO0 <OOO0O000OO00000OO :#line:672:while x < size:
            OOO0OOO0OOO000OO0 =O000OOOO0OOO0OO00 .fileobj .read (O000OOOO0OOO0OO00 .blocksize )#line:673:raw = self.fileobj.read(self.blocksize)
            if not OOO0OOO0OOO000OO0 :#line:674:if not raw:
                break #line:675:break
            OO0OO0OOO0OOO0O0O =O000OOOO0OOO0OO00 .bz2obj .decompress (OOO0OOO0OOO000OO0 )#line:676:data = self.bz2obj.decompress(raw)
            O000OOOO0OOO0OO00 .buf +=OO0OO0OOO0OOO0O0O #line:677:self.buf += data
            OO0OOO0OO00OOOOO0 +=len (OO0OO0OOO0OOO0O0O )#line:678:x += len(data)
        OOO000O000000OOOO =O000OOOO0OOO0OO00 .buf [:OOO0O000OO00000OO ]#line:680:buf = self.buf[:size]
        O000OOOO0OOO0OO00 .buf =O000OOOO0OOO0OO00 .buf [OOO0O000OO00000OO :]#line:681:self.buf = self.buf[size:]
        O000OOOO0OOO0OO00 .pos +=len (OOO000O000000OOOO )#line:682:self.pos += len(buf)
        return OOO000O000000OOOO #line:683:return buf
    def seek (O00O0O00OOO0OO0OO ,OOO00O0OO00OOOOOO ):#line:685:def seek(self, pos):
        if OOO00O0OO00OOOOOO <O00O0O00OOO0OO0OO .pos :#line:686:if pos < self.pos:
            O00O0O00OOO0OO0OO .init ()#line:687:self.init()
        O00O0O00OOO0OO0OO .read (OOO00O0OO00OOOOOO -O00O0O00OOO0OO0OO .pos )#line:688:self.read(pos - self.pos)
    def tell (OOO0O0O0OO0OO000O ):#line:690:def tell(self):
        return OOO0O0O0OO0OO000O .pos #line:691:return self.pos
    def write (O00OO0O00O0OOOOOO ,OOOOOO0O0OO00O00O ):#line:693:def write(self, data):
        O00OO0O00O0OOOOOO .pos +=len (OOOOOO0O0OO00O00O )#line:694:self.pos += len(data)
        OO0O0000O00O0000O =O00OO0O00O0OOOOOO .bz2obj .compress (OOOOOO0O0OO00O00O )#line:695:raw = self.bz2obj.compress(data)
        O00OO0O00O0OOOOOO .fileobj .write (OO0O0000O00O0000O )#line:696:self.fileobj.write(raw)
    def close (OOOO0OO00OOO000O0 ):#line:698:def close(self):
        if OOOO0OO00OOO000O0 .mode =="w":#line:699:if self.mode == "w":
            OOOOO000000OOO00O =OOOO0OO00OOO000O0 .bz2obj .flush ()#line:700:raw = self.bz2obj.flush()
            OOOO0OO00OOO000O0 .fileobj .write (OOOOO000000OOO00O )#line:701:self.fileobj.write(raw)
class _OOOOO0OOO0000OOOO (object ):#line:707:class _FileInFile(object):
    ""#line:711:"""
    def __init__ (O000OO0O00000O00O ,OO0OOO0O0000OO00O ,OOO0OO0OOO0O0O0O0 ,O0O000OO0OOOO0OO0 ,blockinfo =None ):#line:713:def __init__(self, fileobj, offset, size, blockinfo=None):
        O000OO0O00000O00O .fileobj =OO0OOO0O0000OO00O #line:714:self.fileobj = fileobj
        O000OO0O00000O00O .offset =OOO0OO0OOO0O0O0O0 #line:715:self.offset = offset
        O000OO0O00000O00O .size =O0O000OO0OOOO0OO0 #line:716:self.size = size
        O000OO0O00000O00O .position =0 #line:717:self.position = 0
        if blockinfo is None :#line:719:if blockinfo is None:
            blockinfo =[(0 ,O0O000OO0OOOO0OO0 )]#line:720:blockinfo = [(0, size)]
        O000OO0O00000O00O .map_index =0 #line:723:self.map_index = 0
        O000OO0O00000O00O .map =[]#line:724:self.map = []
        OO00O0000OO00OOOO =0 #line:725:lastpos = 0
        OOOOOO00000OO0OO0 =O000OO0O00000O00O .offset #line:726:realpos = self.offset
        for OOO0OO0OOO0O0O0O0 ,O0O000OO0OOOO0OO0 in blockinfo :#line:727:for offset, size in blockinfo:
            if OOO0OO0OOO0O0O0O0 >OO00O0000OO00OOOO :#line:728:if offset > lastpos:
                O000OO0O00000O00O .map .append ((False ,OO00O0000OO00OOOO ,OOO0OO0OOO0O0O0O0 ,None ))#line:729:self.map.append((False, lastpos, offset, None))
            O000OO0O00000O00O .map .append ((True ,OOO0OO0OOO0O0O0O0 ,OOO0OO0OOO0O0O0O0 +O0O000OO0OOOO0OO0 ,OOOOOO00000OO0OO0 ))#line:730:self.map.append((True, offset, offset + size, realpos))
            OOOOOO00000OO0OO0 +=O0O000OO0OOOO0OO0 #line:731:realpos += size
            OO00O0000OO00OOOO =OOO0OO0OOO0O0O0O0 +O0O000OO0OOOO0OO0 #line:732:lastpos = offset + size
        if OO00O0000OO00OOOO <O000OO0O00000O00O .size :#line:733:if lastpos < self.size:
            O000OO0O00000O00O .map .append ((False ,OO00O0000OO00OOOO ,O000OO0O00000O00O .size ,None ))#line:734:self.map.append((False, lastpos, self.size, None))
    def seekable (OOOOO00O0O00OO00O ):#line:736:def seekable(self):
        if not hasattr (OOOOO00O0O00OO00O .fileobj ,"seekable"):#line:737:if not hasattr(self.fileobj, "seekable"):
            return True #line:739:return True
        return OOOOO00O0O00OO00O .fileobj .seekable ()#line:740:return self.fileobj.seekable()
    def tell (O0OOOO00000O000O0 ):#line:742:def tell(self):
        ""#line:744:"""
        return O0OOOO00000O000O0 .position #line:745:return self.position
    def seek (O00O0OOOOO000OOOO ,O0O0O0OOOO00O00OO ):#line:747:def seek(self, position):
        ""#line:749:"""
        O00O0OOOOO000OOOO .position =O0O0O0OOOO00O00OO #line:750:self.position = position
    def read (O0OOO0O000OO0OOO0 ,size =None ):#line:752:def read(self, size=None):
        ""#line:754:"""
        if size is None :#line:755:if size is None:
            size =O0OOO0O000OO0OOO0 .size -O0OOO0O000OO0OOO0 .position #line:756:size = self.size - self.position
        else :#line:757:else:
            size =min (size ,O0OOO0O000OO0OOO0 .size -O0OOO0O000OO0OOO0 .position )#line:758:size = min(size, self.size - self.position)
        OO00000O00OO0O0OO =b""#line:760:buf = b""
        while size >0 :#line:761:while size > 0:
            while True :#line:762:while True:
                OO00OO00OO0O00000 ,O0OO000OO0O000000 ,OO00OO000OO00O0O0 ,O0OO00OOOOOO000O0 =O0OOO0O000OO0OOO0 .map [O0OOO0O000OO0OOO0 .map_index ]#line:763:data, start, stop, offset = self.map[self.map_index]
                if O0OO000OO0O000000 <=O0OOO0O000OO0OOO0 .position <OO00OO000OO00O0O0 :#line:764:if start <= self.position < stop:
                    break #line:765:break
                else :#line:766:else:
                    O0OOO0O000OO0OOO0 .map_index +=1 #line:767:self.map_index += 1
                    if O0OOO0O000OO0OOO0 .map_index ==len (O0OOO0O000OO0OOO0 .map ):#line:768:if self.map_index == len(self.map):
                        O0OOO0O000OO0OOO0 .map_index =0 #line:769:self.map_index = 0
            O0O0OO000000OO00O =min (size ,OO00OO000OO00O0O0 -O0OOO0O000OO0OOO0 .position )#line:770:length = min(size, stop - self.position)
            if OO00OO00OO0O00000 :#line:771:if data:
                O0OOO0O000OO0OOO0 .fileobj .seek (O0OO00OOOOOO000O0 +(O0OOO0O000OO0OOO0 .position -O0OO000OO0O000000 ))#line:772:self.fileobj.seek(offset + (self.position - start))
                OO00000O00OO0O0OO +=O0OOO0O000OO0OOO0 .fileobj .read (O0O0OO000000OO00O )#line:773:buf += self.fileobj.read(length)
            else :#line:774:else:
                OO00000O00OO0O0OO +=OOO0OOO00OO0O00O0 *O0O0OO000000OO00O #line:775:buf += NUL * length
            size -=O0O0OO000000OO00O #line:776:size -= length
            O0OOO0O000OO0OOO0 .position +=O0O0OO000000OO00O #line:777:self.position += length
        return OO00000O00OO0O0OO #line:778:return buf
class O0OO0O00OO00OOO00 (object ):#line:782:class ExFileObject(object):
    ""#line:785:"""
    blocksize =1024 #line:786:blocksize = 1024
    def __init__ (O000OOOOO00OOOOOO ,OOOO0000O0OOOOO0O ,OOOO00O0O00OO0OO0 ):#line:788:def __init__(self, tarfile, tarinfo):
        O000OOOOO00OOOOOO .fileobj =_OOOOO0OOO0000OOOO (OOOO0000O0OOOOO0O .fileobj ,OOOO00O0O00OO0OO0 .offset_data ,OOOO00O0O00OO0OO0 .size ,OOOO00O0O00OO0OO0 .sparse )#line:792:tarinfo.sparse)
        O000OOOOO00OOOOOO .name =OOOO00O0O00OO0OO0 .name #line:793:self.name = tarinfo.name
        O000OOOOO00OOOOOO .mode ="r"#line:794:self.mode = "r"
        O000OOOOO00OOOOOO .closed =False #line:795:self.closed = False
        O000OOOOO00OOOOOO .size =OOOO00O0O00OO0OO0 .size #line:796:self.size = tarinfo.size
        O000OOOOO00OOOOOO .position =0 #line:798:self.position = 0
        O000OOOOO00OOOOOO .buffer =b""#line:799:self.buffer = b""
    def readable (O00O000OO0O0O0000 ):#line:801:def readable(self):
        return True #line:802:return True
    def writable (O00OOO0OOOOO0O00O ):#line:804:def writable(self):
        return False #line:805:return False
    def seekable (OO0O0O0O0O00O0OO0 ):#line:807:def seekable(self):
        return OO0O0O0O0O00O0OO0 .fileobj .seekable ()#line:808:return self.fileobj.seekable()
    def read (O0OO0OO00OO0OOOOO ,size =None ):#line:810:def read(self, size=None):
        ""#line:813:"""
        if O0OO0OO00OO0OOOOO .closed :#line:814:if self.closed:
            raise ValueError ("I/O operation on closed file")#line:815:raise ValueError("I/O operation on closed file")
        O0000OOO0O0OOOOO0 =b""#line:817:buf = b""
        if O0OO0OO00OO0OOOOO .buffer :#line:818:if self.buffer:
            if size is None :#line:819:if size is None:
                O0000OOO0O0OOOOO0 =O0OO0OO00OO0OOOOO .buffer #line:820:buf = self.buffer
                O0OO0OO00OO0OOOOO .buffer =b""#line:821:self.buffer = b""
            else :#line:822:else:
                O0000OOO0O0OOOOO0 =O0OO0OO00OO0OOOOO .buffer [:size ]#line:823:buf = self.buffer[:size]
                O0OO0OO00OO0OOOOO .buffer =O0OO0OO00OO0OOOOO .buffer [size :]#line:824:self.buffer = self.buffer[size:]
        if size is None :#line:826:if size is None:
            O0000OOO0O0OOOOO0 +=O0OO0OO00OO0OOOOO .fileobj .read ()#line:827:buf += self.fileobj.read()
        else :#line:828:else:
            O0000OOO0O0OOOOO0 +=O0OO0OO00OO0OOOOO .fileobj .read (size -len (O0000OOO0O0OOOOO0 ))#line:829:buf += self.fileobj.read(size - len(buf))
        O0OO0OO00OO0OOOOO .position +=len (O0000OOO0O0OOOOO0 )#line:831:self.position += len(buf)
        return O0000OOO0O0OOOOO0 #line:832:return buf
    read1 =read #line:835:read1 = read
    def readline (OOOOO0O0OO000O00O ,size =-1 ):#line:837:def readline(self, size=-1):
        ""#line:841:"""
        if OOOOO0O0OO000O00O .closed :#line:842:if self.closed:
            raise ValueError ("I/O operation on closed file")#line:843:raise ValueError("I/O operation on closed file")
        O000OOOOOOO0O0O00 =OOOOO0O0OO000O00O .buffer .find (b"\n")+1 #line:845:pos = self.buffer.find(b"\n") + 1
        if O000OOOOOOO0O0O00 ==0 :#line:846:if pos == 0:
            while True :#line:848:while True:
                OO0OOO0000O0OOOOO =OOOOO0O0OO000O00O .fileobj .read (OOOOO0O0OO000O00O .blocksize )#line:849:buf = self.fileobj.read(self.blocksize)
                OOOOO0O0OO000O00O .buffer +=OO0OOO0000O0OOOOO #line:850:self.buffer += buf
                if not OO0OOO0000O0OOOOO or b"\n"in OO0OOO0000O0OOOOO :#line:851:if not buf or b"\n" in buf:
                    O000OOOOOOO0O0O00 =OOOOO0O0OO000O00O .buffer .find (b"\n")+1 #line:852:pos = self.buffer.find(b"\n") + 1
                    if O000OOOOOOO0O0O00 ==0 :#line:853:if pos == 0:
                        O000OOOOOOO0O0O00 =len (OOOOO0O0OO000O00O .buffer )#line:855:pos = len(self.buffer)
                    break #line:856:break
        if size !=-1 :#line:858:if size != -1:
            O000OOOOOOO0O0O00 =min (size ,O000OOOOOOO0O0O00 )#line:859:pos = min(size, pos)
        OO0OOO0000O0OOOOO =OOOOO0O0OO000O00O .buffer [:O000OOOOOOO0O0O00 ]#line:861:buf = self.buffer[:pos]
        OOOOO0O0OO000O00O .buffer =OOOOO0O0OO000O00O .buffer [O000OOOOOOO0O0O00 :]#line:862:self.buffer = self.buffer[pos:]
        OOOOO0O0OO000O00O .position +=len (OO0OOO0000O0OOOOO )#line:863:self.position += len(buf)
        return OO0OOO0000O0OOOOO #line:864:return buf
    def readlines (O0OOOO0OOO0OO0O0O ):#line:866:def readlines(self):
        ""#line:868:"""
        O000OOO0O000O000O =[]#line:869:result = []
        while True :#line:870:while True:
            O00O00OO0O0OOOOO0 =O0OOOO0OOO0OO0O0O .readline ()#line:871:line = self.readline()
            if not O00O00OO0O0OOOOO0 :break #line:872:if not line: break
            O000OOO0O000O000O .append (O00O00OO0O0OOOOO0 )#line:873:result.append(line)
        return O000OOO0O000O000O #line:874:return result
    def tell (O00OOO0OO000O0O00 ):#line:876:def tell(self):
        ""#line:878:"""
        if O00OOO0OO000O0O00 .closed :#line:879:if self.closed:
            raise ValueError ("I/O operation on closed file")#line:880:raise ValueError("I/O operation on closed file")
        return O00OOO0OO000O0O00 .position #line:882:return self.position
    def seek (O000O0O0O0O0O000O ,O0OO0000OOOO00O0O ,whence =os .SEEK_SET ):#line:884:def seek(self, pos, whence=os.SEEK_SET):
        ""#line:886:"""
        if O000O0O0O0O0O000O .closed :#line:887:if self.closed:
            raise ValueError ("I/O operation on closed file")#line:888:raise ValueError("I/O operation on closed file")
        if whence ==os .SEEK_SET :#line:890:if whence == os.SEEK_SET:
            O000O0O0O0O0O000O .position =min (max (O0OO0000OOOO00O0O ,0 ),O000O0O0O0O0O000O .size )#line:891:self.position = min(max(pos, 0), self.size)
        elif whence ==os .SEEK_CUR :#line:892:elif whence == os.SEEK_CUR:
            if O0OO0000OOOO00O0O <0 :#line:893:if pos < 0:
                O000O0O0O0O0O000O .position =max (O000O0O0O0O0O000O .position +O0OO0000OOOO00O0O ,0 )#line:894:self.position = max(self.position + pos, 0)
            else :#line:895:else:
                O000O0O0O0O0O000O .position =min (O000O0O0O0O0O000O .position +O0OO0000OOOO00O0O ,O000O0O0O0O0O000O .size )#line:896:self.position = min(self.position + pos, self.size)
        elif whence ==os .SEEK_END :#line:897:elif whence == os.SEEK_END:
            O000O0O0O0O0O000O .position =max (min (O000O0O0O0O0O000O .size +O0OO0000OOOO00O0O ,O000O0O0O0O0O000O .size ),0 )#line:898:self.position = max(min(self.size + pos, self.size), 0)
        else :#line:899:else:
            raise ValueError ("Invalid argument")#line:900:raise ValueError("Invalid argument")
        O000O0O0O0O0O000O .buffer =b""#line:902:self.buffer = b""
        O000O0O0O0O0O000O .fileobj .seek (O000O0O0O0O0O000O .position )#line:903:self.fileobj.seek(self.position)
    def close (OO000O000O0O00000 ):#line:905:def close(self):
        ""#line:907:"""
        OO000O000O0O00000 .closed =True #line:908:self.closed = True
    def __iter__ (O000OOOOOOOO0O0OO ):#line:910:def __iter__(self):
        ""#line:912:"""
        while True :#line:913:while True:
            O00O000O0OO00O00O =O000OOOOOOOO0O0OO .readline ()#line:914:line = self.readline()
            if not O00O000O0OO00O00O :#line:915:if not line:
                break #line:916:break
            yield O00O000O0OO00O00O #line:917:yield line
class TarInfo (object ):#line:923:class TarInfo(object):
    ""#line:929:"""
    __slots__ =("name","mode","uid","gid","size","mtime","chksum","type","linkname","uname","gname","devmajor","devminor","offset","offset_data","pax_headers","sparse","tarfile","_sparse_structs","_link_target")#line:935:"tarfile", "_sparse_structs", "_link_target")
    def __init__ (OO0O00OOO00O00O0O ,name =""):#line:937:def __init__(self, name=""):
        ""#line:940:"""
        OO0O00OOO00O00O0O .name =name #line:941:self.name = name        # member name
        OO0O00OOO00O00O0O .mode =0o644 #line:942:self.mode = 0o644       # file permissions
        OO0O00OOO00O00O0O .uid =0 #line:943:self.uid = 0            # user id
        OO0O00OOO00O00O0O .gid =0 #line:944:self.gid = 0            # group id
        OO0O00OOO00O00O0O .size =0 #line:945:self.size = 0           # file size
        OO0O00OOO00O00O0O .mtime =0 #line:946:self.mtime = 0          # modification time
        OO0O00OOO00O00O0O .chksum =0 #line:947:self.chksum = 0         # header checksum
        OO0O00OOO00O00O0O .type =OO000OOO0OOO0000O #line:948:self.type = REGTYPE     # member type
        OO0O00OOO00O00O0O .linkname =""#line:949:self.linkname = ""      # link name
        OO0O00OOO00O00O0O .uname =""#line:950:self.uname = ""         # user name
        OO0O00OOO00O00O0O .gname =""#line:951:self.gname = ""         # group name
        OO0O00OOO00O00O0O .devmajor =0 #line:952:self.devmajor = 0       # device major number
        OO0O00OOO00O00O0O .devminor =0 #line:953:self.devminor = 0       # device minor number
        OO0O00OOO00O00O0O .offset =0 #line:955:self.offset = 0         # the tar header starts here
        OO0O00OOO00O00O0O .offset_data =0 #line:956:self.offset_data = 0    # the file's data starts here
        OO0O00OOO00O00O0O .sparse =None #line:958:self.sparse = None      # sparse member information
        OO0O00OOO00O00O0O .pax_headers ={}#line:959:self.pax_headers = {}   # pax header information
    def _getpath (O00000OOO0000OO00 ):#line:963:def _getpath(self):
        return O00000OOO0000OO00 .name #line:964:return self.name
    def _setpath (OO00OO0O0O0OO0O00 ,O0OOOOOO00O0OO00O ):#line:965:def _setpath(self, name):
        OO00OO0O0O0OO0O00 .name =O0OOOOOO00O0OO00O #line:966:self.name = name
    path =property (_getpath ,_setpath )#line:967:path = property(_getpath, _setpath)
    def _getlinkpath (OO0OO00O0OO0O000O ):#line:969:def _getlinkpath(self):
        return OO0OO00O0OO0O000O .linkname #line:970:return self.linkname
    def _setlinkpath (OO000O000OO000O00 ,O0000O000OOO00OOO ):#line:971:def _setlinkpath(self, linkname):
        OO000O000OO000O00 .linkname =O0000O000OOO00OOO #line:972:self.linkname = linkname
    linkpath =property (_getlinkpath ,_setlinkpath )#line:973:linkpath = property(_getlinkpath, _setlinkpath)
    def __repr__ (O0OO0OO000OOO0OOO ):#line:975:def __repr__(self):
        return "<%s %r at %#x>"%(O0OO0OO000OOO0OOO .__class__ .__name__ ,O0OO0OO000OOO0OOO .name ,id (O0OO0OO000OOO0OOO ))#line:976:return "<%s %r at %#x>" % (self.__class__.__name__,self.name,id(self))
    def get_info (O0O000O0OOOO0OOOO ):#line:978:def get_info(self):
        ""#line:980:"""
        OO0O000O0O0000OOO ={"name":O0O000O0OOOO0OOOO .name ,"mode":O0O000O0OOOO0OOOO .mode &0o7777 ,"uid":O0O000O0OOOO0OOOO .uid ,"gid":O0O000O0OOOO0OOOO .gid ,"size":O0O000O0OOOO0OOOO .size ,"mtime":O0O000O0OOOO0OOOO .mtime ,"chksum":O0O000O0OOOO0OOOO .chksum ,"type":O0O000O0OOOO0OOOO .type ,"linkname":O0O000O0OOOO0OOOO .linkname ,"uname":O0O000O0OOOO0OOOO .uname ,"gname":O0O000O0OOOO0OOOO .gname ,"devmajor":O0O000O0OOOO0OOOO .devmajor ,"devminor":O0O000O0OOOO0OOOO .devminor }#line:995:}
        if OO0O000O0O0000OOO ["type"]==OOOO0O00000O00O00 and not OO0O000O0O0000OOO ["name"].endswith ("/"):#line:997:if info["type"] == DIRTYPE and not info["name"].endswith("/"):
            OO0O000O0O0000OOO ["name"]+="/"#line:998:info["name"] += "/"
        return OO0O000O0O0000OOO #line:1000:return info
    def tobuf (O00OO00O0OOO0OOO0 ,format =OOOOOOO00O00OO000 ,encoding =OO00OOO000OOOOO0O ,errors ="surrogateescape"):#line:1002:def tobuf(self, format=DEFAULT_FORMAT, encoding=ENCODING, errors="surrogateescape"):
        ""#line:1004:"""
        O00O000OO00OOO000 =O00OO00O0OOO0OOO0 .get_info ()#line:1005:info = self.get_info()
        if format ==O00O0OOO000000O0O :#line:1007:if format == USTAR_FORMAT:
            return O00OO00O0OOO0OOO0 .create_ustar_header (O00O000OO00OOO000 ,encoding ,errors )#line:1008:return self.create_ustar_header(info, encoding, errors)
        elif format ==O0O00000OO00O0OO0 :#line:1009:elif format == GNU_FORMAT:
            return O00OO00O0OOO0OOO0 .create_gnu_header (O00O000OO00OOO000 ,encoding ,errors )#line:1010:return self.create_gnu_header(info, encoding, errors)
        elif format ==OOO000OO0O000OOO0 :#line:1011:elif format == PAX_FORMAT:
            return O00OO00O0OOO0OOO0 .create_pax_header (O00O000OO00OOO000 ,encoding )#line:1012:return self.create_pax_header(info, encoding)
        else :#line:1013:else:
            raise ValueError ("invalid format")#line:1014:raise ValueError("invalid format")
    def create_ustar_header (OO0OO00OO000OO00O ,O000O00OOO0OOO000 ,OO0O000OOOOOOO000 ,O00OO00O000OO000O ):#line:1016:def create_ustar_header(self, info, encoding, errors):
        ""#line:1018:"""
        O000O00OOO0OOO000 ["magic"]=O00000OO00OOO0OO0 #line:1019:info["magic"] = POSIX_MAGIC
        if len (O000O00OOO0OOO000 ["linkname"])>O00O0OOOOO0OOO000 :#line:1021:if len(info["linkname"]) > LENGTH_LINK:
            raise ValueError ("linkname is too long")#line:1022:raise ValueError("linkname is too long")
        if len (O000O00OOO0OOO000 ["name"])>OOO0O00OO0OO0OO00 :#line:1024:if len(info["name"]) > LENGTH_NAME:
            O000O00OOO0OOO000 ["prefix"],O000O00OOO0OOO000 ["name"]=OO0OO00OO000OO00O ._posix_split_name (O000O00OOO0OOO000 ["name"])#line:1025:info["prefix"], info["name"] = self._posix_split_name(info["name"])
        return OO0OO00OO000OO00O ._create_header (O000O00OOO0OOO000 ,O00O0OOO000000O0O ,OO0O000OOOOOOO000 ,O00OO00O000OO000O )#line:1027:return self._create_header(info, USTAR_FORMAT, encoding, errors)
    def create_gnu_header (OOOO0O00O0OO00O00 ,OO0OOO0O00O000OO0 ,O0000O0O0OOO000O0 ,O0O0OOOO000000O00 ):#line:1029:def create_gnu_header(self, info, encoding, errors):
        ""#line:1031:"""
        OO0OOO0O00O000OO0 ["magic"]=OOO0O0OO0OOOOOOOO #line:1032:info["magic"] = GNU_MAGIC
        OOOOOO0O000OO0OO0 =b""#line:1034:buf = b""
        if len (OO0OOO0O00O000OO0 ["linkname"])>O00O0OOOOO0OOO000 :#line:1035:if len(info["linkname"]) > LENGTH_LINK:
            OOOOOO0O000OO0OO0 +=OOOO0O00O0OO00O00 ._create_gnu_long_header (OO0OOO0O00O000OO0 ["linkname"],OOOOO00O0000000O0 ,O0000O0O0OOO000O0 ,O0O0OOOO000000O00 )#line:1036:buf += self._create_gnu_long_header(info["linkname"], GNUTYPE_LONGLINK, encoding, errors)
        if len (OO0OOO0O00O000OO0 ["name"])>OOO0O00OO0OO0OO00 :#line:1038:if len(info["name"]) > LENGTH_NAME:
            OOOOOO0O000OO0OO0 +=OOOO0O00O0OO00O00 ._create_gnu_long_header (OO0OOO0O00O000OO0 ["name"],OOOO00O0OO00O0O00 ,O0000O0O0OOO000O0 ,O0O0OOOO000000O00 )#line:1039:buf += self._create_gnu_long_header(info["name"], GNUTYPE_LONGNAME, encoding, errors)
        return OOOOOO0O000OO0OO0 +OOOO0O00O0OO00O00 ._create_header (OO0OOO0O00O000OO0 ,O0O00000OO00O0OO0 ,O0000O0O0OOO000O0 ,O0O0OOOO000000O00 )#line:1041:return buf + self._create_header(info, GNU_FORMAT, encoding, errors)
    def create_pax_header (OOOOO00O0OO00O00O ,OOOOO0O000O00O0O0 ,OOO0000000OOO00O0 ):#line:1043:def create_pax_header(self, info, encoding):
        ""#line:1047:"""
        OOOOO0O000O00O0O0 ["magic"]=O00000OO00OOO0OO0 #line:1048:info["magic"] = POSIX_MAGIC
        O0OO000O0OOOO00O0 =OOOOO00O0OO00O00O .pax_headers .copy ()#line:1049:pax_headers = self.pax_headers.copy()
        for OOOO00OOOOOOOO0O0 ,O00OOOO000OOOO00O ,O0OO000OO0O00OOOO in (("name","path",OOO0O00OO0OO0OO00 ),("linkname","linkpath",O00O0OOOOO0OOO000 ),("uname","uname",32 ),("gname","gname",32 )):#line:1055:("uname", "uname", 32), ("gname", "gname", 32)):
            if O00OOOO000OOOO00O in O0OO000O0OOOO00O0 :#line:1057:if hname in pax_headers:
                continue #line:1059:continue
            try :#line:1062:try:
                OOOOO0O000O00O0O0 [OOOO00OOOOOOOO0O0 ].encode ("ascii","strict")#line:1063:info[name].encode("ascii", "strict")
            except UnicodeEncodeError :#line:1064:except UnicodeEncodeError:
                O0OO000O0OOOO00O0 [O00OOOO000OOOO00O ]=OOOOO0O000O00O0O0 [OOOO00OOOOOOOO0O0 ]#line:1065:pax_headers[hname] = info[name]
                continue #line:1066:continue
            if len (OOOOO0O000O00O0O0 [OOOO00OOOOOOOO0O0 ])>O0OO000OO0O00OOOO :#line:1068:if len(info[name]) > length:
                O0OO000O0OOOO00O0 [O00OOOO000OOOO00O ]=OOOOO0O000O00O0O0 [OOOO00OOOOOOOO0O0 ]#line:1069:pax_headers[hname] = info[name]
        for OOOO00OOOOOOOO0O0 ,O00OO0O0OO0OO00OO in (("uid",8 ),("gid",8 ),("size",12 ),("mtime",12 )):#line:1073:for name, digits in (("uid", 8), ("gid", 8), ("size", 12), ("mtime", 12)):
            if OOOO00OOOOOOOO0O0 in O0OO000O0OOOO00O0 :#line:1074:if name in pax_headers:
                OOOOO0O000O00O0O0 [OOOO00OOOOOOOO0O0 ]=0 #line:1076:info[name] = 0
                continue #line:1077:continue
            OO00OO0O0O0O0OO0O =OOOOO0O000O00O0O0 [OOOO00OOOOOOOO0O0 ]#line:1079:val = info[name]
            if not 0 <=OO00OO0O0O0O0OO0O <8 **(O00OO0O0OO0OO00OO -1 )or isinstance (OO00OO0O0O0O0OO0O ,float ):#line:1080:if not 0 <= val < 8 ** (digits - 1) or isinstance(val, float):
                O0OO000O0OOOO00O0 [OOOO00OOOOOOOO0O0 ]=str (OO00OO0O0O0O0OO0O )#line:1081:pax_headers[name] = str(val)
                OOOOO0O000O00O0O0 [OOOO00OOOOOOOO0O0 ]=0 #line:1082:info[name] = 0
        if O0OO000O0OOOO00O0 :#line:1085:if pax_headers:
            O0000000O0O00O00O =OOOOO00O0OO00O00O ._create_pax_generic_header (O0OO000O0OOOO00O0 ,O0O0OO00OOO0OOO0O ,OOO0000000OOO00O0 )#line:1086:buf = self._create_pax_generic_header(pax_headers, XHDTYPE, encoding)
        else :#line:1087:else:
            O0000000O0O00O00O =b""#line:1088:buf = b""
        return O0000000O0O00O00O +OOOOO00O0OO00O00O ._create_header (OOOOO0O000O00O0O0 ,O00O0OOO000000O0O ,"ascii","replace")#line:1090:return buf + self._create_header(info, USTAR_FORMAT, "ascii", "replace")
    @classmethod #line:1092:@classmethod
    def create_pax_global_header (OO0O0OO0000000O0O ,OOO000OOOO00OO0OO ):#line:1093:def create_pax_global_header(cls, pax_headers):
        ""#line:1095:"""
        return OO0O0OO0000000O0O ._create_pax_generic_header (OOO000OOOO00OO0OO ,O0000OO00OOOO000O ,"utf8")#line:1096:return cls._create_pax_generic_header(pax_headers, XGLTYPE, "utf8")
    def _posix_split_name (O0OO00OO00000OO00 ,OOO000OOO00OO0OOO ):#line:1098:def _posix_split_name(self, name):
        ""#line:1101:"""
        OOOOO00OO0O00OO0O =OOO000OOO00OO0OOO [:OO0000O0OOOOO00O0 +1 ]#line:1102:prefix = name[:LENGTH_PREFIX + 1]
        while OOOOO00OO0O00OO0O and OOOOO00OO0O00OO0O [-1 ]!="/":#line:1103:while prefix and prefix[-1] != "/":
            OOOOO00OO0O00OO0O =OOOOO00OO0O00OO0O [:-1 ]#line:1104:prefix = prefix[:-1]
        OOO000OOO00OO0OOO =OOO000OOO00OO0OOO [len (OOOOO00OO0O00OO0O ):]#line:1106:name = name[len(prefix):]
        OOOOO00OO0O00OO0O =OOOOO00OO0O00OO0O [:-1 ]#line:1107:prefix = prefix[:-1]
        if not OOOOO00OO0O00OO0O or len (OOO000OOO00OO0OOO )>OOO0O00OO0OO0OO00 :#line:1109:if not prefix or len(name) > LENGTH_NAME:
            raise ValueError ("name is too long")#line:1110:raise ValueError("name is too long")
        return OOOOO00OO0O00OO0O ,OOO000OOO00OO0OOO #line:1111:return prefix, name
    @staticmethod #line:1113:@staticmethod
    def _create_header (O0OOOO00OO0O0OO00 ,OOOOO0O0000O0OO0O ,OO0OOO0O0OOO0OO0O ,OOO0000O0O00O0OO0 ):#line:1114:def _create_header(info, format, encoding, errors):
        ""#line:1117:"""
        OO0OOOO0O00000OO0 =[O000OO00O0OO00OOO (O0OOOO00OO0O0OO00 .get ("name",""),100 ,OO0OOO0O0OOO0OO0O ,OOO0000O0O00O0OO0 ),OO0000O0OO00O00O0 (O0OOOO00OO0O0OO00 .get ("mode",0 )&0o7777 ,8 ,OOOOO0O0000O0OO0O ),OO0000O0OO00O00O0 (O0OOOO00OO0O0OO00 .get ("uid",0 ),8 ,OOOOO0O0000O0OO0O ),OO0000O0OO00O00O0 (O0OOOO00OO0O0OO00 .get ("gid",0 ),8 ,OOOOO0O0000O0OO0O ),OO0000O0OO00O00O0 (O0OOOO00OO0O0OO00 .get ("size",0 ),12 ,OOOOO0O0000O0OO0O ),OO0000O0OO00O00O0 (O0OOOO00OO0O0OO00 .get ("mtime",0 ),12 ,OOOOO0O0000O0OO0O ),b"        ",O0OOOO00OO0O0OO00 .get ("type",OO000OOO0OOO0000O ),O000OO00O0OO00OOO (O0OOOO00OO0O0OO00 .get ("linkname",""),100 ,OO0OOO0O0OOO0OO0O ,OOO0000O0O00O0OO0 ),O0OOOO00OO0O0OO00 .get ("magic",O00000OO00OOO0OO0 ),O000OO00O0OO00OOO (O0OOOO00OO0O0OO00 .get ("uname",""),32 ,OO0OOO0O0OOO0OO0O ,OOO0000O0O00O0OO0 ),O000OO00O0OO00OOO (O0OOOO00OO0O0OO00 .get ("gname",""),32 ,OO0OOO0O0OOO0OO0O ,OOO0000O0O00O0OO0 ),OO0000O0OO00O00O0 (O0OOOO00OO0O0OO00 .get ("devmajor",0 ),8 ,OOOOO0O0000O0OO0O ),OO0000O0OO00O00O0 (O0OOOO00OO0O0OO00 .get ("devminor",0 ),8 ,OOOOO0O0000O0OO0O ),O000OO00O0OO00OOO (O0OOOO00OO0O0OO00 .get ("prefix",""),155 ,OO0OOO0O0OOO0OO0O ,OOO0000O0O00O0OO0 )]#line:1134:]
        O000O0OOO00O0O0O0 =struct .pack ("%ds"%OO0000O000OO0O0O0 ,b"".join (OO0OOOO0O00000OO0 ))#line:1136:buf = struct.pack("%ds" % BLOCKSIZE, b"".join(parts))
        OOOO0OO0O00O00O0O =OOO0O0O00OO0O0000 (O000O0OOO00O0O0O0 [-OO0000O000OO0O0O0 :])[0 ]#line:1137:chksum = calc_chksums(buf[-BLOCKSIZE:])[0]
        O000O0OOO00O0O0O0 =O000O0OOO00O0O0O0 [:-364 ]+("%06o\0"%OOOO0OO0O00O00O0O ).encode ("ascii")+O000O0OOO00O0O0O0 [-357 :]#line:1138:buf = buf[:-364] + ("%06o\0" % chksum).encode("ascii") + buf[-357:]
        return O000O0OOO00O0O0O0 #line:1139:return buf
    @staticmethod #line:1141:@staticmethod
    def _create_payload (O0000O00O000O00OO ):#line:1142:def _create_payload(payload):
        ""#line:1145:"""
        OO000OOOOO00O000O ,OOO000OO0000OO0OO =divmod (len (O0000O00O000O00OO ),OO0000O000OO0O0O0 )#line:1146:blocks, remainder = divmod(len(payload), BLOCKSIZE)
        if OOO000OO0000OO0OO >0 :#line:1147:if remainder > 0:
            O0000O00O000O00OO +=(OO0000O000OO0O0O0 -OOO000OO0000OO0OO )*OOO0OOO00OO0O00O0 #line:1148:payload += (BLOCKSIZE - remainder) * NUL
        return O0000O00O000O00OO #line:1149:return payload
    @classmethod #line:1151:@classmethod
    def _create_gnu_long_header (O00OOOOO0OOOOOOO0 ,OOOO00O00OOO00O0O ,O00O00OOOOO0OO00O ,OOO00OOO00O0O0000 ,O000OO00O00OOOOO0 ):#line:1152:def _create_gnu_long_header(cls, name, type, encoding, errors):
        ""#line:1155:"""
        OOOO00O00OOO00O0O =OOOO00O00OOO00O0O .encode (OOO00OOO00O0O0000 ,O000OO00O00OOOOO0 )+OOO0OOO00OO0O00O0 #line:1156:name = name.encode(encoding, errors) + NUL
        OO0O000OOOO0OO0O0 ={}#line:1158:info = {}
        OO0O000OOOO0OO0O0 ["name"]="././@LongLink"#line:1159:info["name"] = "././@LongLink"
        OO0O000OOOO0OO0O0 ["type"]=O00O00OOOOO0OO00O #line:1160:info["type"] = type
        OO0O000OOOO0OO0O0 ["size"]=len (OOOO00O00OOO00O0O )#line:1161:info["size"] = len(name)
        OO0O000OOOO0OO0O0 ["magic"]=OOO0O0OO0OOOOOOOO #line:1162:info["magic"] = GNU_MAGIC
        return O00OOOOO0OOOOOOO0 ._create_header (OO0O000OOOO0OO0O0 ,O00O0OOO000000O0O ,OOO00OOO00O0O0000 ,O000OO00O00OOOOO0 )+O00OOOOO0OOOOOOO0 ._create_payload (OOOO00O00OOO00O0O )#line:1166:cls._create_payload(name)
    @classmethod #line:1168:@classmethod
    def _create_pax_generic_header (OO0OOO000O00OOO0O ,O0000OO0O0OO00OOO ,O000OO0OOO0OO00OO ,OOOO00OOOO0OO0OOO ):#line:1169:def _create_pax_generic_header(cls, pax_headers, type, encoding):
        ""#line:1173:"""
        OOO00OOOO00OO0O0O =False #line:1176:binary = False
        for OOOOO0OO00000OOOO ,OO000OOO000O00OOO in O0000OO0O0OO00OOO .items ():#line:1177:for keyword, value in pax_headers.items():
            try :#line:1178:try:
                OO000OOO000O00OOO .encode ("utf8","strict")#line:1179:value.encode("utf8", "strict")
            except UnicodeEncodeError :#line:1180:except UnicodeEncodeError:
                OOO00OOOO00OO0O0O =True #line:1181:binary = True
                break #line:1182:break
        O0O000O00000O000O =b""#line:1184:records = b""
        if OOO00OOOO00OO0O0O :#line:1185:if binary:
            O0O000O00000O000O +=b"21 hdrcharset=BINARY\n"#line:1187:records += b"21 hdrcharset=BINARY\n"
        for OOOOO0OO00000OOOO ,OO000OOO000O00OOO in O0000OO0O0OO00OOO .items ():#line:1189:for keyword, value in pax_headers.items():
            OOOOO0OO00000OOOO =OOOOO0OO00000OOOO .encode ("utf8")#line:1190:keyword = keyword.encode("utf8")
            if OOO00OOOO00OO0O0O :#line:1191:if binary:
                OO000OOO000O00OOO =OO000OOO000O00OOO .encode (OOOO00OOOO0OO0OOO ,"surrogateescape")#line:1194:value = value.encode(encoding, "surrogateescape")
            else :#line:1195:else:
                OO000OOO000O00OOO =OO000OOO000O00OOO .encode ("utf8")#line:1196:value = value.encode("utf8")
            OO0O0OO0O0O0O0O0O =len (OOOOO0OO00000OOOO )+len (OO000OOO000O00OOO )+3 #line:1198:l = len(keyword) + len(value) + 3   # ' ' + '=' + '\n'
            O0O00O0O0OO0O0OOO =O0OOOOOO000O00OOO =0 #line:1199:n = p = 0
            while True :#line:1200:while True:
                O0O00O0O0OO0O0OOO =OO0O0OO0O0O0O0O0O +len (str (O0OOOOOO000O00OOO ))#line:1201:n = l + len(str(p))
                if O0O00O0O0OO0O0OOO ==O0OOOOOO000O00OOO :#line:1202:if n == p:
                    break #line:1203:break
                O0OOOOOO000O00OOO =O0O00O0O0OO0O0OOO #line:1204:p = n
            O0O000O00000O000O +=bytes (str (O0OOOOOO000O00OOO ),"ascii")+b" "+OOOOO0OO00000OOOO +b"="+OO000OOO000O00OOO +b"\n"#line:1205:records += bytes(str(p), "ascii") + b" " + keyword + b"=" + value + b"\n"
        OO0OO00O000O00OO0 ={}#line:1209:info = {}
        OO0OO00O000O00OO0 ["name"]="././@PaxHeader"#line:1210:info["name"] = "././@PaxHeader"
        OO0OO00O000O00OO0 ["type"]=O000OO0OOO0OO00OO #line:1211:info["type"] = type
        OO0OO00O000O00OO0 ["size"]=len (O0O000O00000O000O )#line:1212:info["size"] = len(records)
        OO0OO00O000O00OO0 ["magic"]=O00000OO00OOO0OO0 #line:1213:info["magic"] = POSIX_MAGIC
        return OO0OOO000O00OOO0O ._create_header (OO0OO00O000O00OO0 ,O00O0OOO000000O0O ,"ascii","replace")+OO0OOO000O00OOO0O ._create_payload (O0O000O00000O000O )#line:1217:cls._create_payload(records)
    @classmethod #line:1219:@classmethod
    def frombuf (O0O000O00O00O00O0 ,O00OOO0O0O0O00OO0 ,OO0OOOO0O00000000 ,OOOOOO0O000OOO000 ):#line:1220:def frombuf(cls, buf, encoding, errors):
        ""#line:1222:"""
        if len (O00OOO0O0O0O00OO0 )==0 :#line:1223:if len(buf) == 0:
            raise EmptyHeaderError ("empty header")#line:1224:raise EmptyHeaderError("empty header")
        if len (O00OOO0O0O0O00OO0 )!=OO0000O000OO0O0O0 :#line:1225:if len(buf) != BLOCKSIZE:
            raise TruncatedHeaderError ("truncated header")#line:1226:raise TruncatedHeaderError("truncated header")
        if O00OOO0O0O0O00OO0 .count (OOO0OOO00OO0O00O0 )==OO0000O000OO0O0O0 :#line:1227:if buf.count(NUL) == BLOCKSIZE:
            raise EOFHeaderError ("end of file header")#line:1228:raise EOFHeaderError("end of file header")
        O000O0OOO0O00OO0O =O000O0OO0OOOOOOOO (O00OOO0O0O0O00OO0 [148 :156 ])#line:1230:chksum = nti(buf[148:156])
        if O000O0OOO0O00OO0O not in OOO0O0O00OO0O0000 (O00OOO0O0O0O00OO0 ):#line:1231:if chksum not in calc_chksums(buf):
            raise InvalidHeaderError ("bad checksum")#line:1232:raise InvalidHeaderError("bad checksum")
        OO000O0OO00O0O00O =O0O000O00O00O00O0 ()#line:1234:obj = cls()
        OO000O0OO00O0O00O .name =OO0O00O000OO0000O (O00OOO0O0O0O00OO0 [0 :100 ],OO0OOOO0O00000000 ,OOOOOO0O000OOO000 )#line:1235:obj.name = nts(buf[0:100], encoding, errors)
        OO000O0OO00O0O00O .mode =O000O0OO0OOOOOOOO (O00OOO0O0O0O00OO0 [100 :108 ])#line:1236:obj.mode = nti(buf[100:108])
        OO000O0OO00O0O00O .uid =O000O0OO0OOOOOOOO (O00OOO0O0O0O00OO0 [108 :116 ])#line:1237:obj.uid = nti(buf[108:116])
        OO000O0OO00O0O00O .gid =O000O0OO0OOOOOOOO (O00OOO0O0O0O00OO0 [116 :124 ])#line:1238:obj.gid = nti(buf[116:124])
        OO000O0OO00O0O00O .size =O000O0OO0OOOOOOOO (O00OOO0O0O0O00OO0 [124 :136 ])#line:1239:obj.size = nti(buf[124:136])
        OO000O0OO00O0O00O .mtime =O000O0OO0OOOOOOOO (O00OOO0O0O0O00OO0 [136 :148 ])#line:1240:obj.mtime = nti(buf[136:148])
        OO000O0OO00O0O00O .chksum =O000O0OOO0O00OO0O #line:1241:obj.chksum = chksum
        OO000O0OO00O0O00O .type =O00OOO0O0O0O00OO0 [156 :157 ]#line:1242:obj.type = buf[156:157]
        OO000O0OO00O0O00O .linkname =OO0O00O000OO0000O (O00OOO0O0O0O00OO0 [157 :257 ],OO0OOOO0O00000000 ,OOOOOO0O000OOO000 )#line:1243:obj.linkname = nts(buf[157:257], encoding, errors)
        OO000O0OO00O0O00O .uname =OO0O00O000OO0000O (O00OOO0O0O0O00OO0 [265 :297 ],OO0OOOO0O00000000 ,OOOOOO0O000OOO000 )#line:1244:obj.uname = nts(buf[265:297], encoding, errors)
        OO000O0OO00O0O00O .gname =OO0O00O000OO0000O (O00OOO0O0O0O00OO0 [297 :329 ],OO0OOOO0O00000000 ,OOOOOO0O000OOO000 )#line:1245:obj.gname = nts(buf[297:329], encoding, errors)
        OO000O0OO00O0O00O .devmajor =O000O0OO0OOOOOOOO (O00OOO0O0O0O00OO0 [329 :337 ])#line:1246:obj.devmajor = nti(buf[329:337])
        OO000O0OO00O0O00O .devminor =O000O0OO0OOOOOOOO (O00OOO0O0O0O00OO0 [337 :345 ])#line:1247:obj.devminor = nti(buf[337:345])
        O0O00O0OO0OO0OOOO =OO0O00O000OO0000O (O00OOO0O0O0O00OO0 [345 :500 ],OO0OOOO0O00000000 ,OOOOOO0O000OOO000 )#line:1248:prefix = nts(buf[345:500], encoding, errors)
        if OO000O0OO00O0O00O .type ==O0OO00O0O0O0O000O and OO000O0OO00O0O00O .name .endswith ("/"):#line:1252:if obj.type == AREGTYPE and obj.name.endswith("/"):
            OO000O0OO00O0O00O .type =OOOO0O00000O00O00 #line:1253:obj.type = DIRTYPE
        if OO000O0OO00O0O00O .type ==OO0000O00OOO0O000 :#line:1258:if obj.type == GNUTYPE_SPARSE:
            O00O0O0OO0O0OOOOO =386 #line:1259:pos = 386
            O0O0OOO0000OO0000 =[]#line:1260:structs = []
            for OO000000OO00000O0 in range (4 ):#line:1261:for i in range(4):
                try :#line:1262:try:
                    O0O0O0OOOO00O000O =O000O0OO0OOOOOOOO (O00OOO0O0O0O00OO0 [O00O0O0OO0O0OOOOO :O00O0O0OO0O0OOOOO +12 ])#line:1263:offset = nti(buf[pos:pos + 12])
                    O00O0OOO000000O00 =O000O0OO0OOOOOOOO (O00OOO0O0O0O00OO0 [O00O0O0OO0O0OOOOO +12 :O00O0O0OO0O0OOOOO +24 ])#line:1264:numbytes = nti(buf[pos + 12:pos + 24])
                except ValueError :#line:1265:except ValueError:
                    break #line:1266:break
                O0O0OOO0000OO0000 .append ((O0O0O0OOOO00O000O ,O00O0OOO000000O00 ))#line:1267:structs.append((offset, numbytes))
                O00O0O0OO0O0OOOOO +=24 #line:1268:pos += 24
            OO000O00000O0OO0O =bool (O00OOO0O0O0O00OO0 [482 ])#line:1269:isextended = bool(buf[482])
            O0OO000OO000O0O0O =O000O0OO0OOOOOOOO (O00OOO0O0O0O00OO0 [483 :495 ])#line:1270:origsize = nti(buf[483:495])
            OO000O0OO00O0O00O ._sparse_structs =(O0O0OOO0000OO0000 ,OO000O00000O0OO0O ,O0OO000OO000O0O0O )#line:1271:obj._sparse_structs = (structs, isextended, origsize)
        if OO000O0OO00O0O00O .isdir ():#line:1274:if obj.isdir():
            OO000O0OO00O0O00O .name =OO000O0OO00O0O00O .name .rstrip ("/")#line:1275:obj.name = obj.name.rstrip("/")
        if O0O00O0OO0OO0OOOO and OO000O0OO00O0O00O .type not in O00O0OOOOOOO00OOO :#line:1278:if prefix and obj.type not in GNU_TYPES:
            OO000O0OO00O0O00O .name =O0O00O0OO0OO0OOOO +"/"+OO000O0OO00O0O00O .name #line:1279:obj.name = prefix + "/" + obj.name
        return OO000O0OO00O0O00O #line:1280:return obj
    @classmethod #line:1282:@classmethod
    def fromtarfile (O0O0O0O000O00OO0O ,O0O0OOO0O000O0OOO ):#line:1283:def fromtarfile(cls, tarfile):
        ""#line:1286:"""
        O0OOO0OO0000OO000 =O0O0OOO0O000O0OOO .fileobj .read (OO0000O000OO0O0O0 )#line:1287:buf = tarfile.fileobj.read(BLOCKSIZE)
        O000O0OOOO0O00OO0 =O0O0O0O000O00OO0O .frombuf (O0OOO0OO0000OO000 ,O0O0OOO0O000O0OOO .encoding ,O0O0OOO0O000O0OOO .errors )#line:1288:obj = cls.frombuf(buf, tarfile.encoding, tarfile.errors)
        O000O0OOOO0O00OO0 .offset =O0O0OOO0O000O0OOO .fileobj .tell ()-OO0000O000OO0O0O0 #line:1289:obj.offset = tarfile.fileobj.tell() - BLOCKSIZE
        return O000O0OOOO0O00OO0 ._proc_member (O0O0OOO0O000O0OOO )#line:1290:return obj._proc_member(tarfile)
    def _proc_member (O0000OOOOO000OO00 ,O00O00OOOO0OOO0OO ):#line:1303:def _proc_member(self, tarfile):
        ""#line:1306:"""
        if O0000OOOOO000OO00 .type in (OOOO00O0OO00O0O00 ,OOOOO00O0000000O0 ):#line:1307:if self.type in (GNUTYPE_LONGNAME, GNUTYPE_LONGLINK):
            return O0000OOOOO000OO00 ._proc_gnulong (O00O00OOOO0OOO0OO )#line:1308:return self._proc_gnulong(tarfile)
        elif O0000OOOOO000OO00 .type ==OO0000O00OOO0O000 :#line:1309:elif self.type == GNUTYPE_SPARSE:
            return O0000OOOOO000OO00 ._proc_sparse (O00O00OOOO0OOO0OO )#line:1310:return self._proc_sparse(tarfile)
        elif O0000OOOOO000OO00 .type in (O0O0OO00OOO0OOO0O ,O0000OO00OOOO000O ,OOO0OO0OOOOO00O0O ):#line:1311:elif self.type in (XHDTYPE, XGLTYPE, SOLARIS_XHDTYPE):
            return O0000OOOOO000OO00 ._proc_pax (O00O00OOOO0OOO0OO )#line:1312:return self._proc_pax(tarfile)
        else :#line:1313:else:
            return O0000OOOOO000OO00 ._proc_builtin (O00O00OOOO0OOO0OO )#line:1314:return self._proc_builtin(tarfile)
    def _proc_builtin (O00000O00OO00O0O0 ,O00OO0OO0OO00O0O0 ):#line:1316:def _proc_builtin(self, tarfile):
        ""#line:1319:"""
        O00000O00OO00O0O0 .offset_data =O00OO0OO0OO00O0O0 .fileobj .tell ()#line:1320:self.offset_data = tarfile.fileobj.tell()
        O0O0O0O0OOOO00O0O =O00000O00OO00O0O0 .offset_data #line:1321:offset = self.offset_data
        if O00000O00OO00O0O0 .isreg ()or O00000O00OO00O0O0 .type not in O0OOOO0OO0OOO0OO0 :#line:1322:if self.isreg() or self.type not in SUPPORTED_TYPES:
            O0O0O0O0OOOO00O0O +=O00000O00OO00O0O0 ._block (O00000O00OO00O0O0 .size )#line:1324:offset += self._block(self.size)
        O00OO0OO0OO00O0O0 .offset =O0O0O0O0OOOO00O0O #line:1325:tarfile.offset = offset
        O00000O00OO00O0O0 ._apply_pax_info (O00OO0OO0OO00O0O0 .pax_headers ,O00OO0OO0OO00O0O0 .encoding ,O00OO0OO0OO00O0O0 .errors )#line:1329:self._apply_pax_info(tarfile.pax_headers, tarfile.encoding, tarfile.errors)
        return O00000O00OO00O0O0 #line:1331:return self
    def _proc_gnulong (O0OO00OOO00O00O00 ,O0O0OOO0O0OO0000O ):#line:1333:def _proc_gnulong(self, tarfile):
        ""#line:1336:"""
        OO00000OOO0OOOOO0 =O0O0OOO0O0OO0000O .fileobj .read (O0OO00OOO00O00O00 ._block (O0OO00OOO00O00O00 .size ))#line:1337:buf = tarfile.fileobj.read(self._block(self.size))
        try :#line:1340:try:
            O0OO00000OOO00O0O =O0OO00OOO00O00O00 .fromtarfile (O0O0OOO0O0OO0000O )#line:1341:next = self.fromtarfile(tarfile)
        except HeaderError :#line:1342:except HeaderError:
            raise SubsequentHeaderError ("missing or bad subsequent header")#line:1343:raise SubsequentHeaderError("missing or bad subsequent header")
        O0OO00000OOO00O0O .offset =O0OO00OOO00O00O00 .offset #line:1347:next.offset = self.offset
        if O0OO00OOO00O00O00 .type ==OOOO00O0OO00O0O00 :#line:1348:if self.type == GNUTYPE_LONGNAME:
            O0OO00000OOO00O0O .name =OO0O00O000OO0000O (OO00000OOO0OOOOO0 ,O0O0OOO0O0OO0000O .encoding ,O0O0OOO0O0OO0000O .errors )#line:1349:next.name = nts(buf, tarfile.encoding, tarfile.errors)
        elif O0OO00OOO00O00O00 .type ==OOOOO00O0000000O0 :#line:1350:elif self.type == GNUTYPE_LONGLINK:
            O0OO00000OOO00O0O .linkname =OO0O00O000OO0000O (OO00000OOO0OOOOO0 ,O0O0OOO0O0OO0000O .encoding ,O0O0OOO0O0OO0000O .errors )#line:1351:next.linkname = nts(buf, tarfile.encoding, tarfile.errors)
        return O0OO00000OOO00O0O #line:1353:return next
    def _proc_sparse (OOO0OO0O0O0O00OOO ,OOO000OO0OOO00O0O ):#line:1355:def _proc_sparse(self, tarfile):
        ""#line:1357:"""
        O0OOO0O000OOOO000 ,OOOOOO00OO0OO0O00 ,O0O00O000O00OO00O =OOO0OO0O0O0O00OOO ._sparse_structs #line:1359:structs, isextended, origsize = self._sparse_structs
        del OOO0OO0O0O0O00OOO ._sparse_structs #line:1360:del self._sparse_structs
        while OOOOOO00OO0OO0O00 :#line:1363:while isextended:
            O0O0O00O00O0O0OO0 =OOO000OO0OOO00O0O .fileobj .read (OO0000O000OO0O0O0 )#line:1364:buf = tarfile.fileobj.read(BLOCKSIZE)
            OO00O0O00OO0OOOO0 =0 #line:1365:pos = 0
            for OO00O0O0O0OO00O0O in range (21 ):#line:1366:for i in range(21):
                try :#line:1367:try:
                    O0O000O0OOO000000 =O000O0OO0OOOOOOOO (O0O0O00O00O0O0OO0 [OO00O0O00OO0OOOO0 :OO00O0O00OO0OOOO0 +12 ])#line:1368:offset = nti(buf[pos:pos + 12])
                    O0OOO0O00O0O0OO00 =O000O0OO0OOOOOOOO (O0O0O00O00O0O0OO0 [OO00O0O00OO0OOOO0 +12 :OO00O0O00OO0OOOO0 +24 ])#line:1369:numbytes = nti(buf[pos + 12:pos + 24])
                except ValueError :#line:1370:except ValueError:
                    break #line:1371:break
                if O0O000O0OOO000000 and O0OOO0O00O0O0OO00 :#line:1372:if offset and numbytes:
                    O0OOO0O000OOOO000 .append ((O0O000O0OOO000000 ,O0OOO0O00O0O0OO00 ))#line:1373:structs.append((offset, numbytes))
                OO00O0O00OO0OOOO0 +=24 #line:1374:pos += 24
            OOOOOO00OO0OO0O00 =bool (O0O0O00O00O0O0OO0 [504 ])#line:1375:isextended = bool(buf[504])
        OOO0OO0O0O0O00OOO .sparse =O0OOO0O000OOOO000 #line:1376:self.sparse = structs
        OOO0OO0O0O0O00OOO .offset_data =OOO000OO0OOO00O0O .fileobj .tell ()#line:1378:self.offset_data = tarfile.fileobj.tell()
        OOO000OO0OOO00O0O .offset =OOO0OO0O0O0O00OOO .offset_data +OOO0OO0O0O0O00OOO ._block (OOO0OO0O0O0O00OOO .size )#line:1379:tarfile.offset = self.offset_data + self._block(self.size)
        OOO0OO0O0O0O00OOO .size =O0O00O000O00OO00O #line:1380:self.size = origsize
        return OOO0OO0O0O0O00OOO #line:1381:return self
    def _proc_pax (OOOO0O0OO0O0O0O0O ,OOO000O00O0O0O000 ):#line:1383:def _proc_pax(self, tarfile):
        ""#line:1386:"""
        OOOO0OOO00OO00OO0 =OOO000O00O0O0O000 .fileobj .read (OOOO0O0OO0O0O0O0O ._block (OOOO0O0OO0O0O0O0O .size ))#line:1388:buf = tarfile.fileobj.read(self._block(self.size))
        if OOOO0O0OO0O0O0O0O .type ==O0000OO00OOOO000O :#line:1393:if self.type == XGLTYPE:
            OOOOO0OOOOO0O0OO0 =OOO000O00O0O0O000 .pax_headers #line:1394:pax_headers = tarfile.pax_headers
        else :#line:1395:else:
            OOOOO0OOOOO0O0OO0 =OOO000O00O0O0O000 .pax_headers .copy ()#line:1396:pax_headers = tarfile.pax_headers.copy()
        OO00O000O000O000O =re .search (br"\d+ hdrcharset=([^\n]+)\n",OOOO0OOO00OO00OO0 )#line:1403:match = re.search(br"\d+ hdrcharset=([^\n]+)\n", buf)
        if OO00O000O000O000O is not None :#line:1404:if match is not None:
            OOOOO0OOOOO0O0OO0 ["hdrcharset"]=OO00O000O000O000O .group (1 ).decode ("utf8")#line:1405:pax_headers["hdrcharset"] = match.group(1).decode("utf8")
        OOOOO0OOO00OO00O0 =OOOOO0OOOOO0O0OO0 .get ("hdrcharset")#line:1410:hdrcharset = pax_headers.get("hdrcharset")
        if OOOOO0OOO00OO00O0 =="BINARY":#line:1411:if hdrcharset == "BINARY":
            OOO000OOOOO000O00 =OOO000O00O0O0O000 .encoding #line:1412:encoding = tarfile.encoding
        else :#line:1413:else:
            OOO000OOOOO000O00 ="utf8"#line:1414:encoding = "utf8"
        OOO0000O00O0O0000 =re .compile (br"(\d+) ([^=]+)=")#line:1420:regex = re.compile(br"(\d+) ([^=]+)=")
        O00OOOO00O0OO00OO =0 #line:1421:pos = 0
        while True :#line:1422:while True:
            OO00O000O000O000O =OOO0000O00O0O0000 .match (OOOO0OOO00OO00OO0 ,O00OOOO00O0OO00OO )#line:1423:match = regex.match(buf, pos)
            if not OO00O000O000O000O :#line:1424:if not match:
                break #line:1425:break
            O0O0OO00O000O0OO0 ,OOO00000O0OO0OOO0 =OO00O000O000O000O .groups ()#line:1427:length, keyword = match.groups()
            O0O0OO00O000O0OO0 =int (O0O0OO00O000O0OO0 )#line:1428:length = int(length)
            O0OOO00O0OOOO0O0O =OOOO0OOO00OO00OO0 [OO00O000O000O000O .end (2 )+1 :OO00O000O000O000O .start (1 )+O0O0OO00O000O0OO0 -1 ]#line:1429:value = buf[match.end(2) + 1:match.start(1) + length - 1]
            OOO00000O0OO0OOO0 =OOOO0O0OO0O0O0O0O ._decode_pax_field (OOO00000O0OO0OOO0 ,"utf8","utf8",OOO000O00O0O0O000 .errors )#line:1439:tarfile.errors)
            if OOO00000O0OO0OOO0 in O0OOOOOO000OOOOO0 :#line:1440:if keyword in PAX_NAME_FIELDS:
                O0OOO00O0OOOO0O0O =OOOO0O0OO0O0O0O0O ._decode_pax_field (O0OOO00O0OOOO0O0O ,OOO000OOOOO000O00 ,OOO000O00O0O0O000 .encoding ,OOO000O00O0O0O000 .errors )#line:1442:tarfile.errors)
            else :#line:1443:else:
                O0OOO00O0OOOO0O0O =OOOO0O0OO0O0O0O0O ._decode_pax_field (O0OOO00O0OOOO0O0O ,"utf8","utf8",OOO000O00O0O0O000 .errors )#line:1445:tarfile.errors)
            OOOOO0OOOOO0O0OO0 [OOO00000O0OO0OOO0 ]=O0OOO00O0OOOO0O0O #line:1447:pax_headers[keyword] = value
            O00OOOO00O0OO00OO +=O0O0OO00O000O0OO0 #line:1448:pos += length
        try :#line:1451:try:
            O00O0000O0OOOO0O0 =OOOO0O0OO0O0O0O0O .fromtarfile (OOO000O00O0O0O000 )#line:1452:next = self.fromtarfile(tarfile)
        except HeaderError :#line:1453:except HeaderError:
            raise SubsequentHeaderError ("missing or bad subsequent header")#line:1454:raise SubsequentHeaderError("missing or bad subsequent header")
        if "GNU.sparse.map"in OOOOO0OOOOO0O0OO0 :#line:1457:if "GNU.sparse.map" in pax_headers:
            OOOO0O0OO0O0O0O0O ._proc_gnusparse_01 (O00O0000O0OOOO0O0 ,OOOOO0OOOOO0O0OO0 )#line:1459:self._proc_gnusparse_01(next, pax_headers)
        elif "GNU.sparse.size"in OOOOO0OOOOO0O0OO0 :#line:1461:elif "GNU.sparse.size" in pax_headers:
            OOOO0O0OO0O0O0O0O ._proc_gnusparse_00 (O00O0000O0OOOO0O0 ,OOOOO0OOOOO0O0OO0 ,OOOO0OOO00OO00OO0 )#line:1463:self._proc_gnusparse_00(next, pax_headers, buf)
        elif OOOOO0OOOOO0O0OO0 .get ("GNU.sparse.major")=="1"and OOOOO0OOOOO0O0OO0 .get ("GNU.sparse.minor")=="0":#line:1465:elif pax_headers.get("GNU.sparse.major") == "1" and pax_headers.get("GNU.sparse.minor") == "0":
            OOOO0O0OO0O0O0O0O ._proc_gnusparse_10 (O00O0000O0OOOO0O0 ,OOOOO0OOOOO0O0OO0 ,OOO000O00O0O0O000 )#line:1467:self._proc_gnusparse_10(next, pax_headers, tarfile)
        if OOOO0O0OO0O0O0O0O .type in (O0O0OO00OOO0OOO0O ,OOO0OO0OOOOO00O0O ):#line:1469:if self.type in (XHDTYPE, SOLARIS_XHDTYPE):
            O00O0000O0OOOO0O0 ._apply_pax_info (OOOOO0OOOOO0O0OO0 ,OOO000O00O0O0O000 .encoding ,OOO000O00O0O0O000 .errors )#line:1471:next._apply_pax_info(pax_headers, tarfile.encoding, tarfile.errors)
            O00O0000O0OOOO0O0 .offset =OOOO0O0OO0O0O0O0O .offset #line:1472:next.offset = self.offset
            if "size"in OOOOO0OOOOO0O0OO0 :#line:1474:if "size" in pax_headers:
                OO0000000OOOO00OO =O00O0000O0OOOO0O0 .offset_data #line:1478:offset = next.offset_data
                if O00O0000O0OOOO0O0 .isreg ()or O00O0000O0OOOO0O0 .type not in O0OOOO0OO0OOO0OO0 :#line:1479:if next.isreg() or next.type not in SUPPORTED_TYPES:
                    OO0000000OOOO00OO +=O00O0000O0OOOO0O0 ._block (O00O0000O0OOOO0O0 .size )#line:1480:offset += next._block(next.size)
                OOO000O00O0O0O000 .offset =OO0000000OOOO00OO #line:1481:tarfile.offset = offset
        return O00O0000O0OOOO0O0 #line:1483:return next
    def _proc_gnusparse_00 (O00O00O0OO0OO0OOO ,OOO0OO0000000O0OO ,O0O00OO0OOO0OO0OO ,OOO0O0OO00O0OOOOO ):#line:1485:def _proc_gnusparse_00(self, next, pax_headers, buf):
        ""#line:1487:"""
        O0O0O000O0OO0000O =[]#line:1488:offsets = []
        for OO0OO00000OO0OO0O in re .finditer (br"\d+ GNU.sparse.offset=(\d+)\n",OOO0O0OO00O0OOOOO ):#line:1489:for match in re.finditer(br"\d+ GNU.sparse.offset=(\d+)\n", buf):
            O0O0O000O0OO0000O .append (int (OO0OO00000OO0OO0O .group (1 )))#line:1490:offsets.append(int(match.group(1)))
        OO00000OOOO0O0OOO =[]#line:1491:numbytes = []
        for OO0OO00000OO0OO0O in re .finditer (br"\d+ GNU.sparse.numbytes=(\d+)\n",OOO0O0OO00O0OOOOO ):#line:1492:for match in re.finditer(br"\d+ GNU.sparse.numbytes=(\d+)\n", buf):
            OO00000OOOO0O0OOO .append (int (OO0OO00000OO0OO0O .group (1 )))#line:1493:numbytes.append(int(match.group(1)))
        OOO0OO0000000O0OO .sparse =list (zip (O0O0O000O0OO0000O ,OO00000OOOO0O0OOO ))#line:1494:next.sparse = list(zip(offsets, numbytes))
    def _proc_gnusparse_01 (OO0O000OO00OO0OOO ,OO000O0OOOO0OO0O0 ,OO0O0OO00O0OOOOO0 ):#line:1496:def _proc_gnusparse_01(self, next, pax_headers):
        ""#line:1498:"""
        OOOO00O0000000OO0 =[int (O0O00O0000OO00O0O )for O0O00O0000OO00O0O in OO0O0OO00O0OOOOO0 ["GNU.sparse.map"].split (",")]#line:1499:sparse = [int(x) for x in pax_headers["GNU.sparse.map"].split(",")]
        OO000O0OOOO0OO0O0 .sparse =list (zip (OOOO00O0000000OO0 [::2 ],OOOO00O0000000OO0 [1 ::2 ]))#line:1500:next.sparse = list(zip(sparse[::2], sparse[1::2]))
    def _proc_gnusparse_10 (O0OO0OOO0OOOO00O0 ,OOO00OOO0O0O000O0 ,O00OO00O0OOO00OOO ,O0000O0O0000O00OO ):#line:1502:def _proc_gnusparse_10(self, next, pax_headers, tarfile):
        ""#line:1504:"""
        O00O0O0O00OO0O0O0 =None #line:1505:fields = None
        OO00O0000OOOO00OO =[]#line:1506:sparse = []
        O00OOOOOOOOO0O00O =O0000O0O0000O00OO .fileobj .read (OO0000O000OO0O0O0 )#line:1507:buf = tarfile.fileobj.read(BLOCKSIZE)
        O00O0O0O00OO0O0O0 ,O00OOOOOOOOO0O00O =O00OOOOOOOOO0O00O .split (b"\n",1 )#line:1508:fields, buf = buf.split(b"\n", 1)
        O00O0O0O00OO0O0O0 =int (O00O0O0O00OO0O0O0 )#line:1509:fields = int(fields)
        while len (OO00O0000OOOO00OO )<O00O0O0O00OO0O0O0 *2 :#line:1510:while len(sparse) < fields * 2:
            if b"\n"not in O00OOOOOOOOO0O00O :#line:1511:if b"\n" not in buf:
                O00OOOOOOOOO0O00O +=O0000O0O0000O00OO .fileobj .read (OO0000O000OO0O0O0 )#line:1512:buf += tarfile.fileobj.read(BLOCKSIZE)
            OO0O0000OO0O00000 ,O00OOOOOOOOO0O00O =O00OOOOOOOOO0O00O .split (b"\n",1 )#line:1513:number, buf = buf.split(b"\n", 1)
            OO00O0000OOOO00OO .append (int (OO0O0000OO0O00000 ))#line:1514:sparse.append(int(number))
        OOO00OOO0O0O000O0 .offset_data =O0000O0O0000O00OO .fileobj .tell ()#line:1515:next.offset_data = tarfile.fileobj.tell()
        OOO00OOO0O0O000O0 .sparse =list (zip (OO00O0000OOOO00OO [::2 ],OO00O0000OOOO00OO [1 ::2 ]))#line:1516:next.sparse = list(zip(sparse[::2], sparse[1::2]))
    def _apply_pax_info (OO0OOOO0OOO00O0OO ,O000O0O00O0OO00O0 ,O00OOO00OOO0O000O ,O00000O0OOOO00O0O ):#line:1518:def _apply_pax_info(self, pax_headers, encoding, errors):
        ""#line:1521:"""
        for OO00OOOO00OOOOO00 ,O0OO0000000OOO000 in O000O0O00O0OO00O0 .items ():#line:1522:for keyword, value in pax_headers.items():
            if OO00OOOO00OOOOO00 =="GNU.sparse.name":#line:1523:if keyword == "GNU.sparse.name":
                setattr (OO0OOOO0OOO00O0OO ,"path",O0OO0000000OOO000 )#line:1524:setattr(self, "path", value)
            elif OO00OOOO00OOOOO00 =="GNU.sparse.size":#line:1525:elif keyword == "GNU.sparse.size":
                setattr (OO0OOOO0OOO00O0OO ,"size",int (O0OO0000000OOO000 ))#line:1526:setattr(self, "size", int(value))
            elif OO00OOOO00OOOOO00 =="GNU.sparse.realsize":#line:1527:elif keyword == "GNU.sparse.realsize":
                setattr (OO0OOOO0OOO00O0OO ,"size",int (O0OO0000000OOO000 ))#line:1528:setattr(self, "size", int(value))
            elif OO00OOOO00OOOOO00 in OO0O00000OO000OO0 :#line:1529:elif keyword in PAX_FIELDS:
                if OO00OOOO00OOOOO00 in OO0O0OOO00O00OOO0 :#line:1530:if keyword in PAX_NUMBER_FIELDS:
                    try :#line:1531:try:
                        O0OO0000000OOO000 =OO0O0OOO00O00OOO0 [OO00OOOO00OOOOO00 ](O0OO0000000OOO000 )#line:1532:value = PAX_NUMBER_FIELDS[keyword](value)
                    except ValueError :#line:1533:except ValueError:
                        O0OO0000000OOO000 =0 #line:1534:value = 0
                if OO00OOOO00OOOOO00 =="path":#line:1535:if keyword == "path":
                    O0OO0000000OOO000 =O0OO0000000OOO000 .rstrip ("/")#line:1536:value = value.rstrip("/")
                setattr (OO0OOOO0OOO00O0OO ,OO00OOOO00OOOOO00 ,O0OO0000000OOO000 )#line:1537:setattr(self, keyword, value)
        OO0OOOO0OOO00O0OO .pax_headers =O000O0O00O0OO00O0 .copy ()#line:1539:self.pax_headers = pax_headers.copy()
    def _decode_pax_field (O0O00OOO00000O000 ,O0OO00O0OOO00OO00 ,OO0OO0OO00O0O0O0O ,O0O0OO0O0OO0O0OOO ,OO0OOOOOOO00OO0O0 ):#line:1541:def _decode_pax_field(self, value, encoding, fallback_encoding, fallback_errors):
        ""#line:1543:"""
        try :#line:1544:try:
            return O0OO00O0OOO00OO00 .decode (OO0OO0OO00O0O0O0O ,"strict")#line:1545:return value.decode(encoding, "strict")
        except UnicodeDecodeError :#line:1546:except UnicodeDecodeError:
            return O0OO00O0OOO00OO00 .decode (O0O0OO0O0OO0O0OOO ,OO0OOOOOOO00OO0O0 )#line:1547:return value.decode(fallback_encoding, fallback_errors)
    def _block (O00O000O0OO0O00O0 ,O00O0O0000O00OOOO ):#line:1549:def _block(self, count):
        ""#line:1552:"""
        O00OO000O0O0O0O00 ,OOOOO0O0OOO0O0000 =divmod (O00O0O0000O00OOOO ,OO0000O000OO0O0O0 )#line:1553:blocks, remainder = divmod(count, BLOCKSIZE)
        if OOOOO0O0OOO0O0000 :#line:1554:if remainder:
            O00OO000O0O0O0O00 +=1 #line:1555:blocks += 1
        return O00OO000O0O0O0O00 *OO0000O000OO0O0O0 #line:1556:return blocks * BLOCKSIZE
    def isreg (OOOO0OOO000OOOOOO ):#line:1558:def isreg(self):
        return OOOO0OOO000OOOOOO .type in O00OOOO00OOO0OOO0 #line:1559:return self.type in REGULAR_TYPES
    def isfile (O00O0OOOO0O0OO00O ):#line:1560:def isfile(self):
        return O00O0OOOO0O0OO00O .isreg ()#line:1561:return self.isreg()
    def isdir (OO000000O0O000O0O ):#line:1562:def isdir(self):
        return OO000000O0O000O0O .type ==OOOO0O00000O00O00 #line:1563:return self.type == DIRTYPE
    def issym (OOOOO00000OOO0O0O ):#line:1564:def issym(self):
        return OOOOO00000OOO0O0O .type ==O000O0OOOO0O00OOO #line:1565:return self.type == SYMTYPE
    def islnk (OOO0OO0OO00O0OOOO ):#line:1566:def islnk(self):
        return OOO0OO0OO00O0OOOO .type ==OO0OO0O0OO0OO0O0O #line:1567:return self.type == LNKTYPE
    def ischr (OOO00O0O000O0000O ):#line:1568:def ischr(self):
        return OOO00O0O000O0000O .type ==O0OO00OOOO000O0OO #line:1569:return self.type == CHRTYPE
    def isblk (OOOOOO00OO000O0O0 ):#line:1570:def isblk(self):
        return OOOOOO00OO000O0O0 .type ==O000000O0OO0OO0O0 #line:1571:return self.type == BLKTYPE
    def isfifo (OOOOOOOOO0O0O00OO ):#line:1572:def isfifo(self):
        return OOOOOOOOO0O0O00OO .type ==OOO000000O0OOOO00 #line:1573:return self.type == FIFOTYPE
    def issparse (OO00000O0OO00O00O ):#line:1574:def issparse(self):
        return OO00000O0OO00O00O .sparse is not None #line:1575:return self.sparse is not None
    def isdev (OO00O00O000000OO0 ):#line:1576:def isdev(self):
        return OO00O00O000000OO0 .type in (O0OO00OOOO000O0OO ,O000000O0OO0OO0O0 ,OOO000000O0OOOO00 )#line:1577:return self.type in (CHRTYPE, BLKTYPE, FIFOTYPE)
class TarFile (object ):#line:1580:class TarFile(object):
    ""#line:1582:"""
    debug =0 #line:1584:debug = 0                   # May be set from 0 (no msgs) to 3 (all msgs)
    dereference =False #line:1586:dereference = False         # If true, add content of linked file to the
    ignore_zeros =False #line:1589:ignore_zeros = False        # If true, skips empty or invalid blocks and
    errorlevel =1 #line:1592:errorlevel = 1              # If 0, fatal errors only appear in debug
    format =OOOOOOO00O00OO000 #line:1596:format = DEFAULT_FORMAT     # The format to use when creating an archive.
    encoding =OO00OOO000OOOOO0O #line:1598:encoding = ENCODING         # Encoding for 8-bit character strings.
    errors =None #line:1600:errors = None               # Error handler for unicode conversion.
    tarinfo =TarInfo #line:1602:tarinfo = TarInfo           # The default TarInfo class to use.
    fileobject =O0OO0O00OO00OOO00 #line:1604:fileobject = ExFileObject   # The default ExFileObject class to use.
    def __init__ (OOOO00OOO0000OO00 ,name =None ,mode ="r",fileobj =None ,format =None ,tarinfo =None ,dereference =None ,ignore_zeros =None ,encoding =None ,errors ="surrogateescape",pax_headers =None ,debug =None ,errorlevel =None ):#line:1608:errors="surrogateescape", pax_headers=None, debug=None, errorlevel=None):
        ""#line:1616:"""
        if len (mode )>1 or mode not in "raw":#line:1617:if len(mode) > 1 or mode not in "raw":
            raise ValueError ("mode must be 'r', 'a' or 'w'")#line:1618:raise ValueError("mode must be 'r', 'a' or 'w'")
        OOOO00OOO0000OO00 .mode =mode #line:1619:self.mode = mode
        OOOO00OOO0000OO00 ._mode ={"r":"rb","a":"r+b","w":"wb"}[mode ]#line:1620:self._mode = {"r": "rb", "a": "r+b", "w": "wb"}[mode]
        if not fileobj :#line:1622:if not fileobj:
            if OOOO00OOO0000OO00 .mode =="a"and not os .path .exists (name ):#line:1623:if self.mode == "a" and not os.path.exists(name):
                OOOO00OOO0000OO00 .mode ="w"#line:1625:self.mode = "w"
                OOOO00OOO0000OO00 ._mode ="wb"#line:1626:self._mode = "wb"
            fileobj =O0OOOO0OOO00OOO00 (name ,OOOO00OOO0000OO00 ._mode )#line:1627:fileobj = bltn_open(name, self._mode)
            OOOO00OOO0000OO00 ._extfileobj =False #line:1628:self._extfileobj = False
        else :#line:1629:else:
            if name is None and hasattr (fileobj ,"name"):#line:1630:if name is None and hasattr(fileobj, "name"):
                name =fileobj .name #line:1631:name = fileobj.name
            if hasattr (fileobj ,"mode"):#line:1632:if hasattr(fileobj, "mode"):
                OOOO00OOO0000OO00 ._mode =fileobj .mode #line:1633:self._mode = fileobj.mode
            OOOO00OOO0000OO00 ._extfileobj =True #line:1634:self._extfileobj = True
        OOOO00OOO0000OO00 .name =os .path .abspath (name )if name else None #line:1635:self.name = os.path.abspath(name) if name else None
        OOOO00OOO0000OO00 .fileobj =fileobj #line:1636:self.fileobj = fileobj
        if format is not None :#line:1639:if format is not None:
            OOOO00OOO0000OO00 .format =format #line:1640:self.format = format
        if tarinfo is not None :#line:1641:if tarinfo is not None:
            OOOO00OOO0000OO00 .tarinfo =tarinfo #line:1642:self.tarinfo = tarinfo
        if dereference is not None :#line:1643:if dereference is not None:
            OOOO00OOO0000OO00 .dereference =dereference #line:1644:self.dereference = dereference
        if ignore_zeros is not None :#line:1645:if ignore_zeros is not None:
            OOOO00OOO0000OO00 .ignore_zeros =ignore_zeros #line:1646:self.ignore_zeros = ignore_zeros
        if encoding is not None :#line:1647:if encoding is not None:
            OOOO00OOO0000OO00 .encoding =encoding #line:1648:self.encoding = encoding
        OOOO00OOO0000OO00 .errors =errors #line:1649:self.errors = errors
        if pax_headers is not None and OOOO00OOO0000OO00 .format ==OOO000OO0O000OOO0 :#line:1651:if pax_headers is not None and self.format == PAX_FORMAT:
            OOOO00OOO0000OO00 .pax_headers =pax_headers #line:1652:self.pax_headers = pax_headers
        else :#line:1653:else:
            OOOO00OOO0000OO00 .pax_headers ={}#line:1654:self.pax_headers = {}
        if debug is not None :#line:1656:if debug is not None:
            OOOO00OOO0000OO00 .debug =debug #line:1657:self.debug = debug
        if errorlevel is not None :#line:1658:if errorlevel is not None:
            OOOO00OOO0000OO00 .errorlevel =errorlevel #line:1659:self.errorlevel = errorlevel
        OOOO00OOO0000OO00 .closed =False #line:1662:self.closed = False
        OOOO00OOO0000OO00 .members =[]#line:1663:self.members = []       # list of members as TarInfo objects
        OOOO00OOO0000OO00 ._loaded =False #line:1664:self._loaded = False    # flag if all members have been read
        OOOO00OOO0000OO00 .offset =OOOO00OOO0000OO00 .fileobj .tell ()#line:1665:self.offset = self.fileobj.tell()
        OOOO00OOO0000OO00 .inodes ={}#line:1667:self.inodes = {}        # dictionary caching the inodes of
        try :#line:1670:try:
            if OOOO00OOO0000OO00 .mode =="r":#line:1671:if self.mode == "r":
                OOOO00OOO0000OO00 .firstmember =None #line:1672:self.firstmember = None
                OOOO00OOO0000OO00 .firstmember =OOOO00OOO0000OO00 .next ()#line:1673:self.firstmember = self.next()
            if OOOO00OOO0000OO00 .mode =="a":#line:1675:if self.mode == "a":
                while True :#line:1678:while True:
                    OOOO00OOO0000OO00 .fileobj .seek (OOOO00OOO0000OO00 .offset )#line:1679:self.fileobj.seek(self.offset)
                    try :#line:1680:try:
                        tarinfo =OOOO00OOO0000OO00 .tarinfo .fromtarfile (OOOO00OOO0000OO00 )#line:1681:tarinfo = self.tarinfo.fromtarfile(self)
                        OOOO00OOO0000OO00 .members .append (tarinfo )#line:1682:self.members.append(tarinfo)
                    except EOFHeaderError :#line:1683:except EOFHeaderError:
                        OOOO00OOO0000OO00 .fileobj .seek (OOOO00OOO0000OO00 .offset )#line:1684:self.fileobj.seek(self.offset)
                        break #line:1685:break
                    except HeaderError as OOO000O0OOO0OO000 :#line:1686:except HeaderError as e:
                        raise ReadError (str (OOO000O0OOO0OO000 ))#line:1687:raise ReadError(str(e))
            if OOOO00OOO0000OO00 .mode in "aw":#line:1689:if self.mode in "aw":
                OOOO00OOO0000OO00 ._loaded =True #line:1690:self._loaded = True
                if OOOO00OOO0000OO00 .pax_headers :#line:1692:if self.pax_headers:
                    OO00O0O0OOOO0OOO0 =OOOO00OOO0000OO00 .tarinfo .create_pax_global_header (OOOO00OOO0000OO00 .pax_headers .copy ())#line:1693:buf = self.tarinfo.create_pax_global_header(self.pax_headers.copy())
                    OOOO00OOO0000OO00 .fileobj .write (OO00O0O0OOOO0OOO0 )#line:1694:self.fileobj.write(buf)
                    OOOO00OOO0000OO00 .offset +=len (OO00O0O0OOOO0OOO0 )#line:1695:self.offset += len(buf)
        except :#line:1696:except:
            if not OOOO00OOO0000OO00 ._extfileobj :#line:1697:if not self._extfileobj:
                OOOO00OOO0000OO00 .fileobj .close ()#line:1698:self.fileobj.close()
            OOOO00OOO0000OO00 .closed =True #line:1699:self.closed = True
            raise #line:1700:raise
    @classmethod #line:1713:@classmethod
    def open (O0O0O0OO0O0O00O00 ,name =None ,mode ="r",fileobj =None ,bufsize =OO0OOO0OOOO0OO0O0 ,**OO0000OOO0O00O0OO ):#line:1714:def open(cls, name=None, mode="r", fileobj=None, bufsize=RECORDSIZE, **kwargs):
        ""#line:1735:"""
        if not name and not fileobj :#line:1737:if not name and not fileobj:
            raise ValueError ("nothing to open")#line:1738:raise ValueError("nothing to open")
        if mode in ("r","r:*"):#line:1740:if mode in ("r", "r:*"):
            for OO00000OOOOOO0000 in O0O0O0OO0O0O00O00 .OPEN_METH :#line:1742:for comptype in cls.OPEN_METH:
                OOO0O000O00OO0O00 =getattr (O0O0O0OO0O0O00O00 ,O0O0O0OO0O0O00O00 .OPEN_METH [OO00000OOOOOO0000 ])#line:1743:func = getattr(cls, cls.OPEN_METH[comptype])
                if fileobj is not None :#line:1744:if fileobj is not None:
                    O0OOO0O0OOOOOOOOO =fileobj .tell ()#line:1745:saved_pos = fileobj.tell()
                try :#line:1746:try:
                    return OOO0O000O00OO0O00 (name ,"r",fileobj ,**OO0000OOO0O00O0OO )#line:1747:return func(name, "r", fileobj, **kwargs)
                except (ReadError ,CompressionError )as O000000O00OO0O00O :#line:1748:except (ReadError, CompressionError) as e:
                    if fileobj is not None :#line:1749:if fileobj is not None:
                        fileobj .seek (O0OOO0O0OOOOOOOOO )#line:1750:fileobj.seek(saved_pos)
                    continue #line:1751:continue
            raise ReadError ("file could not be opened successfully")#line:1752:raise ReadError("file could not be opened successfully")
        elif ":"in mode :#line:1754:elif ":" in mode:
            OO0OO00000OOO000O ,OO00000OOOOOO0000 =mode .split (":",1 )#line:1755:filemode, comptype = mode.split(":", 1)
            OO0OO00000OOO000O =OO0OO00000OOO000O or "r"#line:1756:filemode = filemode or "r"
            OO00000OOOOOO0000 =OO00000OOOOOO0000 or "tar"#line:1757:comptype = comptype or "tar"
            if OO00000OOOOOO0000 in O0O0O0OO0O0O00O00 .OPEN_METH :#line:1761:if comptype in cls.OPEN_METH:
                OOO0O000O00OO0O00 =getattr (O0O0O0OO0O0O00O00 ,O0O0O0OO0O0O00O00 .OPEN_METH [OO00000OOOOOO0000 ])#line:1762:func = getattr(cls, cls.OPEN_METH[comptype])
            else :#line:1763:else:
                raise CompressionError ("unknown compression type %r"%OO00000OOOOOO0000 )#line:1764:raise CompressionError("unknown compression type %r" % comptype)
            return OOO0O000O00OO0O00 (name ,OO0OO00000OOO000O ,fileobj ,**OO0000OOO0O00O0OO )#line:1765:return func(name, filemode, fileobj, **kwargs)
        elif "|"in mode :#line:1767:elif "|" in mode:
            OO0OO00000OOO000O ,OO00000OOOOOO0000 =mode .split ("|",1 )#line:1768:filemode, comptype = mode.split("|", 1)
            OO0OO00000OOO000O =OO0OO00000OOO000O or "r"#line:1769:filemode = filemode or "r"
            OO00000OOOOOO0000 =OO00000OOOOOO0000 or "tar"#line:1770:comptype = comptype or "tar"
            if OO0OO00000OOO000O not in "rw":#line:1772:if filemode not in "rw":
                raise ValueError ("mode must be 'r' or 'w'")#line:1773:raise ValueError("mode must be 'r' or 'w'")
            O00OO0O00O00OOO00 =_OO0O0O0O0000000OO (name ,OO0OO00000OOO000O ,OO00000OOOOOO0000 ,fileobj ,bufsize )#line:1775:stream = _Stream(name, filemode, comptype, fileobj, bufsize)
            try :#line:1776:try:
                O00O0O0O00OOO0OO0 =O0O0O0OO0O0O00O00 (name ,OO0OO00000OOO000O ,O00OO0O00O00OOO00 ,**OO0000OOO0O00O0OO )#line:1777:t = cls(name, filemode, stream, **kwargs)
            except :#line:1778:except:
                O00OO0O00O00OOO00 .close ()#line:1779:stream.close()
                raise #line:1780:raise
            O00O0O0O00OOO0OO0 ._extfileobj =False #line:1781:t._extfileobj = False
            return O00O0O0O00OOO0OO0 #line:1782:return t
        elif mode in "aw":#line:1784:elif mode in "aw":
            return O0O0O0OO0O0O00O00 .taropen (name ,mode ,fileobj ,**OO0000OOO0O00O0OO )#line:1785:return cls.taropen(name, mode, fileobj, **kwargs)
        raise ValueError ("undiscernible mode")#line:1787:raise ValueError("undiscernible mode")
    @classmethod #line:1789:@classmethod
    def taropen (OO0OO00000O0O0O00 ,O0000000O0OOOOO0O ,mode ="r",fileobj =None ,**OO00O0000OO000OO0 ):#line:1790:def taropen(cls, name, mode="r", fileobj=None, **kwargs):
        ""#line:1792:"""
        if len (mode )>1 or mode not in "raw":#line:1793:if len(mode) > 1 or mode not in "raw":
            raise ValueError ("mode must be 'r', 'a' or 'w'")#line:1794:raise ValueError("mode must be 'r', 'a' or 'w'")
        return OO0OO00000O0O0O00 (O0000000O0OOOOO0O ,mode ,fileobj ,**OO00O0000OO000OO0 )#line:1795:return cls(name, mode, fileobj, **kwargs)
    @classmethod #line:1797:@classmethod
    def gzopen (O0OO0O0OOOO0O0000 ,O0OO00O00OOO0OO0O ,mode ="r",fileobj =None ,compresslevel =9 ,**OOO0O0OO0OO0OOO0O ):#line:1798:def gzopen(cls, name, mode="r", fileobj=None, compresslevel=9, **kwargs):
        ""#line:1801:"""
        if len (mode )>1 or mode not in "rw":#line:1802:if len(mode) > 1 or mode not in "rw":
            raise ValueError ("mode must be 'r' or 'w'")#line:1803:raise ValueError("mode must be 'r' or 'w'")
        try :#line:1805:try:
            import gzip #line:1806:import gzip
            gzip .GzipFile #line:1807:gzip.GzipFile
        except (ImportError ,AttributeError ):#line:1808:except (ImportError, AttributeError):
            raise CompressionError ("gzip module is not available")#line:1809:raise CompressionError("gzip module is not available")
        O0O0O00O00O00OO00 =fileobj is not None #line:1811:extfileobj = fileobj is not None
        try :#line:1812:try:
            fileobj =gzip .GzipFile (O0OO00O00OOO0OO0O ,mode +"b",compresslevel ,fileobj )#line:1813:fileobj = gzip.GzipFile(name, mode + "b", compresslevel, fileobj)
            O000000OOO0O0OO0O =O0OO0O0OOOO0O0000 .taropen (O0OO00O00OOO0OO0O ,mode ,fileobj ,**OOO0O0OO0OO0OOO0O )#line:1814:t = cls.taropen(name, mode, fileobj, **kwargs)
        except IOError :#line:1815:except IOError:
            if not O0O0O00O00O00OO00 and fileobj is not None :#line:1816:if not extfileobj and fileobj is not None:
                fileobj .close ()#line:1817:fileobj.close()
            if fileobj is None :#line:1818:if fileobj is None:
                raise #line:1819:raise
            raise ReadError ("not a gzip file")#line:1820:raise ReadError("not a gzip file")
        except :#line:1821:except:
            if not O0O0O00O00O00OO00 and fileobj is not None :#line:1822:if not extfileobj and fileobj is not None:
                fileobj .close ()#line:1823:fileobj.close()
            raise #line:1824:raise
        O000000OOO0O0OO0O ._extfileobj =O0O0O00O00O00OO00 #line:1825:t._extfileobj = extfileobj
        return O000000OOO0O0OO0O #line:1826:return t
    @classmethod #line:1828:@classmethod
    def bz2open (O0OOO000O0OO0OOOO ,OOOO0OOOOOO000OO0 ,mode ="r",fileobj =None ,compresslevel =9 ,**O000OOOOO00000OOO ):#line:1829:def bz2open(cls, name, mode="r", fileobj=None, compresslevel=9, **kwargs):
        ""#line:1832:"""
        if len (mode )>1 or mode not in "rw":#line:1833:if len(mode) > 1 or mode not in "rw":
            raise ValueError ("mode must be 'r' or 'w'.")#line:1834:raise ValueError("mode must be 'r' or 'w'.")
        try :#line:1836:try:
            import bz2 #line:1837:import bz2
        except ImportError :#line:1838:except ImportError:
            raise CompressionError ("bz2 module is not available")#line:1839:raise CompressionError("bz2 module is not available")
        if fileobj is not None :#line:1841:if fileobj is not None:
            fileobj =_O0OO00000OOO00O0O (fileobj ,mode )#line:1842:fileobj = _BZ2Proxy(fileobj, mode)
        else :#line:1843:else:
            fileobj =bz2 .BZ2File (OOOO0OOOOOO000OO0 ,mode ,compresslevel =compresslevel )#line:1844:fileobj = bz2.BZ2File(name, mode, compresslevel=compresslevel)
        try :#line:1846:try:
            OOOO00O000O0000O0 =O0OOO000O0OO0OOOO .taropen (OOOO0OOOOOO000OO0 ,mode ,fileobj ,**O000OOOOO00000OOO )#line:1847:t = cls.taropen(name, mode, fileobj, **kwargs)
        except (IOError ,EOFError ):#line:1848:except (IOError, EOFError):
            fileobj .close ()#line:1849:fileobj.close()
            raise ReadError ("not a bzip2 file")#line:1850:raise ReadError("not a bzip2 file")
        OOOO00O000O0000O0 ._extfileobj =False #line:1851:t._extfileobj = False
        return OOOO00O000O0000O0 #line:1852:return t
    OPEN_METH ={"tar":"taropen","gz":"gzopen","bz2":"bz2open"}#line:1859:}
    def close (O00O00O0O00OOO00O ):#line:1864:def close(self):
        ""#line:1867:"""
        if O00O00O0O00OOO00O .closed :#line:1868:if self.closed:
            return #line:1869:return
        if O00O00O0O00OOO00O .mode in "aw":#line:1871:if self.mode in "aw":
            O00O00O0O00OOO00O .fileobj .write (OOO0OOO00OO0O00O0 *(OO0000O000OO0O0O0 *2 ))#line:1872:self.fileobj.write(NUL * (BLOCKSIZE * 2))
            O00O00O0O00OOO00O .offset +=(OO0000O000OO0O0O0 *2 )#line:1873:self.offset += (BLOCKSIZE * 2)
            O00O0OOO0O00O0OO0 ,OO0OO0O0O0OO0O00O =divmod (O00O00O0O00OOO00O .offset ,OO0OOO0OOOO0OO0O0 )#line:1876:blocks, remainder = divmod(self.offset, RECORDSIZE)
            if OO0OO0O0O0OO0O00O >0 :#line:1877:if remainder > 0:
                O00O00O0O00OOO00O .fileobj .write (OOO0OOO00OO0O00O0 *(OO0OOO0OOOO0OO0O0 -OO0OO0O0O0OO0O00O ))#line:1878:self.fileobj.write(NUL * (RECORDSIZE - remainder))
        if not O00O00O0O00OOO00O ._extfileobj :#line:1880:if not self._extfileobj:
            O00O00O0O00OOO00O .fileobj .close ()#line:1881:self.fileobj.close()
        O00O00O0O00OOO00O .closed =True #line:1882:self.closed = True
    def getmember (O0O0O000OOO0OO00O ,OO0000O00OO0O0OOO ):#line:1884:def getmember(self, name):
        ""#line:1889:"""
        OO0O0O0OOO0OO0OO0 =O0O0O000OOO0OO00O ._getmember (OO0000O00OO0O0OOO )#line:1890:tarinfo = self._getmember(name)
        if OO0O0O0OOO0OO0OO0 is None :#line:1891:if tarinfo is None:
            raise KeyError ("filename %r not found"%OO0000O00OO0O0OOO )#line:1892:raise KeyError("filename %r not found" % name)
        return OO0O0O0OOO0OO0OO0 #line:1893:return tarinfo
    def getmembers (O0OOOOOO0000O0OO0 ):#line:1895:def getmembers(self):
        ""#line:1898:"""
        O0OOOOOO0000O0OO0 ._check ()#line:1899:self._check()
        if not O0OOOOOO0000O0OO0 ._loaded :#line:1900:if not self._loaded:    # if we want to obtain a list of
            O0OOOOOO0000O0OO0 ._load ()#line:1901:self._load()        # all members, we first have to
        return O0OOOOOO0000O0OO0 .members #line:1903:return self.members
    def getnames (O00OO000000OO0OOO ):#line:1905:def getnames(self):
        ""#line:1908:"""
        return [OOO0O0O0O0OOOO000 .name for OOO0O0O0O0OOOO000 in O00OO000000OO0OOO .getmembers ()]#line:1909:return [tarinfo.name for tarinfo in self.getmembers()]
    def gettarinfo (O0OOOO0O00OO0O0OO ,name =None ,arcname =None ,fileobj =None ):#line:1911:def gettarinfo(self, name=None, arcname=None, fileobj=None):
        ""#line:1917:"""
        O0OOOO0O00OO0O0OO ._check ("aw")#line:1918:self._check("aw")
        if fileobj is not None :#line:1922:if fileobj is not None:
            name =fileobj .name #line:1923:name = fileobj.name
        if arcname is None :#line:1928:if arcname is None:
            arcname =name #line:1929:arcname = name
        O00OO00000OO000O0 ,arcname =os .path .splitdrive (arcname )#line:1930:drv, arcname = os.path.splitdrive(arcname)
        arcname =arcname .replace (os .sep ,"/")#line:1931:arcname = arcname.replace(os.sep, "/")
        arcname =arcname .lstrip ("/")#line:1932:arcname = arcname.lstrip("/")
        O0O0OOOO00O0O00O0 =O0OOOO0O00OO0O0OO .tarinfo ()#line:1936:tarinfo = self.tarinfo()
        O0O0OOOO00O0O00O0 .tarfile =O0OOOO0O00OO0O0OO #line:1937:tarinfo.tarfile = self
        if fileobj is None :#line:1941:if fileobj is None:
            if hasattr (os ,"lstat")and not O0OOOO0O00OO0O0OO .dereference :#line:1942:if hasattr(os, "lstat") and not self.dereference:
                OOOO00O0OOOOO0OO0 =os .lstat (name )#line:1943:statres = os.lstat(name)
            else :#line:1944:else:
                OOOO00O0OOOOO0OO0 =os .stat (name )#line:1945:statres = os.stat(name)
        else :#line:1946:else:
            OOOO00O0OOOOO0OO0 =os .fstat (fileobj .fileno ())#line:1947:statres = os.fstat(fileobj.fileno())
        OOOOOO00000OOOO0O =""#line:1948:linkname = ""
        OOO0O0O0000OOO0OO =OOOO00O0OOOOO0OO0 .st_mode #line:1950:stmd = statres.st_mode
        if stat .S_ISREG (OOO0O0O0000OOO0OO ):#line:1951:if stat.S_ISREG(stmd):
            O00O00OOOO0OOOOO0 =(OOOO00O0OOOOO0OO0 .st_ino ,OOOO00O0OOOOO0OO0 .st_dev )#line:1952:inode = (statres.st_ino, statres.st_dev)
            if not O0OOOO0O00OO0O0OO .dereference and OOOO00O0OOOOO0OO0 .st_nlink >1 and O00O00OOOO0OOOOO0 in O0OOOO0O00OO0O0OO .inodes and arcname !=O0OOOO0O00OO0O0OO .inodes [O00O00OOOO0OOOOO0 ]:#line:1954:inode in self.inodes and arcname != self.inodes[inode]:
                O0O000O000OO0OOOO =OO0OO0O0OO0OO0O0O #line:1957:type = LNKTYPE
                OOOOOO00000OOOO0O =O0OOOO0O00OO0O0OO .inodes [O00O00OOOO0OOOOO0 ]#line:1958:linkname = self.inodes[inode]
            else :#line:1959:else:
                O0O000O000OO0OOOO =OO000OOO0OOO0000O #line:1962:type = REGTYPE
                if O00O00OOOO0OOOOO0 [0 ]:#line:1963:if inode[0]:
                    O0OOOO0O00OO0O0OO .inodes [O00O00OOOO0OOOOO0 ]=arcname #line:1964:self.inodes[inode] = arcname
        elif stat .S_ISDIR (OOO0O0O0000OOO0OO ):#line:1965:elif stat.S_ISDIR(stmd):
            O0O000O000OO0OOOO =OOOO0O00000O00O00 #line:1966:type = DIRTYPE
        elif stat .S_ISFIFO (OOO0O0O0000OOO0OO ):#line:1967:elif stat.S_ISFIFO(stmd):
            O0O000O000OO0OOOO =OOO000000O0OOOO00 #line:1968:type = FIFOTYPE
        elif stat .S_ISLNK (OOO0O0O0000OOO0OO ):#line:1969:elif stat.S_ISLNK(stmd):
            O0O000O000OO0OOOO =O000O0OOOO0O00OOO #line:1970:type = SYMTYPE
            OOOOOO00000OOOO0O =os .readlink (name )#line:1971:linkname = os.readlink(name)
        elif stat .S_ISCHR (OOO0O0O0000OOO0OO ):#line:1972:elif stat.S_ISCHR(stmd):
            O0O000O000OO0OOOO =O0OO00OOOO000O0OO #line:1973:type = CHRTYPE
        elif stat .S_ISBLK (OOO0O0O0000OOO0OO ):#line:1974:elif stat.S_ISBLK(stmd):
            O0O000O000OO0OOOO =O000000O0OO0OO0O0 #line:1975:type = BLKTYPE
        else :#line:1976:else:
            return None #line:1977:return None
        O0O0OOOO00O0O00O0 .name =arcname #line:1981:tarinfo.name = arcname
        O0O0OOOO00O0O00O0 .mode =OOO0O0O0000OOO0OO #line:1982:tarinfo.mode = stmd
        O0O0OOOO00O0O00O0 .uid =OOOO00O0OOOOO0OO0 .st_uid #line:1983:tarinfo.uid = statres.st_uid
        O0O0OOOO00O0O00O0 .gid =OOOO00O0OOOOO0OO0 .st_gid #line:1984:tarinfo.gid = statres.st_gid
        if O0O000O000OO0OOOO ==OO000OOO0OOO0000O :#line:1985:if type == REGTYPE:
            O0O0OOOO00O0O00O0 .size =OOOO00O0OOOOO0OO0 .st_size #line:1986:tarinfo.size = statres.st_size
        else :#line:1987:else:
            O0O0OOOO00O0O00O0 .size =0 #line:1988:tarinfo.size = 0
        O0O0OOOO00O0O00O0 .mtime =OOOO00O0OOOOO0OO0 .st_mtime #line:1989:tarinfo.mtime = statres.st_mtime
        O0O0OOOO00O0O00O0 .type =O0O000O000OO0OOOO #line:1990:tarinfo.type = type
        O0O0OOOO00O0O00O0 .linkname =OOOOOO00000OOOO0O #line:1991:tarinfo.linkname = linkname
        if pwd :#line:1992:if pwd:
            try :#line:1993:try:
                O0O0OOOO00O0O00O0 .uname =pwd .getpwuid (O0O0OOOO00O0O00O0 .uid )[0 ]#line:1994:tarinfo.uname = pwd.getpwuid(tarinfo.uid)[0]
            except KeyError :#line:1995:except KeyError:
                pass #line:1996:pass
        if grp :#line:1997:if grp:
            try :#line:1998:try:
                O0O0OOOO00O0O00O0 .gname =grp .getgrgid (O0O0OOOO00O0O00O0 .gid )[0 ]#line:1999:tarinfo.gname = grp.getgrgid(tarinfo.gid)[0]
            except KeyError :#line:2000:except KeyError:
                pass #line:2001:pass
        if O0O000O000OO0OOOO in (O0OO00OOOO000O0OO ,O000000O0OO0OO0O0 ):#line:2003:if type in (CHRTYPE, BLKTYPE):
            if hasattr (os ,"major")and hasattr (os ,"minor"):#line:2004:if hasattr(os, "major") and hasattr(os, "minor"):
                O0O0OOOO00O0O00O0 .devmajor =os .major (OOOO00O0OOOOO0OO0 .st_rdev )#line:2005:tarinfo.devmajor = os.major(statres.st_rdev)
                O0O0OOOO00O0O00O0 .devminor =os .minor (OOOO00O0OOOOO0OO0 .st_rdev )#line:2006:tarinfo.devminor = os.minor(statres.st_rdev)
        return O0O0OOOO00O0O00O0 #line:2007:return tarinfo
    def list (O00OOO00O0OOO0O0O ,verbose =True ):#line:2009:def list(self, verbose=True):
        ""#line:2013:"""
        O00OOO00O0OOO0O0O ._check ()#line:2014:self._check()
        for O0OOO0O0O00OOOO00 in O00OOO00O0OOO0O0O :#line:2016:for tarinfo in self:
            if verbose :#line:2017:if verbose:
                print (OOOO0O00000OOOOO0 (O0OOO0O0O00OOOO00 .mode ),end =' ')#line:2018:print(filemode(tarinfo.mode), end=' ')
                print ("%s/%s"%(O0OOO0O0O00OOOO00 .uname or O0OOO0O0O00OOOO00 .uid ,O0OOO0O0O00OOOO00 .gname or O0OOO0O0O00OOOO00 .gid ),end =' ')#line:2020:tarinfo.gname or tarinfo.gid), end=' ')
                if O0OOO0O0O00OOOO00 .ischr ()or O0OOO0O0O00OOOO00 .isblk ():#line:2021:if tarinfo.ischr() or tarinfo.isblk():
                    print ("%10s"%("%d,%d"%(O0OOO0O0O00OOOO00 .devmajor ,O0OOO0O0O00OOOO00 .devminor )),end =' ')#line:2023:% (tarinfo.devmajor, tarinfo.devminor)), end=' ')
                else :#line:2024:else:
                    print ("%10d"%O0OOO0O0O00OOOO00 .size ,end =' ')#line:2025:print("%10d" % tarinfo.size, end=' ')
                print ("%d-%02d-%02d %02d:%02d:%02d"%time .localtime (O0OOO0O0O00OOOO00 .mtime )[:6 ],end =' ')#line:2027:% time.localtime(tarinfo.mtime)[:6], end=' ')
            print (O0OOO0O0O00OOOO00 .name +("/"if O0OOO0O0O00OOOO00 .isdir ()else ""),end =' ')#line:2029:print(tarinfo.name + ("/" if tarinfo.isdir() else ""), end=' ')
            if verbose :#line:2031:if verbose:
                if O0OOO0O0O00OOOO00 .issym ():#line:2032:if tarinfo.issym():
                    print ("->",O0OOO0O0O00OOOO00 .linkname ,end =' ')#line:2033:print("->", tarinfo.linkname, end=' ')
                if O0OOO0O0O00OOOO00 .islnk ():#line:2034:if tarinfo.islnk():
                    print ("link to",O0OOO0O0O00OOOO00 .linkname ,end =' ')#line:2035:print("link to", tarinfo.linkname, end=' ')
            print ()#line:2036:print()
    def add (O0OOOO0O00OO000OO ,O00OO0O0000O00O0O ,arcname =None ,recursive =True ,exclude =None ,filter =None ):#line:2038:def add(self, name, arcname=None, recursive=True, exclude=None, filter=None):
        ""#line:2048:"""
        O0OOOO0O00OO000OO ._check ("aw")#line:2049:self._check("aw")
        if arcname is None :#line:2051:if arcname is None:
            arcname =O00OO0O0000O00O0O #line:2052:arcname = name
        if exclude is not None :#line:2055:if exclude is not None:
            import warnings #line:2056:import warnings
            warnings .warn ("use the filter argument instead",DeprecationWarning ,2 )#line:2058:DeprecationWarning, 2)
            if exclude (O00OO0O0000O00O0O ):#line:2059:if exclude(name):
                O0OOOO0O00OO000OO ._dbg (2 ,"tarfile: Excluded %r"%O00OO0O0000O00O0O )#line:2060:self._dbg(2, "tarfile: Excluded %r" % name)
                return #line:2061:return
        if O0OOOO0O00OO000OO .name is not None and os .path .abspath (O00OO0O0000O00O0O )==O0OOOO0O00OO000OO .name :#line:2064:if self.name is not None and os.path.abspath(name) == self.name:
            O0OOOO0O00OO000OO ._dbg (2 ,"tarfile: Skipped %r"%O00OO0O0000O00O0O )#line:2065:self._dbg(2, "tarfile: Skipped %r" % name)
            return #line:2066:return
        O0OOOO0O00OO000OO ._dbg (1 ,O00OO0O0000O00O0O )#line:2068:self._dbg(1, name)
        OO0000O00O0O0O000 =O0OOOO0O00OO000OO .gettarinfo (O00OO0O0000O00O0O ,arcname )#line:2071:tarinfo = self.gettarinfo(name, arcname)
        if OO0000O00O0O0O000 is None :#line:2073:if tarinfo is None:
            O0OOOO0O00OO000OO ._dbg (1 ,"tarfile: Unsupported type %r"%O00OO0O0000O00O0O )#line:2074:self._dbg(1, "tarfile: Unsupported type %r" % name)
            return #line:2075:return
        if filter is not None :#line:2078:if filter is not None:
            OO0000O00O0O0O000 =filter (OO0000O00O0O0O000 )#line:2079:tarinfo = filter(tarinfo)
            if OO0000O00O0O0O000 is None :#line:2080:if tarinfo is None:
                O0OOOO0O00OO000OO ._dbg (2 ,"tarfile: Excluded %r"%O00OO0O0000O00O0O )#line:2081:self._dbg(2, "tarfile: Excluded %r" % name)
                return #line:2082:return
        if OO0000O00O0O0O000 .isreg ():#line:2085:if tarinfo.isreg():
            OOOOO0OO000O0000O =O0OOOO0OOO00OOO00 (O00OO0O0000O00O0O ,"rb")#line:2086:f = bltn_open(name, "rb")
            O0OOOO0O00OO000OO .addfile (OO0000O00O0O0O000 ,OOOOO0OO000O0000O )#line:2087:self.addfile(tarinfo, f)
            OOOOO0OO000O0000O .close ()#line:2088:f.close()
        elif OO0000O00O0O0O000 .isdir ():#line:2090:elif tarinfo.isdir():
            O0OOOO0O00OO000OO .addfile (OO0000O00O0O0O000 )#line:2091:self.addfile(tarinfo)
            if recursive :#line:2092:if recursive:
                for OOOOO0OO000O0000O in os .listdir (O00OO0O0000O00O0O ):#line:2093:for f in os.listdir(name):
                    O0OOOO0O00OO000OO .add (os .path .join (O00OO0O0000O00O0O ,OOOOO0OO000O0000O ),os .path .join (arcname ,OOOOO0OO000O0000O ),recursive ,exclude ,filter =filter )#line:2095:recursive, exclude, filter=filter)
        else :#line:2097:else:
            O0OOOO0O00OO000OO .addfile (OO0000O00O0O0O000 )#line:2098:self.addfile(tarinfo)
    def addfile (O0OOOOO0O00OO0OOO ,OO00O0OO0O0O0OOOO ,fileobj =None ):#line:2100:def addfile(self, tarinfo, fileobj=None):
        ""#line:2106:"""
        O0OOOOO0O00OO0OOO ._check ("aw")#line:2107:self._check("aw")
        OO00O0OO0O0O0OOOO =copy .copy (OO00O0OO0O0O0OOOO )#line:2109:tarinfo = copy.copy(tarinfo)
        O00000OOO00OOO000 =OO00O0OO0O0O0OOOO .tobuf (O0OOOOO0O00OO0OOO .format ,O0OOOOO0O00OO0OOO .encoding ,O0OOOOO0O00OO0OOO .errors )#line:2111:buf = tarinfo.tobuf(self.format, self.encoding, self.errors)
        O0OOOOO0O00OO0OOO .fileobj .write (O00000OOO00OOO000 )#line:2112:self.fileobj.write(buf)
        O0OOOOO0O00OO0OOO .offset +=len (O00000OOO00OOO000 )#line:2113:self.offset += len(buf)
        if fileobj is not None :#line:2116:if fileobj is not None:
            OOO0O0O0O0O00OO0O (fileobj ,O0OOOOO0O00OO0OOO .fileobj ,OO00O0OO0O0O0OOOO .size )#line:2117:copyfileobj(fileobj, self.fileobj, tarinfo.size)
            O0OOO00OO00OOO00O ,OO00O0OO0O0O0000O =divmod (OO00O0OO0O0O0OOOO .size ,OO0000O000OO0O0O0 )#line:2118:blocks, remainder = divmod(tarinfo.size, BLOCKSIZE)
            if OO00O0OO0O0O0000O >0 :#line:2119:if remainder > 0:
                O0OOOOO0O00OO0OOO .fileobj .write (OOO0OOO00OO0O00O0 *(OO0000O000OO0O0O0 -OO00O0OO0O0O0000O ))#line:2120:self.fileobj.write(NUL * (BLOCKSIZE - remainder))
                O0OOO00OO00OOO00O +=1 #line:2121:blocks += 1
            O0OOOOO0O00OO0OOO .offset +=O0OOO00OO00OOO00O *OO0000O000OO0O0O0 #line:2122:self.offset += blocks * BLOCKSIZE
        O0OOOOO0O00OO0OOO .members .append (OO00O0OO0O0O0OOOO )#line:2124:self.members.append(tarinfo)
    def extractall (O00O00OOOOOO00O0O ,path =".",members =None ):#line:2126:def extractall(self, path=".", members=None):
        ""#line:2132:"""
        O0O00OO000O0O0O0O =[]#line:2133:directories = []
        if members is None :#line:2135:if members is None:
            members =O00O00OOOOOO00O0O #line:2136:members = self
        for OOOOO0000O0O00OO0 in members :#line:2138:for tarinfo in members:
            if OOOOO0000O0O00OO0 .isdir ():#line:2139:if tarinfo.isdir():
                O0O00OO000O0O0O0O .append (OOOOO0000O0O00OO0 )#line:2141:directories.append(tarinfo)
                OOOOO0000O0O00OO0 =copy .copy (OOOOO0000O0O00OO0 )#line:2142:tarinfo = copy.copy(tarinfo)
                OOOOO0000O0O00OO0 .mode =0o700 #line:2143:tarinfo.mode = 0o700
            O00O00OOOOOO00O0O .extract (OOOOO0000O0O00OO0 ,path ,set_attrs =not OOOOO0000O0O00OO0 .isdir ())#line:2145:self.extract(tarinfo, path, set_attrs=not tarinfo.isdir())
        O0O00OO000O0O0O0O .sort (key =lambda OO0O00OOO0000O0OO :OO0O00OOO0000O0OO .name )#line:2148:directories.sort(key=lambda a: a.name)
        O0O00OO000O0O0O0O .reverse ()#line:2149:directories.reverse()
        for OOOOO0000O0O00OO0 in O0O00OO000O0O0O0O :#line:2152:for tarinfo in directories:
            OO00O0000OO0O0OOO =os .path .join (path ,OOOOO0000O0O00OO0 .name )#line:2153:dirpath = os.path.join(path, tarinfo.name)
            try :#line:2154:try:
                O00O00OOOOOO00O0O .chown (OOOOO0000O0O00OO0 ,OO00O0000OO0O0OOO )#line:2155:self.chown(tarinfo, dirpath)
                O00O00OOOOOO00O0O .utime (OOOOO0000O0O00OO0 ,OO00O0000OO0O0OOO )#line:2156:self.utime(tarinfo, dirpath)
                O00O00OOOOOO00O0O .chmod (OOOOO0000O0O00OO0 ,OO00O0000OO0O0OOO )#line:2157:self.chmod(tarinfo, dirpath)
            except ExtractError as OO0000OOO0O000O0O :#line:2158:except ExtractError as e:
                if O00O00OOOOOO00O0O .errorlevel >1 :#line:2159:if self.errorlevel > 1:
                    raise #line:2160:raise
                else :#line:2161:else:
                    O00O00OOOOOO00O0O ._dbg (1 ,"tarfile: %s"%OO0000OOO0O000O0O )#line:2162:self._dbg(1, "tarfile: %s" % e)
    def extract (O0O000OOO00OOO0OO ,O0O0OOO0000OO0OOO ,path ="",set_attrs =True ):#line:2164:def extract(self, member, path="", set_attrs=True):
        ""#line:2170:"""
        O0O000OOO00OOO0OO ._check ("r")#line:2171:self._check("r")
        if isinstance (O0O0OOO0000OO0OOO ,str ):#line:2173:if isinstance(member, str):
            OOO0O0OOOO000O00O =O0O000OOO00OOO0OO .getmember (O0O0OOO0000OO0OOO )#line:2174:tarinfo = self.getmember(member)
        else :#line:2175:else:
            OOO0O0OOOO000O00O =O0O0OOO0000OO0OOO #line:2176:tarinfo = member
        if OOO0O0OOOO000O00O .islnk ():#line:2179:if tarinfo.islnk():
            OOO0O0OOOO000O00O ._link_target =os .path .join (path ,OOO0O0OOOO000O00O .linkname )#line:2180:tarinfo._link_target = os.path.join(path, tarinfo.linkname)
        try :#line:2182:try:
            O0O000OOO00OOO0OO ._extract_member (OOO0O0OOOO000O00O ,os .path .join (path ,OOO0O0OOOO000O00O .name ),set_attrs =set_attrs )#line:2184:set_attrs=set_attrs)
        except EnvironmentError as O0OOO0O00OOOO0OO0 :#line:2185:except EnvironmentError as e:
            if O0O000OOO00OOO0OO .errorlevel >0 :#line:2186:if self.errorlevel > 0:
                raise #line:2187:raise
            else :#line:2188:else:
                if O0OOO0O00OOOO0OO0 .filename is None :#line:2189:if e.filename is None:
                    O0O000OOO00OOO0OO ._dbg (1 ,"tarfile: %s"%O0OOO0O00OOOO0OO0 .strerror )#line:2190:self._dbg(1, "tarfile: %s" % e.strerror)
                else :#line:2191:else:
                    O0O000OOO00OOO0OO ._dbg (1 ,"tarfile: %s %r"%(O0OOO0O00OOOO0OO0 .strerror ,O0OOO0O00OOOO0OO0 .filename ))#line:2192:self._dbg(1, "tarfile: %s %r" % (e.strerror, e.filename))
        except ExtractError as O0OOO0O00OOOO0OO0 :#line:2193:except ExtractError as e:
            if O0O000OOO00OOO0OO .errorlevel >1 :#line:2194:if self.errorlevel > 1:
                raise #line:2195:raise
            else :#line:2196:else:
                O0O000OOO00OOO0OO ._dbg (1 ,"tarfile: %s"%O0OOO0O00OOOO0OO0 )#line:2197:self._dbg(1, "tarfile: %s" % e)
    def extractfile (OO0000OO000O000O0 ,OOOOOOO000000O000 ):#line:2199:def extractfile(self, member):
        ""#line:2207:"""
        OO0000OO000O000O0 ._check ("r")#line:2208:self._check("r")
        if isinstance (OOOOOOO000000O000 ,str ):#line:2210:if isinstance(member, str):
            OOO0O00OOOO000OO0 =OO0000OO000O000O0 .getmember (OOOOOOO000000O000 )#line:2211:tarinfo = self.getmember(member)
        else :#line:2212:else:
            OOO0O00OOOO000OO0 =OOOOOOO000000O000 #line:2213:tarinfo = member
        if OOO0O00OOOO000OO0 .isreg ():#line:2215:if tarinfo.isreg():
            return OO0000OO000O000O0 .fileobject (OO0000OO000O000O0 ,OOO0O00OOOO000OO0 )#line:2216:return self.fileobject(self, tarinfo)
        elif OOO0O00OOOO000OO0 .type not in O0OOOO0OO0OOO0OO0 :#line:2218:elif tarinfo.type not in SUPPORTED_TYPES:
            return OO0000OO000O000O0 .fileobject (OO0000OO000O000O0 ,OOO0O00OOOO000OO0 )#line:2221:return self.fileobject(self, tarinfo)
        elif OOO0O00OOOO000OO0 .islnk ()or OOO0O00OOOO000OO0 .issym ():#line:2223:elif tarinfo.islnk() or tarinfo.issym():
            if isinstance (OO0000OO000O000O0 .fileobj ,_OO0O0O0O0000000OO ):#line:2224:if isinstance(self.fileobj, _Stream):
                raise StreamError ("cannot extract (sym)link as file object")#line:2228:raise StreamError("cannot extract (sym)link as file object")
            else :#line:2229:else:
                return OO0000OO000O000O0 .extractfile (OO0000OO000O000O0 ._find_link_target (OOO0O00OOOO000OO0 ))#line:2231:return self.extractfile(self._find_link_target(tarinfo))
        else :#line:2232:else:
            return None #line:2235:return None
    def _extract_member (O00000O0O0O000OOO ,OO00O000000O0000O ,O0OOO0OOO00O00O0O ,set_attrs =True ):#line:2237:def _extract_member(self, tarinfo, targetpath, set_attrs=True):
        ""#line:2240:"""
        O0OOO0OOO00O00O0O =O0OOO0OOO00O00O0O .rstrip ("/")#line:2244:targetpath = targetpath.rstrip("/")
        O0OOO0OOO00O00O0O =O0OOO0OOO00O00O0O .replace ("/",os .sep )#line:2245:targetpath = targetpath.replace("/", os.sep)
        OO0OOO00O0O00OO00 =os .path .dirname (O0OOO0OOO00O00O0O )#line:2248:upperdirs = os.path.dirname(targetpath)
        if OO0OOO00O0O00OO00 and not os .path .exists (OO0OOO00O0O00OO00 ):#line:2249:if upperdirs and not os.path.exists(upperdirs):
            os .makedirs (OO0OOO00O0O00OO00 )#line:2252:os.makedirs(upperdirs)
        if OO00O000000O0000O .islnk ()or OO00O000000O0000O .issym ():#line:2254:if tarinfo.islnk() or tarinfo.issym():
            O00000O0O0O000OOO ._dbg (1 ,"%s -> %s"%(OO00O000000O0000O .name ,OO00O000000O0000O .linkname ))#line:2255:self._dbg(1, "%s -> %s" % (tarinfo.name, tarinfo.linkname))
        else :#line:2256:else:
            O00000O0O0O000OOO ._dbg (1 ,OO00O000000O0000O .name )#line:2257:self._dbg(1, tarinfo.name)
        if OO00O000000O0000O .isreg ():#line:2259:if tarinfo.isreg():
            O00000O0O0O000OOO .makefile (OO00O000000O0000O ,O0OOO0OOO00O00O0O )#line:2260:self.makefile(tarinfo, targetpath)
        elif OO00O000000O0000O .isdir ():#line:2261:elif tarinfo.isdir():
            O00000O0O0O000OOO .makedir (OO00O000000O0000O ,O0OOO0OOO00O00O0O )#line:2262:self.makedir(tarinfo, targetpath)
        elif OO00O000000O0000O .isfifo ():#line:2263:elif tarinfo.isfifo():
            O00000O0O0O000OOO .makefifo (OO00O000000O0000O ,O0OOO0OOO00O00O0O )#line:2264:self.makefifo(tarinfo, targetpath)
        elif OO00O000000O0000O .ischr ()or OO00O000000O0000O .isblk ():#line:2265:elif tarinfo.ischr() or tarinfo.isblk():
            O00000O0O0O000OOO .makedev (OO00O000000O0000O ,O0OOO0OOO00O00O0O )#line:2266:self.makedev(tarinfo, targetpath)
        elif OO00O000000O0000O .islnk ()or OO00O000000O0000O .issym ():#line:2267:elif tarinfo.islnk() or tarinfo.issym():
            O00000O0O0O000OOO .makelink (OO00O000000O0000O ,O0OOO0OOO00O00O0O )#line:2268:self.makelink(tarinfo, targetpath)
        elif OO00O000000O0000O .type not in O0OOOO0OO0OOO0OO0 :#line:2269:elif tarinfo.type not in SUPPORTED_TYPES:
            O00000O0O0O000OOO .makeunknown (OO00O000000O0000O ,O0OOO0OOO00O00O0O )#line:2270:self.makeunknown(tarinfo, targetpath)
        else :#line:2271:else:
            O00000O0O0O000OOO .makefile (OO00O000000O0000O ,O0OOO0OOO00O00O0O )#line:2272:self.makefile(tarinfo, targetpath)
        if set_attrs :#line:2274:if set_attrs:
            O00000O0O0O000OOO .chown (OO00O000000O0000O ,O0OOO0OOO00O00O0O )#line:2275:self.chown(tarinfo, targetpath)
            if not OO00O000000O0000O .issym ():#line:2276:if not tarinfo.issym():
                O00000O0O0O000OOO .chmod (OO00O000000O0000O ,O0OOO0OOO00O00O0O )#line:2277:self.chmod(tarinfo, targetpath)
                O00000O0O0O000OOO .utime (OO00O000000O0000O ,O0OOO0OOO00O00O0O )#line:2278:self.utime(tarinfo, targetpath)
    def makedir (OO0O0O0O00O00OO0O ,OOO00OOOOOO00O0O0 ,OO0OO0O00000O00OO ):#line:2285:def makedir(self, tarinfo, targetpath):
        ""#line:2287:"""
        try :#line:2288:try:
            os .mkdir (OO0OO0O00000O00OO ,0o700 )#line:2291:os.mkdir(targetpath, 0o700)
        except EnvironmentError as OO00OOOOOOO000O0O :#line:2292:except EnvironmentError as e:
            if OO00OOOOOOO000O0O .errno !=errno .EEXIST :#line:2293:if e.errno != errno.EEXIST:
                raise #line:2294:raise
    def makefile (O0O0O0000OO0O0000 ,OOO00000000OO00O0 ,O0O000O0OOOOOO0OO ):#line:2296:def makefile(self, tarinfo, targetpath):
        ""#line:2298:"""
        O0O0000OO0O00OO0O =O0O0O0000OO0O0000 .fileobj #line:2299:source = self.fileobj
        O0O0000OO0O00OO0O .seek (OOO00000000OO00O0 .offset_data )#line:2300:source.seek(tarinfo.offset_data)
        O0O00000O0OO00OO0 =O0OOOO0OOO00OOO00 (O0O000O0OOOOOO0OO ,"wb")#line:2301:target = bltn_open(targetpath, "wb")
        if OOO00000000OO00O0 .sparse is not None :#line:2302:if tarinfo.sparse is not None:
            for OOOOOOOO0000OO0O0 ,OO0OO0O00OO00O000 in OOO00000000OO00O0 .sparse :#line:2303:for offset, size in tarinfo.sparse:
                O0O00000O0OO00OO0 .seek (OOOOOOOO0000OO0O0 )#line:2304:target.seek(offset)
                OOO0O0O0O0O00OO0O (O0O0000OO0O00OO0O ,O0O00000O0OO00OO0 ,OO0OO0O00OO00O000 )#line:2305:copyfileobj(source, target, size)
        else :#line:2306:else:
            OOO0O0O0O0O00OO0O (O0O0000OO0O00OO0O ,O0O00000O0OO00OO0 ,OOO00000000OO00O0 .size )#line:2307:copyfileobj(source, target, tarinfo.size)
        O0O00000O0OO00OO0 .seek (OOO00000000OO00O0 .size )#line:2308:target.seek(tarinfo.size)
        O0O00000O0OO00OO0 .truncate ()#line:2309:target.truncate()
        O0O00000O0OO00OO0 .close ()#line:2310:target.close()
    def makeunknown (O0O00O0O0O00OO0OO ,O00000OOOO0000O0O ,O0O0000OO000O0OO0 ):#line:2312:def makeunknown(self, tarinfo, targetpath):
        ""#line:2315:"""
        O0O00O0O0O00OO0OO .makefile (O00000OOOO0000O0O ,O0O0000OO000O0OO0 )#line:2316:self.makefile(tarinfo, targetpath)
        O0O00O0O0O00OO0OO ._dbg (1 ,"tarfile: Unknown file type %r, " "extracted as regular file."%O00000OOOO0000O0O .type )#line:2318:"extracted as regular file." % tarinfo.type)
    def makefifo (OOOOO0OO0O0O00OO0 ,OOO000O00OO0OO00O ,OOO0O0OO0OOOO000O ):#line:2320:def makefifo(self, tarinfo, targetpath):
        ""#line:2322:"""
        if hasattr (os ,"mkfifo"):#line:2323:if hasattr(os, "mkfifo"):
            os .mkfifo (OOO0O0OO0OOOO000O )#line:2324:os.mkfifo(targetpath)
        else :#line:2325:else:
            raise ExtractError ("fifo not supported by system")#line:2326:raise ExtractError("fifo not supported by system")
    def makedev (O0OO0OOO00O000O00 ,OOOO000000O0O0OO0 ,OOO0OOOOOOO00OOO0 ):#line:2328:def makedev(self, tarinfo, targetpath):
        ""#line:2330:"""
        if not hasattr (os ,"mknod")or not hasattr (os ,"makedev"):#line:2331:if not hasattr(os, "mknod") or not hasattr(os, "makedev"):
            raise ExtractError ("special devices not supported by system")#line:2332:raise ExtractError("special devices not supported by system")
        OOO0OO0O0OOO000OO =OOOO000000O0O0OO0 .mode #line:2334:mode = tarinfo.mode
        if OOOO000000O0O0OO0 .isblk ():#line:2335:if tarinfo.isblk():
            OOO0OO0O0OOO000OO |=stat .S_IFBLK #line:2336:mode |= stat.S_IFBLK
        else :#line:2337:else:
            OOO0OO0O0OOO000OO |=stat .S_IFCHR #line:2338:mode |= stat.S_IFCHR
        os .mknod (OOO0OOOOOOO00OOO0 ,OOO0OO0O0OOO000OO ,os .makedev (OOOO000000O0O0OO0 .devmajor ,OOOO000000O0O0OO0 .devminor ))#line:2341:os.makedev(tarinfo.devmajor, tarinfo.devminor))
    def makelink (OO00OOO0O00OOO000 ,OO0OO0OOO0O000O00 ,O00OO0000000O0OOO ):#line:2343:def makelink(self, tarinfo, targetpath):
        ""#line:2347:"""
        try :#line:2348:try:
            if OO0OO0OOO0O000O00 .issym ():#line:2350:if tarinfo.issym():
                os .symlink (OO0OO0OOO0O000O00 .linkname ,O00OO0000000O0OOO )#line:2351:os.symlink(tarinfo.linkname, targetpath)
            else :#line:2352:else:
                if os .path .exists (OO0OO0OOO0O000O00 ._link_target ):#line:2354:if os.path.exists(tarinfo._link_target):
                    os .link (OO0OO0OOO0O000O00 ._link_target ,O00OO0000000O0OOO )#line:2355:os.link(tarinfo._link_target, targetpath)
                else :#line:2356:else:
                    OO00OOO0O00OOO000 ._extract_member (OO00OOO0O00OOO000 ._find_link_target (OO0OO0OOO0O000O00 ),O00OO0000000O0OOO )#line:2358:targetpath)
        except O00OOOOOO0000O00O :#line:2359:except symlink_exception:
            if OO0OO0OOO0O000O00 .issym ():#line:2360:if tarinfo.issym():
                O00000O0000O00OOO =os .path .join (os .path .dirname (OO0OO0OOO0O000O00 .name ),OO0OO0OOO0O000O00 .linkname )#line:2362:tarinfo.linkname)
            else :#line:2363:else:
                O00000O0000O00OOO =OO0OO0OOO0O000O00 .linkname #line:2364:linkpath = tarinfo.linkname
        else :#line:2365:else:
            try :#line:2366:try:
                OO00OOO0O00OOO000 ._extract_member (OO00OOO0O00OOO000 ._find_link_target (OO0OO0OOO0O000O00 ),O00OO0000000O0OOO )#line:2368:targetpath)
            except KeyError :#line:2369:except KeyError:
                raise ExtractError ("unable to resolve link inside archive")#line:2370:raise ExtractError("unable to resolve link inside archive")
    def chown (OOOOOOO0O00000OO0 ,OOO0O0OO0O0OOO0O0 ,O0OOOO0OO00000OOO ):#line:2372:def chown(self, tarinfo, targetpath):
        ""#line:2374:"""
        if pwd and hasattr (os ,"geteuid")and os .geteuid ()==0 :#line:2375:if pwd and hasattr(os, "geteuid") and os.geteuid() == 0:
            try :#line:2377:try:
                OOO000O00O0OOO000 =grp .getgrnam (OOO0O0OO0O0OOO0O0 .gname )[2 ]#line:2378:g = grp.getgrnam(tarinfo.gname)[2]
            except KeyError :#line:2379:except KeyError:
                OOO000O00O0OOO000 =OOO0O0OO0O0OOO0O0 .gid #line:2380:g = tarinfo.gid
            try :#line:2381:try:
                OOOO0OOO0OO000OO0 =pwd .getpwnam (OOO0O0OO0O0OOO0O0 .uname )[2 ]#line:2382:u = pwd.getpwnam(tarinfo.uname)[2]
            except KeyError :#line:2383:except KeyError:
                OOOO0OOO0OO000OO0 =OOO0O0OO0O0OOO0O0 .uid #line:2384:u = tarinfo.uid
            try :#line:2385:try:
                if OOO0O0OO0O0OOO0O0 .issym ()and hasattr (os ,"lchown"):#line:2386:if tarinfo.issym() and hasattr(os, "lchown"):
                    os .lchown (O0OOOO0OO00000OOO ,OOOO0OOO0OO000OO0 ,OOO000O00O0OOO000 )#line:2387:os.lchown(targetpath, u, g)
                else :#line:2388:else:
                    if sys .platform !="os2emx":#line:2389:if sys.platform != "os2emx":
                        os .chown (O0OOOO0OO00000OOO ,OOOO0OOO0OO000OO0 ,OOO000O00O0OOO000 )#line:2390:os.chown(targetpath, u, g)
            except EnvironmentError as O0OO000OO00O00000 :#line:2391:except EnvironmentError as e:
                raise ExtractError ("could not change owner")#line:2392:raise ExtractError("could not change owner")
    def chmod (O000OO00O000000OO ,O0OO0OO0O0O0O00O0 ,O0OO000OOO00O0O0O ):#line:2394:def chmod(self, tarinfo, targetpath):
        ""#line:2396:"""
        if hasattr (os ,'chmod'):#line:2397:if hasattr(os, 'chmod'):
            try :#line:2398:try:
                os .chmod (O0OO000OOO00O0O0O ,O0OO0OO0O0O0O00O0 .mode )#line:2399:os.chmod(targetpath, tarinfo.mode)
            except EnvironmentError as OOO0O0O0O00000O0O :#line:2400:except EnvironmentError as e:
                raise ExtractError ("could not change mode")#line:2401:raise ExtractError("could not change mode")
    def utime (O000000O0O0O0O0O0 ,OO0O0O00OO000O00O ,O000O000OO00000O0 ):#line:2403:def utime(self, tarinfo, targetpath):
        ""#line:2405:"""
        if not hasattr (os ,'utime'):#line:2406:if not hasattr(os, 'utime'):
            return #line:2407:return
        try :#line:2408:try:
            os .utime (O000O000OO00000O0 ,(OO0O0O00OO000O00O .mtime ,OO0O0O00OO000O00O .mtime ))#line:2409:os.utime(targetpath, (tarinfo.mtime, tarinfo.mtime))
        except EnvironmentError as O0000O0OO000OOO0O :#line:2410:except EnvironmentError as e:
            raise ExtractError ("could not change modification time")#line:2411:raise ExtractError("could not change modification time")
    def next (O0OOO0OOOOO0O00O0 ):#line:2414:def next(self):
        ""#line:2418:"""
        O0OOO0OOOOO0O00O0 ._check ("ra")#line:2419:self._check("ra")
        if O0OOO0OOOOO0O00O0 .firstmember is not None :#line:2420:if self.firstmember is not None:
            OO00O0OO0O00OO0OO =O0OOO0OOOOO0O00O0 .firstmember #line:2421:m = self.firstmember
            O0OOO0OOOOO0O00O0 .firstmember =None #line:2422:self.firstmember = None
            return OO00O0OO0O00OO0OO #line:2423:return m
        O0OOO0OOOOO0O00O0 .fileobj .seek (O0OOO0OOOOO0O00O0 .offset )#line:2426:self.fileobj.seek(self.offset)
        O0O00OOOO000OO000 =None #line:2427:tarinfo = None
        while True :#line:2428:while True:
            try :#line:2429:try:
                O0O00OOOO000OO000 =O0OOO0OOOOO0O00O0 .tarinfo .fromtarfile (O0OOO0OOOOO0O00O0 )#line:2430:tarinfo = self.tarinfo.fromtarfile(self)
            except EOFHeaderError as O0O000OOO00OOO0O0 :#line:2431:except EOFHeaderError as e:
                if O0OOO0OOOOO0O00O0 .ignore_zeros :#line:2432:if self.ignore_zeros:
                    O0OOO0OOOOO0O00O0 ._dbg (2 ,"0x%X: %s"%(O0OOO0OOOOO0O00O0 .offset ,O0O000OOO00OOO0O0 ))#line:2433:self._dbg(2, "0x%X: %s" % (self.offset, e))
                    O0OOO0OOOOO0O00O0 .offset +=OO0000O000OO0O0O0 #line:2434:self.offset += BLOCKSIZE
                    continue #line:2435:continue
            except InvalidHeaderError as O0O000OOO00OOO0O0 :#line:2436:except InvalidHeaderError as e:
                if O0OOO0OOOOO0O00O0 .ignore_zeros :#line:2437:if self.ignore_zeros:
                    O0OOO0OOOOO0O00O0 ._dbg (2 ,"0x%X: %s"%(O0OOO0OOOOO0O00O0 .offset ,O0O000OOO00OOO0O0 ))#line:2438:self._dbg(2, "0x%X: %s" % (self.offset, e))
                    O0OOO0OOOOO0O00O0 .offset +=OO0000O000OO0O0O0 #line:2439:self.offset += BLOCKSIZE
                    continue #line:2440:continue
                elif O0OOO0OOOOO0O00O0 .offset ==0 :#line:2441:elif self.offset == 0:
                    raise ReadError (str (O0O000OOO00OOO0O0 ))#line:2442:raise ReadError(str(e))
            except EmptyHeaderError :#line:2443:except EmptyHeaderError:
                if O0OOO0OOOOO0O00O0 .offset ==0 :#line:2444:if self.offset == 0:
                    raise ReadError ("empty file")#line:2445:raise ReadError("empty file")
            except TruncatedHeaderError as O0O000OOO00OOO0O0 :#line:2446:except TruncatedHeaderError as e:
                if O0OOO0OOOOO0O00O0 .offset ==0 :#line:2447:if self.offset == 0:
                    raise ReadError (str (O0O000OOO00OOO0O0 ))#line:2448:raise ReadError(str(e))
            except SubsequentHeaderError as O0O000OOO00OOO0O0 :#line:2449:except SubsequentHeaderError as e:
                raise ReadError (str (O0O000OOO00OOO0O0 ))#line:2450:raise ReadError(str(e))
            break #line:2451:break
        if O0O00OOOO000OO000 is not None :#line:2453:if tarinfo is not None:
            O0OOO0OOOOO0O00O0 .members .append (O0O00OOOO000OO000 )#line:2454:self.members.append(tarinfo)
        else :#line:2455:else:
            O0OOO0OOOOO0O00O0 ._loaded =True #line:2456:self._loaded = True
        return O0O00OOOO000OO000 #line:2458:return tarinfo
    def _getmember (O0OOO0O0OOO0O0OO0 ,OOOOO00OOO0OO00O0 ,tarinfo =None ,normalize =False ):#line:2463:def _getmember(self, name, tarinfo=None, normalize=False):
        ""#line:2466:"""
        O0OO0000O00OOO0O0 =O0OOO0O0OOO0O0OO0 .getmembers ()#line:2468:members = self.getmembers()
        if tarinfo is not None :#line:2471:if tarinfo is not None:
            O0OO0000O00OOO0O0 =O0OO0000O00OOO0O0 [:O0OO0000O00OOO0O0 .index (tarinfo )]#line:2472:members = members[:members.index(tarinfo)]
        if normalize :#line:2474:if normalize:
            OOOOO00OOO0OO00O0 =os .path .normpath (OOOOO00OOO0OO00O0 )#line:2475:name = os.path.normpath(name)
        for O0O0OO000OO0OOO0O in reversed (O0OO0000O00OOO0O0 ):#line:2477:for member in reversed(members):
            if normalize :#line:2478:if normalize:
                O0O0OOOO0OOOO0000 =os .path .normpath (O0O0OO000OO0OOO0O .name )#line:2479:member_name = os.path.normpath(member.name)
            else :#line:2480:else:
                O0O0OOOO0OOOO0000 =O0O0OO000OO0OOO0O .name #line:2481:member_name = member.name
            if OOOOO00OOO0OO00O0 ==O0O0OOOO0OOOO0000 :#line:2483:if name == member_name:
                return O0O0OO000OO0OOO0O #line:2484:return member
    def _load (O0OOOO00O0O0OOOO0 ):#line:2486:def _load(self):
        ""#line:2489:"""
        while True :#line:2490:while True:
            OOOO0000OO0OOO0OO =O0OOOO00O0O0OOOO0 .next ()#line:2491:tarinfo = self.next()
            if OOOO0000OO0OOO0OO is None :#line:2492:if tarinfo is None:
                break #line:2493:break
        O0OOOO00O0O0OOOO0 ._loaded =True #line:2494:self._loaded = True
    def _check (OO000OO0O00OO0OOO ,mode =None ):#line:2496:def _check(self, mode=None):
        ""#line:2499:"""
        if OO000OO0O00OO0OOO .closed :#line:2500:if self.closed:
            raise IOError ("%s is closed"%OO000OO0O00OO0OOO .__class__ .__name__ )#line:2501:raise IOError("%s is closed" % self.__class__.__name__)
        if mode is not None and OO000OO0O00OO0OOO .mode not in mode :#line:2502:if mode is not None and self.mode not in mode:
            raise IOError ("bad operation for mode %r"%OO000OO0O00OO0OOO .mode )#line:2503:raise IOError("bad operation for mode %r" % self.mode)
    def _find_link_target (OO0O00OOOOOOOOO00 ,O0000OO00O00O0O0O ):#line:2505:def _find_link_target(self, tarinfo):
        ""#line:2508:"""
        if O0000OO00O00O0O0O .issym ():#line:2509:if tarinfo.issym():
            O0O0O0000O000O0O0 =os .path .dirname (O0000OO00O00O0O0O .name )+"/"+O0000OO00O00O0O0O .linkname #line:2511:linkname = os.path.dirname(tarinfo.name) + "/" + tarinfo.linkname
            OO0OO0000O00OOOOO =None #line:2512:limit = None
        else :#line:2513:else:
            O0O0O0000O000O0O0 =O0000OO00O00O0O0O .linkname #line:2516:linkname = tarinfo.linkname
            OO0OO0000O00OOOOO =O0000OO00O00O0O0O #line:2517:limit = tarinfo
        O000O0OOO000000OO =OO0O00OOOOOOOOO00 ._getmember (O0O0O0000O000O0O0 ,tarinfo =OO0OO0000O00OOOOO ,normalize =True )#line:2519:member = self._getmember(linkname, tarinfo=limit, normalize=True)
        if O000O0OOO000000OO is None :#line:2520:if member is None:
            raise KeyError ("linkname %r not found"%O0O0O0000O000O0O0 )#line:2521:raise KeyError("linkname %r not found" % linkname)
        return O000O0OOO000000OO #line:2522:return member
    def __iter__ (O00OO0O00O0O00O00 ):#line:2524:def __iter__(self):
        ""#line:2526:"""
        if O00OO0O00O0O00O00 ._loaded :#line:2527:if self._loaded:
            return iter (O00OO0O00O0O00O00 .members )#line:2528:return iter(self.members)
        else :#line:2529:else:
            return OOO0O0O000OO0OO0O (O00OO0O00O0O00O00 )#line:2530:return TarIter(self)
    def _dbg (OOO0OO00OO00O0OOO ,O0OOOOOO00OO0OO00 ,OO00O0OO000OOO0O0 ):#line:2532:def _dbg(self, level, msg):
        ""#line:2534:"""
        if O0OOOOOO00OO0OO00 <=OOO0OO00OO00O0OOO .debug :#line:2535:if level <= self.debug:
            print (OO00O0OO000OOO0O0 ,file =sys .stderr )#line:2536:print(msg, file=sys.stderr)
    def __enter__ (OO000OOOO00O00OOO ):#line:2538:def __enter__(self):
        OO000OOOO00O00OOO ._check ()#line:2539:self._check()
        return OO000OOOO00O00OOO #line:2540:return self
    def __exit__ (OO00OO0OOO0O0000O ,O0O00OO0OO0000O00 ,OO0O0O0000O00OOO0 ,O0O0O00000OO00OO0 ):#line:2542:def __exit__(self, type, value, traceback):
        if O0O00OO0OO0000O00 is None :#line:2543:if type is None:
            OO00OO0OOO0O0000O .close ()#line:2544:self.close()
        else :#line:2545:else:
            if not OO00OO0OOO0O0000O ._extfileobj :#line:2548:if not self._extfileobj:
                OO00OO0OOO0O0000O .fileobj .close ()#line:2549:self.fileobj.close()
            OO00OO0OOO0O0000O .closed =True #line:2550:self.closed = True
class OOO0O0O000OO0OO0O (object ):#line:2553:class TarIter(object):
    ""#line:2558:"""
    def __init__ (OO00O00OOOOO00OOO ,OO0O0000OO0000OOO ):#line:2560:def __init__(self, tarfile):
        ""#line:2562:"""
        OO00O00OOOOO00OOO .tarfile =OO0O0000OO0000OOO #line:2563:self.tarfile = tarfile
        OO00O00OOOOO00OOO .index =0 #line:2564:self.index = 0
    def __iter__ (OOOOOOO000O00O000 ):#line:2565:def __iter__(self):
        ""#line:2567:"""
        return OOOOOOO000O00O000 #line:2568:return self
    def __next__ (OO0O00OO0O00000OO ):#line:2570:def __next__(self):
        ""#line:2573:"""
        if not OO0O00OO0O00000OO .tarfile ._loaded :#line:2577:if not self.tarfile._loaded:
            OOO000000OOOOO000 =OO0O00OO0O00000OO .tarfile .next ()#line:2578:tarinfo = self.tarfile.next()
            if not OOO000000OOOOO000 :#line:2579:if not tarinfo:
                OO0O00OO0O00000OO .tarfile ._loaded =True #line:2580:self.tarfile._loaded = True
                raise StopIteration #line:2581:raise StopIteration
        else :#line:2582:else:
            try :#line:2583:try:
                OOO000000OOOOO000 =OO0O00OO0O00000OO .tarfile .members [OO0O00OO0O00000OO .index ]#line:2584:tarinfo = self.tarfile.members[self.index]
            except IndexError :#line:2585:except IndexError:
                raise StopIteration #line:2586:raise StopIteration
        OO0O00OO0O00000OO .index +=1 #line:2587:self.index += 1
        return OOO000000OOOOO000 #line:2588:return tarinfo
    next =__next__ #line:2590:next = __next__ # for Python 2.x
def is_tarfile (OOO0O0000OOO000OO ):#line:2595:def is_tarfile(name):
    ""#line:2598:"""
    try :#line:2599:try:
        O0OO0OO0OO0O00OOO =open (OOO0O0000OOO000OO )#line:2600:t = open(name)
        O0OO0OO0OO0O00OOO .close ()#line:2601:t.close()
        return True #line:2602:return True
    except TarError :#line:2603:except TarError:
        return False #line:2604:return False
O0OOOO0OOO00OOO00 =open #line:2606:bltn_open = open
open =TarFile .open #line:2607:open = TarFile.open
