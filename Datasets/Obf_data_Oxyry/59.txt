import inspect #line:1:import inspect
import sys #line:2:import sys
from functools import update_wrapper #line:3:from functools import update_wrapper
from ._compat import iteritems #line:5:from ._compat import iteritems
from ._unicodefun import _check_for_unicode_literals #line:6:from ._unicodefun import _check_for_unicode_literals
from .core import Argument #line:7:from .core import Argument
from .core import Command #line:8:from .core import Command
from .core import Group #line:9:from .core import Group
from .core import Option #line:10:from .core import Option
from .globals import get_current_context #line:11:from .globals import get_current_context
from .utils import echo #line:12:from .utils import echo
def pass_context (OOO00O0OOOO000OOO ):#line:15:def pass_context(f):
    ""#line:18:"""
    def OOOO0OOO00O0OOO00 (*O0O00OOOO0O0O0O0O ,**O0OOO0O00000O0O0O ):#line:20:def new_func(*args, **kwargs):
        return OOO00O0OOOO000OOO (get_current_context (),*O0O00OOOO0O0O0O0O ,**O0OOO0O00000O0O0O )#line:21:return f(get_current_context(), *args, **kwargs)
    return update_wrapper (OOOO0OOO00O0OOO00 ,OOO00O0OOOO000OOO )#line:23:return update_wrapper(new_func, f)
def pass_obj (OOO0OOO0000OO000O ):#line:26:def pass_obj(f):
    ""#line:30:"""
    def O00000O0OOOOOOO0O (*O0OO00000000OO0OO ,**OOO0O0OOO0O0OO000 ):#line:32:def new_func(*args, **kwargs):
        return OOO0OOO0000OO000O (get_current_context ().obj ,*O0OO00000000OO0OO ,**OOO0O0OOO0O0OO000 )#line:33:return f(get_current_context().obj, *args, **kwargs)
    return update_wrapper (O00000O0OOOOOOO0O ,OOO0OOO0000OO000O )#line:35:return update_wrapper(new_func, f)
def make_pass_decorator (O0OOO00OOOO00OOOO ,ensure =False ):#line:38:def make_pass_decorator(object_type, ensure=False):
    ""#line:59:"""
    def OO0OO00OOOOO0OOO0 (O00OOOO0O00O00000 ):#line:61:def decorator(f):
        def OOO000OO0O000O000 (*O0000OOOOO00O0O00 ,**O00O00O0000OOOO00 ):#line:62:def new_func(*args, **kwargs):
            OOOO00O000O000OO0 =get_current_context ()#line:63:ctx = get_current_context()
            if ensure :#line:64:if ensure:
                O0OO0000OO0OOO0OO =OOOO00O000O000OO0 .ensure_object (O0OOO00OOOO00OOOO )#line:65:obj = ctx.ensure_object(object_type)
            else :#line:66:else:
                O0OO0000OO0OOO0OO =OOOO00O000O000OO0 .find_object (O0OOO00OOOO00OOOO )#line:67:obj = ctx.find_object(object_type)
            if O0OO0000OO0OOO0OO is None :#line:68:if obj is None:
                raise RuntimeError ("Managed to invoke callback without a context" " object of type '{}' existing".format (O0OOO00OOOO00OOOO .__name__ ))#line:72:)
            return OOOO00O000O000OO0 .invoke (O00OOOO0O00O00000 ,O0OO0000OO0OOO0OO ,*O0000OOOOO00O0O00 ,**O00O00O0000OOOO00 )#line:73:return ctx.invoke(f, obj, *args, **kwargs)
        return update_wrapper (OOO000OO0O000O000 ,O00OOOO0O00O00000 )#line:75:return update_wrapper(new_func, f)
    return OO0OO00OOOOO0OOO0 #line:77:return decorator
def _OOOOOO0OOO0O0OOO0 (OO0O0OO0O00O0O00O ,OO0OOO0O000OOOO0O ,OOOO000OO0OO00O0O ,OO00O000O00OOO0O0 ):#line:80:def _make_command(f, name, attrs, cls):
    if isinstance (OO0O0OO0O00O0O00O ,Command ):#line:81:if isinstance(f, Command):
        raise TypeError ("Attempted to convert a callback into a command twice.")#line:82:raise TypeError("Attempted to convert a callback into a command twice.")
    try :#line:83:try:
        O0OOOO000000O0OO0 =OO0O0OO0O00O0O00O .__click_params__ #line:84:params = f.__click_params__
        O0OOOO000000O0OO0 .reverse ()#line:85:params.reverse()
        del OO0O0OO0O00O0O00O .__click_params__ #line:86:del f.__click_params__
    except AttributeError :#line:87:except AttributeError:
        O0OOOO000000O0OO0 =[]#line:88:params = []
    O0O0OO000OO0O0OO0 =OOOO000OO0OO00O0O .get ("help")#line:89:help = attrs.get("help")
    if O0O0OO000OO0O0OO0 is None :#line:90:if help is None:
        O0O0OO000OO0O0OO0 =inspect .getdoc (OO0O0OO0O00O0O00O )#line:91:help = inspect.getdoc(f)
        if isinstance (O0O0OO000OO0O0OO0 ,bytes ):#line:92:if isinstance(help, bytes):
            O0O0OO000OO0O0OO0 =O0O0OO000OO0O0OO0 .decode ("utf-8")#line:93:help = help.decode("utf-8")
    else :#line:94:else:
        O0O0OO000OO0O0OO0 =inspect .cleandoc (O0O0OO000OO0O0OO0 )#line:95:help = inspect.cleandoc(help)
    OOOO000OO0OO00O0O ["help"]=O0O0OO000OO0O0OO0 #line:96:attrs["help"] = help
    _check_for_unicode_literals ()#line:97:_check_for_unicode_literals()
    return OO00O000O00OOO0O0 (name =OO0OOO0O000OOOO0O or OO0O0OO0O00O0O00O .__name__ .lower ().replace ("_","-"),callback =OO0O0OO0O00O0O00O ,params =O0OOOO000000O0OO0 ,**OOOO000OO0OO00O0O )#line:103:)
def command (name =None ,cls =None ,**O00OOO0O00O0O0000 ):#line:106:def command(name=None, cls=None, **attrs):
    ""#line:125:"""
    if cls is None :#line:126:if cls is None:
        cls =Command #line:127:cls = Command
    def O0O0OO0O00OOO0O00 (OOOO000OO00O0000O ):#line:129:def decorator(f):
        O0OOO000O000O0O0O =_OOOOOO0OOO0O0OOO0 (OOOO000OO00O0000O ,name ,O00OOO0O00O0O0000 ,cls )#line:130:cmd = _make_command(f, name, attrs, cls)
        O0OOO000O000O0O0O .__doc__ =OOOO000OO00O0000O .__doc__ #line:131:cmd.__doc__ = f.__doc__
        return O0OOO000O000O0O0O #line:132:return cmd
    return O0O0OO0O00OOO0O00 #line:134:return decorator
def group (name =None ,**OO00O0O00O0OO000O ):#line:137:def group(name=None, **attrs):
    ""#line:141:"""
    OO00O0O00O0OO000O .setdefault ("cls",Group )#line:142:attrs.setdefault("cls", Group)
    return command (name ,**OO00O0O00O0OO000O )#line:143:return command(name, **attrs)
def _OO0O00OO00O00O0O0 (OOOOO0O0O000000OO ,OOOOO0O00O0O0O0OO ):#line:146:def _param_memo(f, param):
    if isinstance (OOOOO0O0O000000OO ,Command ):#line:147:if isinstance(f, Command):
        OOOOO0O0O000000OO .params .append (OOOOO0O00O0O0O0OO )#line:148:f.params.append(param)
    else :#line:149:else:
        if not hasattr (OOOOO0O0O000000OO ,"__click_params__"):#line:150:if not hasattr(f, "__click_params__"):
            OOOOO0O0O000000OO .__click_params__ =[]#line:151:f.__click_params__ = []
        OOOOO0O0O000000OO .__click_params__ .append (OOOOO0O00O0O0O0OO )#line:152:f.__click_params__.append(param)
def argument (*OOO000O0O0OOO0000 ,**OO0O0OOO0OO00OO00 ):#line:155:def argument(*param_decls, **attrs):
    ""#line:164:"""
    def O00OO0O00O0OO0O00 (O0O0OO0O0OO0O0OOO ):#line:166:def decorator(f):
        OOO0000OO00OO00O0 =OO0O0OOO0OO00OO00 .pop ("cls",Argument )#line:167:ArgumentClass = attrs.pop("cls", Argument)
        _OO0O00OO00O00O0O0 (O0O0OO0O0OO0O0OOO ,OOO0000OO00OO00O0 (OOO000O0O0OOO0000 ,**OO0O0OOO0OO00OO00 ))#line:168:_param_memo(f, ArgumentClass(param_decls, **attrs))
        return O0O0OO0O0OO0O0OOO #line:169:return f
    return O00OO0O00O0OO0O00 #line:171:return decorator
def option (*OOOOO0O00OO000000 ,**O000000O0O00O0000 ):#line:174:def option(*param_decls, **attrs):
    ""#line:183:"""
    def OOO00000000O000O0 (OO0000OOOOOO0OOOO ):#line:185:def decorator(f):
        O00O0O0000000OOOO =O000000O0O00O0000 .copy ()#line:187:option_attrs = attrs.copy()
        if "help"in O00O0O0000000OOOO :#line:189:if "help" in option_attrs:
            O00O0O0000000OOOO ["help"]=inspect .cleandoc (O00O0O0000000OOOO ["help"])#line:190:option_attrs["help"] = inspect.cleandoc(option_attrs["help"])
        O00OOOOO0000OO000 =O00O0O0000000OOOO .pop ("cls",Option )#line:191:OptionClass = option_attrs.pop("cls", Option)
        _OO0O00OO00O00O0O0 (OO0000OOOOOO0OOOO ,O00OOOOO0000OO000 (OOOOO0O00OO000000 ,**O00O0O0000000OOOO ))#line:192:_param_memo(f, OptionClass(param_decls, **option_attrs))
        return OO0000OOOOOO0OOOO #line:193:return f
    return OOO00000000O000O0 #line:195:return decorator
def confirmation_option (*O0O0000O0OOOOOO0O ,**O00OOO0OOOOO00OO0 ):#line:198:def confirmation_option(*param_decls, **attrs):
    ""#line:214:"""
    def OOO00OO00O0O0O00O (O00OOO00000000O0O ):#line:216:def decorator(f):
        def O00OO00000OO00OOO (O00OOOOOO00OO0O0O ,O0O0O00O00O000O00 ,O000OOOOO0O0O0O00 ):#line:217:def callback(ctx, param, value):
            if not O000OOOOO0O0O0O00 :#line:218:if not value:
                O00OOOOOO00OO0O0O .abort ()#line:219:ctx.abort()
        O00OOO0OOOOO00OO0 .setdefault ("is_flag",True )#line:221:attrs.setdefault("is_flag", True)
        O00OOO0OOOOO00OO0 .setdefault ("callback",O00OO00000OO00OOO )#line:222:attrs.setdefault("callback", callback)
        O00OOO0OOOOO00OO0 .setdefault ("expose_value",False )#line:223:attrs.setdefault("expose_value", False)
        O00OOO0OOOOO00OO0 .setdefault ("prompt","Do you want to continue?")#line:224:attrs.setdefault("prompt", "Do you want to continue?")
        O00OOO0OOOOO00OO0 .setdefault ("help","Confirm the action without prompting.")#line:225:attrs.setdefault("help", "Confirm the action without prompting.")
        return option (*(O0O0000O0OOOOOO0O or ("--yes",)),**O00OOO0OOOOO00OO0 )(O00OOO00000000O0O )#line:226:return option(*(param_decls or ("--yes",)), **attrs)(f)
    return OOO00OO00O0O0O00O #line:228:return decorator
def password_option (*O00O0O0O000OOOOO0 ,**OO0OO0000O00O0000 ):#line:231:def password_option(*param_decls, **attrs):
    ""#line:242:"""
    def O00OO0O0OOO0OOOOO (O000OOOO0OO00000O ):#line:244:def decorator(f):
        OO0OO0000O00O0000 .setdefault ("prompt",True )#line:245:attrs.setdefault("prompt", True)
        OO0OO0000O00O0000 .setdefault ("confirmation_prompt",True )#line:246:attrs.setdefault("confirmation_prompt", True)
        OO0OO0000O00O0000 .setdefault ("hide_input",True )#line:247:attrs.setdefault("hide_input", True)
        return option (*(O00O0O0O000OOOOO0 or ("--password",)),**OO0OO0000O00O0000 )(O000OOOO0OO00000O )#line:248:return option(*(param_decls or ("--password",)), **attrs)(f)
    return O00OO0O0OOO0OOOOO #line:250:return decorator
def version_option (version =None ,*OO0O0OO00OOOO00O0 ,**O00O0OOOO0000O0OO ):#line:253:def version_option(version=None, *param_decls, **attrs):
    ""#line:264:"""
    if version is None :#line:265:if version is None:
        if hasattr (sys ,"_getframe"):#line:266:if hasattr(sys, "_getframe"):
            O0O0O00O0OO000000 =sys ._getframe (1 ).f_globals .get ("__name__")#line:267:module = sys._getframe(1).f_globals.get("__name__")
        else :#line:268:else:
            O0O0O00O0OO000000 =""#line:269:module = ""
    def OOO00O00OO000O0OO (OO0OOO0OOOO00OOO0 ):#line:271:def decorator(f):
        O00OOOOO0O00O0O0O =O00O0OOOO0000O0OO .pop ("prog_name",None )#line:272:prog_name = attrs.pop("prog_name", None)
        O000OO0OOO0O0OOOO =O00O0OOOO0000O0OO .pop ("message","%(prog)s, version %(version)s")#line:273:message = attrs.pop("message", "%(prog)s, version %(version)s")
        def O0OO0000OOOOOOO0O (OOOOOOO0000O0OOO0 ,O0OOO0000OO0000OO ,O000000O000O0000O ):#line:275:def callback(ctx, param, value):
            if not O000000O000O0000O or OOOOOOO0000O0OOO0 .resilient_parsing :#line:276:if not value or ctx.resilient_parsing:
                return #line:277:return
            O0OOOO0OO0O0OOO0O =O00OOOOO0O00O0O0O #line:278:prog = prog_name
            if O0OOOO0OO0O0OOO0O is None :#line:279:if prog is None:
                O0OOOO0OO0O0OOO0O =OOOOOOO0000O0OOO0 .find_root ().info_name #line:280:prog = ctx.find_root().info_name
            O00OO00OO00OO0OO0 =version #line:281:ver = version
            if O00OO00OO00OO0OO0 is None :#line:282:if ver is None:
                try :#line:283:try:
                    import pkg_resources #line:284:import pkg_resources
                except ImportError :#line:285:except ImportError:
                    pass #line:286:pass
                else :#line:287:else:
                    for O00OO0O0O00O00000 in pkg_resources .working_set :#line:288:for dist in pkg_resources.working_set:
                        O0OO000O00O00000O =O00OO0O0O00O00000 .get_entry_map ().get ("console_scripts")or {}#line:289:scripts = dist.get_entry_map().get("console_scripts") or {}
                        for _O0O00O0O00OOOOO00 ,O0O0OOOO00OOOO00O in iteritems (O0OO000O00O00000O ):#line:290:for _, entry_point in iteritems(scripts):
                            if O0O0OOOO00OOOO00O .module_name ==O0O0O00O0OO000000 :#line:291:if entry_point.module_name == module:
                                O00OO00OO00OO0OO0 =O00OO0O0O00O00000 .version #line:292:ver = dist.version
                                break #line:293:break
                if O00OO00OO00OO0OO0 is None :#line:294:if ver is None:
                    raise RuntimeError ("Could not determine version")#line:295:raise RuntimeError("Could not determine version")
            echo (O000OO0OOO0O0OOOO %{"prog":O0OOOO0OO0O0OOO0O ,"version":O00OO00OO00OO0OO0 },color =OOOOOOO0000O0OOO0 .color )#line:296:echo(message % {"prog": prog, "version": ver}, color=ctx.color)
            OOOOOOO0000O0OOO0 .exit ()#line:297:ctx.exit()
        O00O0OOOO0000O0OO .setdefault ("is_flag",True )#line:299:attrs.setdefault("is_flag", True)
        O00O0OOOO0000O0OO .setdefault ("expose_value",False )#line:300:attrs.setdefault("expose_value", False)
        O00O0OOOO0000O0OO .setdefault ("is_eager",True )#line:301:attrs.setdefault("is_eager", True)
        O00O0OOOO0000O0OO .setdefault ("help","Show the version and exit.")#line:302:attrs.setdefault("help", "Show the version and exit.")
        O00O0OOOO0000O0OO ["callback"]=O0OO0000OOOOOOO0O #line:303:attrs["callback"] = callback
        return option (*(OO0O0OO00OOOO00O0 or ("--version",)),**O00O0OOOO0000O0OO )(OO0OOO0OOOO00OOO0 )#line:304:return option(*(param_decls or ("--version",)), **attrs)(f)
    return OOO00O00OO000O0OO #line:306:return decorator
def help_option (*O00O0O000O0O0OOO0 ,**OO0O0OOOOOO0OO0OO ):#line:309:def help_option(*param_decls, **attrs):
    ""#line:318:"""
    def OO0O000OO0O0OO0O0 (O0O0OO0O00O0O0O00 ):#line:320:def decorator(f):
        def OO0OOO0O0O0OOO000 (O0O0O000OOOO000OO ,OOO00O000OO000OOO ,OOO0OO000O000O00O ):#line:321:def callback(ctx, param, value):
            if OOO0OO000O000O00O and not O0O0O000OOOO000OO .resilient_parsing :#line:322:if value and not ctx.resilient_parsing:
                echo (O0O0O000OOOO000OO .get_help (),color =O0O0O000OOOO000OO .color )#line:323:echo(ctx.get_help(), color=ctx.color)
                O0O0O000OOOO000OO .exit ()#line:324:ctx.exit()
        OO0O0OOOOOO0OO0OO .setdefault ("is_flag",True )#line:326:attrs.setdefault("is_flag", True)
        OO0O0OOOOOO0OO0OO .setdefault ("expose_value",False )#line:327:attrs.setdefault("expose_value", False)
        OO0O0OOOOOO0OO0OO .setdefault ("help","Show this message and exit.")#line:328:attrs.setdefault("help", "Show this message and exit.")
        OO0O0OOOOOO0OO0OO .setdefault ("is_eager",True )#line:329:attrs.setdefault("is_eager", True)
        OO0O0OOOOOO0OO0OO ["callback"]=OO0OOO0O0O0OOO000 #line:330:attrs["callback"] = callback
        return option (*(O00O0O000O0O0OOO0 or ("--help",)),**OO0O0OOOOOO0OO0OO )(O0O0OO0O00O0O0O00 )#line:331:return option(*(param_decls or ("--help",)), **attrs)(f)
    return OO0O000OO0O0OO0O0 #line:333:return decorator
