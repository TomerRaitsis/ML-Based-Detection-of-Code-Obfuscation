from __future__ import absolute_import ,division ,unicode_literals #line:1:from __future__ import absolute_import, division, unicode_literals
from pip ._vendor .six import with_metaclass ,viewkeys #line:2:from pip._vendor.six import with_metaclass, viewkeys
import types #line:4:import types
from collections import OrderedDict #line:5:from collections import OrderedDict
from .import _inputstream #line:7:from . import _inputstream
from .import _tokenizer #line:8:from . import _tokenizer
from .import treebuilders #line:10:from . import treebuilders
from .treebuilders .base import Marker #line:11:from .treebuilders.base import Marker
from .import _utils #line:13:from . import _utils
from .constants import (spaceCharacters ,asciiUpper2Lower ,specialElements ,headingElements ,cdataElements ,rcdataElements ,tokenTypes ,tagTokenTypes ,namespaces ,htmlIntegrationPointElements ,mathmlTextIntegrationPointElements ,adjustForeignAttributes as adjustForeignAttributesMap ,adjustMathMLAttributes ,adjustSVGAttributes ,E ,_ReparseException )#line:24:)
def parse (O0O0OOOO0000OO000 ,treebuilder ="etree",namespaceHTMLElements =True ,**OOOO00O0000OOOO00 ):#line:27:def parse(doc, treebuilder="etree", namespaceHTMLElements=True, **kwargs):
    ""#line:44:"""
    OOOO00OO0OOOOO0O0 =treebuilders .getTreeBuilder (treebuilder )#line:45:tb = treebuilders.getTreeBuilder(treebuilder)
    O0000OO000O0O00O0 =HTMLParser (OOOO00OO0OOOOO0O0 ,namespaceHTMLElements =namespaceHTMLElements )#line:46:p = HTMLParser(tb, namespaceHTMLElements=namespaceHTMLElements)
    return O0000OO000O0O00O0 .parse (O0O0OOOO0000OO000 ,**OOOO00O0000OOOO00 )#line:47:return p.parse(doc, **kwargs)
def parseFragment (O0O00O00OOO0OOOOO ,container ="div",treebuilder ="etree",namespaceHTMLElements =True ,**OOO00OOO0O0O000OO ):#line:50:def parseFragment(doc, container="div", treebuilder="etree", namespaceHTMLElements=True, **kwargs):
    ""#line:69:"""
    OOOO0OOO0OO00OOO0 =treebuilders .getTreeBuilder (treebuilder )#line:70:tb = treebuilders.getTreeBuilder(treebuilder)
    OO0O0OO0OOOO0OO00 =HTMLParser (OOOO0OOO0OO00OOO0 ,namespaceHTMLElements =namespaceHTMLElements )#line:71:p = HTMLParser(tb, namespaceHTMLElements=namespaceHTMLElements)
    return OO0O0OO0OOOO0OO00 .parseFragment (O0O00O00OOO0OOOOO ,container =container ,**OOO00OOO0O0O000OO )#line:72:return p.parseFragment(doc, container=container, **kwargs)
def method_decorator_metaclass (OO00OOO0OO000OOOO ):#line:75:def method_decorator_metaclass(function):
    class OOO0OO0OOOO0O00O0 (type ):#line:76:class Decorated(type):
        def __new__ (OO0O00O00OO00O000 ,O0O00OO0O0O00O00O ,OO0OO00O000OOOO0O ,OOOO0OOO0OOO000OO ):#line:77:def __new__(meta, classname, bases, classDict):
            for OOOOO00OOOO00O00O ,O000O0O0OOO000OOO in OOOO0OOO0OOO000OO .items ():#line:78:for attributeName, attribute in classDict.items():
                if isinstance (O000O0O0OOO000OOO ,types .FunctionType ):#line:79:if isinstance(attribute, types.FunctionType):
                    O000O0O0OOO000OOO =OO00OOO0OO000OOOO (O000O0O0OOO000OOO )#line:80:attribute = function(attribute)
                OOOO0OOO0OOO000OO [OOOOO00OOOO00O00O ]=O000O0O0OOO000OOO #line:82:classDict[attributeName] = attribute
            return type .__new__ (OO0O00O00OO00O000 ,O0O00OO0O0O00O00O ,OO0OO00O000OOOO0O ,OOOO0OOO0OOO000OO )#line:83:return type.__new__(meta, classname, bases, classDict)
    return OOO0OO0OOOO0O00O0 #line:84:return Decorated
class HTMLParser (object ):#line:87:class HTMLParser(object):
    ""#line:92:"""
    def __init__ (O0O0OO00OO0OO0000 ,tree =None ,strict =False ,namespaceHTMLElements =True ,debug =False ):#line:94:def __init__(self, tree=None, strict=False, namespaceHTMLElements=True, debug=False):
        ""#line:112:"""
        O0O0OO00OO0OO0000 .strict =strict #line:115:self.strict = strict
        if tree is None :#line:117:if tree is None:
            tree =treebuilders .getTreeBuilder ("etree")#line:118:tree = treebuilders.getTreeBuilder("etree")
        O0O0OO00OO0OO0000 .tree =tree (namespaceHTMLElements )#line:119:self.tree = tree(namespaceHTMLElements)
        O0O0OO00OO0OO0000 .errors =[]#line:120:self.errors = []
        O0O0OO00OO0OO0000 .phases =dict ([(OOO0OOO000OO0O0O0 ,O0O000O0O000OOOOO (O0O0OO00OO0OO0000 ,O0O0OO00OO0OO0000 .tree ))for OOO0OOO000OO0O0O0 ,O0O000O0O000OOOOO in getPhases (debug ).items ()])#line:123:getPhases(debug).items()])
    def _parse (OOO0O00000OO00O00 ,OO00O000000O000O0 ,innerHTML =False ,container ="div",scripting =False ,**O000OO000O0O00O00 ):#line:125:def _parse(self, stream, innerHTML=False, container="div", scripting=False, **kwargs):
        OOO0O00000OO00O00 .innerHTMLMode =innerHTML #line:127:self.innerHTMLMode = innerHTML
        OOO0O00000OO00O00 .container =container #line:128:self.container = container
        OOO0O00000OO00O00 .scripting =scripting #line:129:self.scripting = scripting
        OOO0O00000OO00O00 .tokenizer =_tokenizer .HTMLTokenizer (OO00O000000O000O0 ,parser =OOO0O00000OO00O00 ,**O000OO000O0O00O00 )#line:130:self.tokenizer = _tokenizer.HTMLTokenizer(stream, parser=self, **kwargs)
        OOO0O00000OO00O00 .reset ()#line:131:self.reset()
        try :#line:133:try:
            OOO0O00000OO00O00 .mainLoop ()#line:134:self.mainLoop()
        except _ReparseException :#line:135:except _ReparseException:
            OOO0O00000OO00O00 .reset ()#line:136:self.reset()
            OOO0O00000OO00O00 .mainLoop ()#line:137:self.mainLoop()
    def reset (O0OOO0O0O0O0000OO ):#line:139:def reset(self):
        O0OOO0O0O0O0000OO .tree .reset ()#line:140:self.tree.reset()
        O0OOO0O0O0O0000OO .firstStartTag =False #line:141:self.firstStartTag = False
        O0OOO0O0O0O0000OO .errors =[]#line:142:self.errors = []
        O0OOO0O0O0O0000OO .log =[]#line:143:self.log = []  # only used with debug mode
        O0OOO0O0O0O0000OO .compatMode ="no quirks"#line:145:self.compatMode = "no quirks"
        if O0OOO0O0O0O0000OO .innerHTMLMode :#line:147:if self.innerHTMLMode:
            O0OOO0O0O0O0000OO .innerHTML =O0OOO0O0O0O0000OO .container .lower ()#line:148:self.innerHTML = self.container.lower()
            if O0OOO0O0O0O0000OO .innerHTML in cdataElements :#line:150:if self.innerHTML in cdataElements:
                O0OOO0O0O0O0000OO .tokenizer .state =O0OOO0O0O0O0000OO .tokenizer .rcdataState #line:151:self.tokenizer.state = self.tokenizer.rcdataState
            elif O0OOO0O0O0O0000OO .innerHTML in rcdataElements :#line:152:elif self.innerHTML in rcdataElements:
                O0OOO0O0O0O0000OO .tokenizer .state =O0OOO0O0O0O0000OO .tokenizer .rawtextState #line:153:self.tokenizer.state = self.tokenizer.rawtextState
            elif O0OOO0O0O0O0000OO .innerHTML =='plaintext':#line:154:elif self.innerHTML == 'plaintext':
                O0OOO0O0O0O0000OO .tokenizer .state =O0OOO0O0O0O0000OO .tokenizer .plaintextState #line:155:self.tokenizer.state = self.tokenizer.plaintextState
            else :#line:156:else:
                pass #line:159:pass
            O0OOO0O0O0O0000OO .phase =O0OOO0O0O0O0000OO .phases ["beforeHtml"]#line:160:self.phase = self.phases["beforeHtml"]
            O0OOO0O0O0O0000OO .phase .insertHtmlElement ()#line:161:self.phase.insertHtmlElement()
            O0OOO0O0O0O0000OO .resetInsertionMode ()#line:162:self.resetInsertionMode()
        else :#line:163:else:
            O0OOO0O0O0O0000OO .innerHTML =False #line:164:self.innerHTML = False  # pylint:disable=redefined-variable-type
            O0OOO0O0O0O0000OO .phase =O0OOO0O0O0O0000OO .phases ["initial"]#line:165:self.phase = self.phases["initial"]
        O0OOO0O0O0O0000OO .lastPhase =None #line:167:self.lastPhase = None
        O0OOO0O0O0O0000OO .beforeRCDataPhase =None #line:169:self.beforeRCDataPhase = None
        O0OOO0O0O0O0000OO .framesetOK =True #line:171:self.framesetOK = True
    @property #line:173:@property
    def documentEncoding (O0000OO0000O00000 ):#line:174:def documentEncoding(self):
        ""#line:178:"""
        if not hasattr (O0000OO0000O00000 ,'tokenizer'):#line:179:if not hasattr(self, 'tokenizer'):
            return None #line:180:return None
        return O0000OO0000O00000 .tokenizer .stream .charEncoding [0 ].name #line:181:return self.tokenizer.stream.charEncoding[0].name
    def isHTMLIntegrationPoint (OOOO0000OO0O000OO ,O0O0O0OOO0OOO0OOO ):#line:183:def isHTMLIntegrationPoint(self, element):
        if (O0O0O0OOO0OOO0OOO .name =="annotation-xml"and O0O0O0OOO0OOO0OOO .namespace ==namespaces ["mathml"]):#line:185:element.namespace == namespaces["mathml"]):
            return ("encoding"in O0O0O0OOO0OOO0OOO .attributes and O0O0O0OOO0OOO0OOO .attributes ["encoding"].translate (asciiUpper2Lower )in ("text/html","application/xhtml+xml"))#line:189:("text/html", "application/xhtml+xml"))
        else :#line:190:else:
            return (O0O0O0OOO0OOO0OOO .namespace ,O0O0O0OOO0OOO0OOO .name )in htmlIntegrationPointElements #line:191:return (element.namespace, element.name) in htmlIntegrationPointElements
    def isMathMLTextIntegrationPoint (OOOO0O0OOO00O00O0 ,OO000OOOOO0OO0OO0 ):#line:193:def isMathMLTextIntegrationPoint(self, element):
        return (OO000OOOOO0OO0OO0 .namespace ,OO000OOOOO0OO0OO0 .name )in mathmlTextIntegrationPointElements #line:194:return (element.namespace, element.name) in mathmlTextIntegrationPointElements
    def mainLoop (O0OOO0OOO0O0O0000 ):#line:196:def mainLoop(self):
        O0OO0O0OO00OO0O0O =tokenTypes ["Characters"]#line:197:CharactersToken = tokenTypes["Characters"]
        O000OOOOOO0OO00O0 =tokenTypes ["SpaceCharacters"]#line:198:SpaceCharactersToken = tokenTypes["SpaceCharacters"]
        O00OOO0OOOOO0000O =tokenTypes ["StartTag"]#line:199:StartTagToken = tokenTypes["StartTag"]
        OOO0O00OOOO0000O0 =tokenTypes ["EndTag"]#line:200:EndTagToken = tokenTypes["EndTag"]
        O00O0O0000OO000O0 =tokenTypes ["Comment"]#line:201:CommentToken = tokenTypes["Comment"]
        OO00OO0O0O0O00O0O =tokenTypes ["Doctype"]#line:202:DoctypeToken = tokenTypes["Doctype"]
        OO00O00O000OOO0O0 =tokenTypes ["ParseError"]#line:203:ParseErrorToken = tokenTypes["ParseError"]
        for OOO0OOOO00O00OOO0 in O0OOO0OOO0O0O0000 .normalizedTokens ():#line:205:for token in self.normalizedTokens():
            O00000OOOO00OO00O =None #line:206:prev_token = None
            O000O00O0O0O00OOO =OOO0OOOO00O00OOO0 #line:207:new_token = token
            while O000O00O0O0O00OOO is not None :#line:208:while new_token is not None:
                O00000OOOO00OO00O =O000O00O0O0O00OOO #line:209:prev_token = new_token
                OOO0OO0000000O0OO =O0OOO0OOO0O0O0000 .tree .openElements [-1 ]if O0OOO0OOO0O0O0000 .tree .openElements else None #line:210:currentNode = self.tree.openElements[-1] if self.tree.openElements else None
                O0OOO00OO0OO000O0 =OOO0OO0000000O0OO .namespace if OOO0OO0000000O0OO else None #line:211:currentNodeNamespace = currentNode.namespace if currentNode else None
                OO000O00O0O0OO000 =OOO0OO0000000O0OO .name if OOO0OO0000000O0OO else None #line:212:currentNodeName = currentNode.name if currentNode else None
                O00O000000O00O00O =O000O00O0O0O00OOO ["type"]#line:214:type = new_token["type"]
                if O00O000000O00O00O ==OO00O00O000OOO0O0 :#line:216:if type == ParseErrorToken:
                    O0OOO0OOO0O0O0000 .parseError (O000O00O0O0O00OOO ["data"],O000O00O0O0O00OOO .get ("datavars",{}))#line:217:self.parseError(new_token["data"], new_token.get("datavars", {}))
                    O000O00O0O0O00OOO =None #line:218:new_token = None
                else :#line:219:else:
                    if (len (O0OOO0OOO0O0O0000 .tree .openElements )==0 or O0OOO00OO0OO000O0 ==O0OOO0OOO0O0O0000 .tree .defaultNamespace or (O0OOO0OOO0O0O0000 .isMathMLTextIntegrationPoint (OOO0OO0000000O0OO )and ((O00O000000O00O00O ==O00OOO0OOOOO0000O and OOO0OOOO00O00OOO0 ["name"]not in frozenset (["mglyph","malignmark"]))or O00O000000O00O00O in (O0OO0O0OO00OO0O0O ,O000OOOOOO0OO00O0 )))or (O0OOO00OO0OO000O0 ==namespaces ["mathml"]and OO000O00O0O0OO000 =="annotation-xml"and O00O000000O00O00O ==O00OOO0OOOOO0000O and OOO0OOOO00O00OOO0 ["name"]=="svg")or (O0OOO0OOO0O0O0000 .isHTMLIntegrationPoint (OOO0OO0000000O0OO )and O00O000000O00O00O in (O00OOO0OOOOO0000O ,O0OO0O0OO00OO0O0O ,O000OOOOOO0OO00O0 ))):#line:231:type in (StartTagToken, CharactersToken, SpaceCharactersToken))):
                        OO0OO00OO0OOO0OO0 =O0OOO0OOO0O0O0000 .phase #line:232:phase = self.phase
                    else :#line:233:else:
                        OO0OO00OO0OOO0OO0 =O0OOO0OOO0O0O0000 .phases ["inForeignContent"]#line:234:phase = self.phases["inForeignContent"]
                    if O00O000000O00O00O ==O0OO0O0OO00OO0O0O :#line:236:if type == CharactersToken:
                        O000O00O0O0O00OOO =OO0OO00OO0OOO0OO0 .processCharacters (O000O00O0O0O00OOO )#line:237:new_token = phase.processCharacters(new_token)
                    elif O00O000000O00O00O ==O000OOOOOO0OO00O0 :#line:238:elif type == SpaceCharactersToken:
                        O000O00O0O0O00OOO =OO0OO00OO0OOO0OO0 .processSpaceCharacters (O000O00O0O0O00OOO )#line:239:new_token = phase.processSpaceCharacters(new_token)
                    elif O00O000000O00O00O ==O00OOO0OOOOO0000O :#line:240:elif type == StartTagToken:
                        O000O00O0O0O00OOO =OO0OO00OO0OOO0OO0 .processStartTag (O000O00O0O0O00OOO )#line:241:new_token = phase.processStartTag(new_token)
                    elif O00O000000O00O00O ==OOO0O00OOOO0000O0 :#line:242:elif type == EndTagToken:
                        O000O00O0O0O00OOO =OO0OO00OO0OOO0OO0 .processEndTag (O000O00O0O0O00OOO )#line:243:new_token = phase.processEndTag(new_token)
                    elif O00O000000O00O00O ==O00O0O0000OO000O0 :#line:244:elif type == CommentToken:
                        O000O00O0O0O00OOO =OO0OO00OO0OOO0OO0 .processComment (O000O00O0O0O00OOO )#line:245:new_token = phase.processComment(new_token)
                    elif O00O000000O00O00O ==OO00OO0O0O0O00O0O :#line:246:elif type == DoctypeToken:
                        O000O00O0O0O00OOO =OO0OO00OO0OOO0OO0 .processDoctype (O000O00O0O0O00OOO )#line:247:new_token = phase.processDoctype(new_token)
            if (O00O000000O00O00O ==O00OOO0OOOOO0000O and O00000OOOO00OO00O ["selfClosing"]and not O00000OOOO00OO00O ["selfClosingAcknowledged"]):#line:250:not prev_token["selfClosingAcknowledged"]):
                O0OOO0OOO0O0O0000 .parseError ("non-void-element-with-trailing-solidus",{"name":O00000OOOO00OO00O ["name"]})#line:252:{"name": prev_token["name"]})
        O0O000OOO00O00O0O =True #line:255:reprocess = True
        OO0O0OOOO0OO0O0O0 =[]#line:256:phases = []
        while O0O000OOO00O00O0O :#line:257:while reprocess:
            OO0O0OOOO0OO0O0O0 .append (O0OOO0OOO0O0O0000 .phase )#line:258:phases.append(self.phase)
            O0O000OOO00O00O0O =O0OOO0OOO0O0O0000 .phase .processEOF ()#line:259:reprocess = self.phase.processEOF()
            if O0O000OOO00O00O0O :#line:260:if reprocess:
                assert O0OOO0OOO0O0O0000 .phase not in OO0O0OOOO0OO0O0O0 #line:261:assert self.phase not in phases
    def normalizedTokens (O0O00000000OOOOOO ):#line:263:def normalizedTokens(self):
        for O00O0O0O0O0OO0000 in O0O00000000OOOOOO .tokenizer :#line:264:for token in self.tokenizer:
            yield O0O00000000OOOOOO .normalizeToken (O00O0O0O0O0OO0000 )#line:265:yield self.normalizeToken(token)
    def parse (OOO0O0OO000O0O0O0 ,OO0OO0O0OO00O000O ,*OO0OO0OO0O00O000O ,**OOOO00O0OOO00OOO0 ):#line:267:def parse(self, stream, *args, **kwargs):
        ""#line:288:"""
        OOO0O0OO000O0O0O0 ._parse (OO0OO0O0OO00O000O ,False ,None ,*OO0OO0OO0O00O000O ,**OOOO00O0OOO00OOO0 )#line:289:self._parse(stream, False, None, *args, **kwargs)
        return OOO0O0OO000O0O0O0 .tree .getDocument ()#line:290:return self.tree.getDocument()
    def parseFragment (OOOOOOOO000OO0OOO ,OOO00000O0OO0OO0O ,*O00OOOOOO00O00000 ,**O0O000O0000O00OOO ):#line:292:def parseFragment(self, stream, *args, **kwargs):
        ""#line:316:"""
        OOOOOOOO000OO0OOO ._parse (OOO00000O0OO0OO0O ,True ,*O00OOOOOO00O00000 ,**O0O000O0000O00OOO )#line:317:self._parse(stream, True, *args, **kwargs)
        return OOOOOOOO000OO0OOO .tree .getFragment ()#line:318:return self.tree.getFragment()
    def parseError (O00OO00O0OOOOO000 ,errorcode ="XXX-undefined-error",datavars =None ):#line:320:def parseError(self, errorcode="XXX-undefined-error", datavars=None):
        if datavars is None :#line:322:if datavars is None:
            datavars ={}#line:323:datavars = {}
        O00OO00O0OOOOO000 .errors .append ((O00OO00O0OOOOO000 .tokenizer .stream .position (),errorcode ,datavars ))#line:324:self.errors.append((self.tokenizer.stream.position(), errorcode, datavars))
        if O00OO00O0OOOOO000 .strict :#line:325:if self.strict:
            raise ParseError (E [errorcode ]%datavars )#line:326:raise ParseError(E[errorcode] % datavars)
    def normalizeToken (O0OO00000O0O000O0 ,O00OOOO00OOOO0OOO ):#line:328:def normalizeToken(self, token):
        if O00OOOO00OOOO0OOO ["type"]==tokenTypes ["StartTag"]:#line:330:if token["type"] == tokenTypes["StartTag"]:
            OOO000OOO00000OOO =O00OOOO00OOOO0OOO ["data"]#line:331:raw = token["data"]
            O00OOOO00OOOO0OOO ["data"]=OrderedDict (OOO000OOO00000OOO )#line:332:token["data"] = OrderedDict(raw)
            if len (OOO000OOO00000OOO )>len (O00OOOO00OOOO0OOO ["data"]):#line:333:if len(raw) > len(token["data"]):
                O00OOOO00OOOO0OOO ["data"].update (OOO000OOO00000OOO [::-1 ])#line:335:token["data"].update(raw[::-1])
        return O00OOOO00OOOO0OOO #line:337:return token
    def adjustMathMLAttributes (OOO00O0O0O0O0OO0O ,OOO0000OO000000O0 ):#line:339:def adjustMathMLAttributes(self, token):
        adjust_attributes (OOO0000OO000000O0 ,adjustMathMLAttributes )#line:340:adjust_attributes(token, adjustMathMLAttributes)
    def adjustSVGAttributes (O0O000O0O0000O0OO ,O00O00O0O00OO0OO0 ):#line:342:def adjustSVGAttributes(self, token):
        adjust_attributes (O00O00O0O00OO0OO0 ,adjustSVGAttributes )#line:343:adjust_attributes(token, adjustSVGAttributes)
    def adjustForeignAttributes (O00000OOOOOO0O000 ,O0OOOO0000OOOOOO0 ):#line:345:def adjustForeignAttributes(self, token):
        adjust_attributes (O0OOOO0000OOOOOO0 ,adjustForeignAttributesMap )#line:346:adjust_attributes(token, adjustForeignAttributesMap)
    def reparseTokenNormal (OOOOOOO0000OO0000 ,OO0O0000OOOO00000 ):#line:348:def reparseTokenNormal(self, token):
        OOOOOOO0000OO0000 .parser .phase ()#line:350:self.parser.phase()
    def resetInsertionMode (O00O000OOO0000O0O ):#line:352:def resetInsertionMode(self):
        OOO00O000OO0OOO00 =False #line:355:last = False
        O00OO0000O0OOO000 ={"select":"inSelect","td":"inCell","th":"inCell","tr":"inRow","tbody":"inTableBody","thead":"inTableBody","tfoot":"inTableBody","caption":"inCaption","colgroup":"inColumnGroup","table":"inTable","head":"inBody","body":"inBody","frameset":"inFrameset","html":"beforeHead"}#line:371:}
        for O0OOOO000OO0OOOO0 in O00O000OOO0000O0O .tree .openElements [::-1 ]:#line:372:for node in self.tree.openElements[::-1]:
            O00OO0000000OO00O =O0OOOO000OO0OOOO0 .name #line:373:nodeName = node.name
            O0O0OO0OO0O000O0O =None #line:374:new_phase = None
            if O0OOOO000OO0OOOO0 ==O00O000OOO0000O0O .tree .openElements [0 ]:#line:375:if node == self.tree.openElements[0]:
                assert O00O000OOO0000O0O .innerHTML #line:376:assert self.innerHTML
                OOO00O000OO0OOO00 =True #line:377:last = True
                O00OO0000000OO00O =O00O000OOO0000O0O .innerHTML #line:378:nodeName = self.innerHTML
            if O00OO0000000OO00O in ("select","colgroup","head","html"):#line:381:if nodeName in ("select", "colgroup", "head", "html"):
                assert O00O000OOO0000O0O .innerHTML #line:382:assert self.innerHTML
            if not OOO00O000OO0OOO00 and O0OOOO000OO0OOOO0 .namespace !=O00O000OOO0000O0O .tree .defaultNamespace :#line:384:if not last and node.namespace != self.tree.defaultNamespace:
                continue #line:385:continue
            if O00OO0000000OO00O in O00OO0000O0OOO000 :#line:387:if nodeName in newModes:
                O0O0OO0OO0O000O0O =O00O000OOO0000O0O .phases [O00OO0000O0OOO000 [O00OO0000000OO00O ]]#line:388:new_phase = self.phases[newModes[nodeName]]
                break #line:389:break
            elif OOO00O000OO0OOO00 :#line:390:elif last:
                O0O0OO0OO0O000O0O =O00O000OOO0000O0O .phases ["inBody"]#line:391:new_phase = self.phases["inBody"]
                break #line:392:break
        O00O000OOO0000O0O .phase =O0O0OO0OO0O000O0O #line:394:self.phase = new_phase
    def parseRCDataRawtext (O000OO000000O0OOO ,O000000O0O0OOOO0O ,OOOOOOOOOO0OOO000 ):#line:396:def parseRCDataRawtext(self, token, contentType):
        assert OOOOOOOOOO0OOO000 in ("RAWTEXT","RCDATA")#line:398:assert contentType in ("RAWTEXT", "RCDATA")
        O000OO000000O0OOO .tree .insertElement (O000000O0O0OOOO0O )#line:400:self.tree.insertElement(token)
        if OOOOOOOOOO0OOO000 =="RAWTEXT":#line:402:if contentType == "RAWTEXT":
            O000OO000000O0OOO .tokenizer .state =O000OO000000O0OOO .tokenizer .rawtextState #line:403:self.tokenizer.state = self.tokenizer.rawtextState
        else :#line:404:else:
            O000OO000000O0OOO .tokenizer .state =O000OO000000O0OOO .tokenizer .rcdataState #line:405:self.tokenizer.state = self.tokenizer.rcdataState
        O000OO000000O0OOO .originalPhase =O000OO000000O0OOO .phase #line:407:self.originalPhase = self.phase
        O000OO000000O0OOO .phase =O000OO000000O0OOO .phases ["text"]#line:409:self.phase = self.phases["text"]
@_utils .memoize #line:412:@_utils.memoize
def getPhases (O00O00O0OO0OO00O0 ):#line:413:def getPhases(debug):
    def O0OO0O0000O0O00O0 (OO0OOO0OO0O00OO0O ):#line:414:def log(function):
        ""#line:415:"""Logger that records which phase processes each token"""
        OO0OOO0O000O00O0O =dict ((OOO0000OOOOO0OOOO ,O0O00OOOOOO0000O0 )for O0O00OOOOOO0000O0 ,OOO0000OOOOO0OOOO in tokenTypes .items ())#line:417:tokenTypes.items())
        def OO0000000000OO0O0 (O0O0OO0OO00O0000O ,*O0000OO00OOOO0O0O ,**OO0OO00OOOO0OOOO0 ):#line:419:def wrapped(self, *args, **kwargs):
            if OO0OOO0OO0O00OO0O .__name__ .startswith ("process")and len (O0000OO00OOOO0O0O )>0 :#line:420:if function.__name__.startswith("process") and len(args) > 0:
                O0O000O000OO0O0OO =O0000OO00OOOO0O0O [0 ]#line:421:token = args[0]
                try :#line:422:try:
                    O0O0OO0O0OOO0O0O0 ={"type":OO0OOO0O000O00O0O [O0O000O000OO0O0OO ['type']]}#line:423:info = {"type": type_names[token['type']]}
                except :#line:424:except:
                    raise #line:425:raise
                if O0O000O000OO0O0OO ['type']in tagTokenTypes :#line:426:if token['type'] in tagTokenTypes:
                    O0O0OO0O0OOO0O0O0 ["name"]=O0O000O000OO0O0OO ['name']#line:427:info["name"] = token['name']
                O0O0OO0OO00O0000O .parser .log .append ((O0O0OO0OO00O0000O .parser .tokenizer .state .__name__ ,O0O0OO0OO00O0000O .parser .phase .__class__ .__name__ ,O0O0OO0OO00O0000O .__class__ .__name__ ,OO0OOO0OO0O00OO0O .__name__ ,O0O0OO0O0OOO0O0O0 ))#line:433:info))
                return OO0OOO0OO0O00OO0O (O0O0OO0OO00O0000O ,*O0000OO00OOOO0O0O ,**OO0OO00OOOO0OOOO0 )#line:434:return function(self, *args, **kwargs)
            else :#line:435:else:
                return OO0OOO0OO0O00OO0O (O0O0OO0OO00O0000O ,*O0000OO00OOOO0O0O ,**OO0OO00OOOO0OOOO0 )#line:436:return function(self, *args, **kwargs)
        return OO0000000000OO0O0 #line:437:return wrapped
    def O0O0O0OOOOO00O0OO (O00OOO00000O0O0OO ,O00O0O00O00OO0O00 ):#line:439:def getMetaclass(use_metaclass, metaclass_func):
        if O00OOO00000O0O0OO :#line:440:if use_metaclass:
            return method_decorator_metaclass (O00O0O00O00OO0O00 )#line:441:return method_decorator_metaclass(metaclass_func)
        else :#line:442:else:
            return type #line:443:return type
    class O0000OO000O0OOO00 (with_metaclass (O0O0O0OOOOO00O0OO (O00O00O0OO0OO00O0 ,O0OO0O0000O0O00O0 ))):#line:446:class Phase(with_metaclass(getMetaclass(debug, log))):
        ""#line:448:"""
        def __init__ (OOO0OO0OO0O000O0O ,OOO000O000OO0OOO0 ,O000O000O0000O0OO ):#line:450:def __init__(self, parser, tree):
            OOO0OO0OO0O000O0O .parser =OOO000O000OO0OOO0 #line:451:self.parser = parser
            OOO0OO0OO0O000O0O .tree =O000O000O0000O0OO #line:452:self.tree = tree
        def processEOF (OO0O0OOOO00OO0000 ):#line:454:def processEOF(self):
            raise NotImplementedError #line:455:raise NotImplementedError
        def processComment (OOOOO00OOOOOO0OO0 ,OOO0OOO0O0OO00O0O ):#line:457:def processComment(self, token):
            OOOOO00OOOOOO0OO0 .tree .insertComment (OOO0OOO0O0OO00O0O ,OOOOO00OOOOOO0OO0 .tree .openElements [-1 ])#line:460:self.tree.insertComment(token, self.tree.openElements[-1])
        def processDoctype (O0OOO0O0OO00O0O00 ,O00O0OO0000000OO0 ):#line:462:def processDoctype(self, token):
            O0OOO0O0OO00O0O00 .parser .parseError ("unexpected-doctype")#line:463:self.parser.parseError("unexpected-doctype")
        def processCharacters (OOO0O0O00O0O0OOO0 ,OOO00O0OO000O00O0 ):#line:465:def processCharacters(self, token):
            OOO0O0O00O0O0OOO0 .tree .insertText (OOO00O0OO000O00O0 ["data"])#line:466:self.tree.insertText(token["data"])
        def processSpaceCharacters (O0OO0O000OOOO0O0O ,O00O00O0OOO0OOO00 ):#line:468:def processSpaceCharacters(self, token):
            O0OO0O000OOOO0O0O .tree .insertText (O00O00O0OOO0OOO00 ["data"])#line:469:self.tree.insertText(token["data"])
        def processStartTag (OO0OO0000OO00OO00 ,O00OO0O000000O0O0 ):#line:471:def processStartTag(self, token):
            return OO0OO0000OO00OO00 .startTagHandler [O00OO0O000000O0O0 ["name"]](O00OO0O000000O0O0 )#line:472:return self.startTagHandler[token["name"]](token)
        def startTagHtml (OOOO00O000O000000 ,OO0O000OOOOOO000O ):#line:474:def startTagHtml(self, token):
            if not OOOO00O000O000000 .parser .firstStartTag and OO0O000OOOOOO000O ["name"]=="html":#line:475:if not self.parser.firstStartTag and token["name"] == "html":
                OOOO00O000O000000 .parser .parseError ("non-html-root")#line:476:self.parser.parseError("non-html-root")
            for OOO00O00000OOOOO0 ,OO0OO00OO00OO0O00 in OO0O000OOOOOO000O ["data"].items ():#line:479:for attr, value in token["data"].items():
                if OOO00O00000OOOOO0 not in OOOO00O000O000000 .tree .openElements [0 ].attributes :#line:480:if attr not in self.tree.openElements[0].attributes:
                    OOOO00O000O000000 .tree .openElements [0 ].attributes [OOO00O00000OOOOO0 ]=OO0OO00OO00OO0O00 #line:481:self.tree.openElements[0].attributes[attr] = value
            OOOO00O000O000000 .parser .firstStartTag =False #line:482:self.parser.firstStartTag = False
        def processEndTag (OOOO00O00OO0OOOO0 ,OOOOOO0OOOOOOO0OO ):#line:484:def processEndTag(self, token):
            return OOOO00O00OO0OOOO0 .endTagHandler [OOOOOO0OOOOOOO0OO ["name"]](OOOOOO0OOOOOOO0OO )#line:485:return self.endTagHandler[token["name"]](token)
    class OOO0OOO0OOO0OO0OO (O0000OO000O0OOO00 ):#line:487:class InitialPhase(Phase):
        def processSpaceCharacters (OO0OO0O0OO0000O00 ,OO0O0O000OOO0OO00 ):#line:488:def processSpaceCharacters(self, token):
            pass #line:489:pass
        def processComment (OOOO0OOOOO0OO0OOO ,O0O0OOO0O00O00O0O ):#line:491:def processComment(self, token):
            OOOO0OOOOO0OO0OOO .tree .insertComment (O0O0OOO0O00O00O0O ,OOOO0OOOOO0OO0OOO .tree .document )#line:492:self.tree.insertComment(token, self.tree.document)
        def processDoctype (OOOOO0OO0OO0OO000 ,OO0O0O0OO00O0OO0O ):#line:494:def processDoctype(self, token):
            OOOOOOOOO0O0O0O00 =OO0O0O0OO00O0OO0O ["name"]#line:495:name = token["name"]
            OOO0000O00OO0O0O0 =OO0O0O0OO00O0OO0O ["publicId"]#line:496:publicId = token["publicId"]
            OO00O0OO0OO000000 =OO0O0O0OO00O0OO0O ["systemId"]#line:497:systemId = token["systemId"]
            OOO0O00O00O00OO0O =OO0O0O0OO00O0OO0O ["correct"]#line:498:correct = token["correct"]
            if (OOOOOOOOO0O0O0O00 !="html"or OOO0000O00OO0O0O0 is not None or OO00O0OO0OO000000 is not None and OO00O0OO0OO000000 !="about:legacy-compat"):#line:501:systemId is not None and systemId != "about:legacy-compat"):
                OOOOO0OO0OO0OO000 .parser .parseError ("unknown-doctype")#line:502:self.parser.parseError("unknown-doctype")
            if OOO0000O00OO0O0O0 is None :#line:504:if publicId is None:
                OOO0000O00OO0O0O0 =""#line:505:publicId = ""
            OOOOO0OO0OO0OO000 .tree .insertDoctype (OO0O0O0OO00O0OO0O )#line:507:self.tree.insertDoctype(token)
            if OOO0000O00OO0O0O0 !="":#line:509:if publicId != "":
                OOO0000O00OO0O0O0 =OOO0000O00OO0O0O0 .translate (asciiUpper2Lower )#line:510:publicId = publicId.translate(asciiUpper2Lower)
            if (not OOO0O00O00O00OO0O or OO0O0O0OO00O0OO0O ["name"]!="html"or OOO0000O00OO0O0O0 .startswith (("+//silmaril//dtd html pro v0r11 19970101//","-//advasoft ltd//dtd html 3.0 aswedit + extensions//","-//as//dtd html 3.0 aswedit + extensions//","-//ietf//dtd html 2.0 level 1//","-//ietf//dtd html 2.0 level 2//","-//ietf//dtd html 2.0 strict level 1//","-//ietf//dtd html 2.0 strict level 2//","-//ietf//dtd html 2.0 strict//","-//ietf//dtd html 2.0//","-//ietf//dtd html 2.1e//","-//ietf//dtd html 3.0//","-//ietf//dtd html 3.2 final//","-//ietf//dtd html 3.2//","-//ietf//dtd html 3//","-//ietf//dtd html level 0//","-//ietf//dtd html level 1//","-//ietf//dtd html level 2//","-//ietf//dtd html level 3//","-//ietf//dtd html strict level 0//","-//ietf//dtd html strict level 1//","-//ietf//dtd html strict level 2//","-//ietf//dtd html strict level 3//","-//ietf//dtd html strict//","-//ietf//dtd html//","-//metrius//dtd metrius presentational//","-//microsoft//dtd internet explorer 2.0 html strict//","-//microsoft//dtd internet explorer 2.0 html//","-//microsoft//dtd internet explorer 2.0 tables//","-//microsoft//dtd internet explorer 3.0 html strict//","-//microsoft//dtd internet explorer 3.0 html//","-//microsoft//dtd internet explorer 3.0 tables//","-//netscape comm. corp.//dtd html//","-//netscape comm. corp.//dtd strict html//","-//o'reilly and associates//dtd html 2.0//","-//o'reilly and associates//dtd html extended 1.0//","-//o'reilly and associates//dtd html extended relaxed 1.0//","-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//","-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//","-//spyglass//dtd html 2.0 extended//","-//sq//dtd html 2.0 hotmetal + extensions//","-//sun microsystems corp.//dtd hotjava html//","-//sun microsystems corp.//dtd hotjava strict html//","-//w3c//dtd html 3 1995-03-24//","-//w3c//dtd html 3.2 draft//","-//w3c//dtd html 3.2 final//","-//w3c//dtd html 3.2//","-//w3c//dtd html 3.2s draft//","-//w3c//dtd html 4.0 frameset//","-//w3c//dtd html 4.0 transitional//","-//w3c//dtd html experimental 19960712//","-//w3c//dtd html experimental 970421//","-//w3c//dtd w3 html//","-//w3o//dtd w3 html 3.0//","-//webtechs//dtd mozilla html 2.0//","-//webtechs//dtd mozilla html//"))or OOO0000O00OO0O0O0 in ("-//w3o//dtd w3 html strict 3.0//en//","-/w3c/dtd html 4.0 transitional/en","html")or OOO0000O00OO0O0O0 .startswith (("-//w3c//dtd html 4.01 frameset//","-//w3c//dtd html 4.01 transitional//"))and OO00O0OO0OO000000 is None or OO00O0OO0OO000000 and OO00O0OO0OO000000 .lower ()=="http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd"):#line:576:systemId and systemId.lower() == "http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd"):
                OOOOO0OO0OO0OO000 .parser .compatMode ="quirks"#line:577:self.parser.compatMode = "quirks"
            elif (OOO0000O00OO0O0O0 .startswith (("-//w3c//dtd xhtml 1.0 frameset//","-//w3c//dtd xhtml 1.0 transitional//"))or OOO0000O00OO0O0O0 .startswith (("-//w3c//dtd html 4.01 frameset//","-//w3c//dtd html 4.01 transitional//"))and OO00O0OO0OO000000 is not None ):#line:584:systemId is not None):
                OOOOO0OO0OO0OO000 .parser .compatMode ="limited quirks"#line:585:self.parser.compatMode = "limited quirks"
            OOOOO0OO0OO0OO000 .parser .phase =OOOOO0OO0OO0OO000 .parser .phases ["beforeHtml"]#line:587:self.parser.phase = self.parser.phases["beforeHtml"]
        def anythingElse (O0O00OO0OOO000O00 ):#line:589:def anythingElse(self):
            O0O00OO0OOO000O00 .parser .compatMode ="quirks"#line:590:self.parser.compatMode = "quirks"
            O0O00OO0OOO000O00 .parser .phase =O0O00OO0OOO000O00 .parser .phases ["beforeHtml"]#line:591:self.parser.phase = self.parser.phases["beforeHtml"]
        def processCharacters (OO0000OO00O0OO0O0 ,O0000OOOO0OO00000 ):#line:593:def processCharacters(self, token):
            OO0000OO00O0OO0O0 .parser .parseError ("expected-doctype-but-got-chars")#line:594:self.parser.parseError("expected-doctype-but-got-chars")
            OO0000OO00O0OO0O0 .anythingElse ()#line:595:self.anythingElse()
            return O0000OOOO0OO00000 #line:596:return token
        def processStartTag (O0O00O000O0O0000O ,O00OOOO0OOOOO00O0 ):#line:598:def processStartTag(self, token):
            O0O00O000O0O0000O .parser .parseError ("expected-doctype-but-got-start-tag",{"name":O00OOOO0OOOOO00O0 ["name"]})#line:600:{"name": token["name"]})
            O0O00O000O0O0000O .anythingElse ()#line:601:self.anythingElse()
            return O00OOOO0OOOOO00O0 #line:602:return token
        def processEndTag (OOO00OOO00OOOO0O0 ,OO00O0O00O00O0O0O ):#line:604:def processEndTag(self, token):
            OOO00OOO00OOOO0O0 .parser .parseError ("expected-doctype-but-got-end-tag",{"name":OO00O0O00O00O0O0O ["name"]})#line:606:{"name": token["name"]})
            OOO00OOO00OOOO0O0 .anythingElse ()#line:607:self.anythingElse()
            return OO00O0O00O00O0O0O #line:608:return token
        def processEOF (OOOOOO0O000OOO0OO ):#line:610:def processEOF(self):
            OOOOOO0O000OOO0OO .parser .parseError ("expected-doctype-but-got-eof")#line:611:self.parser.parseError("expected-doctype-but-got-eof")
            OOOOOO0O000OOO0OO .anythingElse ()#line:612:self.anythingElse()
            return True #line:613:return True
    class O0OOOO0OO000000OO (O0000OO000O0OOO00 ):#line:615:class BeforeHtmlPhase(Phase):
        def insertHtmlElement (O0O0OOO0O00O0O00O ):#line:617:def insertHtmlElement(self):
            O0O0OOO0O00O0O00O .tree .insertRoot (impliedTagToken ("html","StartTag"))#line:618:self.tree.insertRoot(impliedTagToken("html", "StartTag"))
            O0O0OOO0O00O0O00O .parser .phase =O0O0OOO0O00O0O00O .parser .phases ["beforeHead"]#line:619:self.parser.phase = self.parser.phases["beforeHead"]
        def processEOF (O0OO0O000O0OOOOO0 ):#line:622:def processEOF(self):
            O0OO0O000O0OOOOO0 .insertHtmlElement ()#line:623:self.insertHtmlElement()
            return True #line:624:return True
        def processComment (OOOOO0O0O0000O0O0 ,O0O0OO00OOO00O0O0 ):#line:626:def processComment(self, token):
            OOOOO0O0O0000O0O0 .tree .insertComment (O0O0OO00OOO00O0O0 ,OOOOO0O0O0000O0O0 .tree .document )#line:627:self.tree.insertComment(token, self.tree.document)
        def processSpaceCharacters (OO000O0O00O0OOO00 ,OOOOO00000OO0OO0O ):#line:629:def processSpaceCharacters(self, token):
            pass #line:630:pass
        def processCharacters (OO00OOOOO0OOOO00O ,OOO00O0OO0O000000 ):#line:632:def processCharacters(self, token):
            OO00OOOOO0OOOO00O .insertHtmlElement ()#line:633:self.insertHtmlElement()
            return OOO00O0OO0O000000 #line:634:return token
        def processStartTag (O00O000O0000O00OO ,O0O00OOO0OOOOOOOO ):#line:636:def processStartTag(self, token):
            if O0O00OOO0OOOOOOOO ["name"]=="html":#line:637:if token["name"] == "html":
                O00O000O0000O00OO .parser .firstStartTag =True #line:638:self.parser.firstStartTag = True
            O00O000O0000O00OO .insertHtmlElement ()#line:639:self.insertHtmlElement()
            return O0O00OOO0OOOOOOOO #line:640:return token
        def processEndTag (O0O00OO0000O0O0OO ,O00OOOOOOOO00O000 ):#line:642:def processEndTag(self, token):
            if O00OOOOOOOO00O000 ["name"]not in ("head","body","html","br"):#line:643:if token["name"] not in ("head", "body", "html", "br"):
                O0O00OO0000O0O0OO .parser .parseError ("unexpected-end-tag-before-html",{"name":O00OOOOOOOO00O000 ["name"]})#line:645:{"name": token["name"]})
            else :#line:646:else:
                O0O00OO0000O0O0OO .insertHtmlElement ()#line:647:self.insertHtmlElement()
                return O00OOOOOOOO00O000 #line:648:return token
    class O0OO000OO00O0000O (O0000OO000O0OOO00 ):#line:650:class BeforeHeadPhase(Phase):
        def __init__ (O00O0OOOO0O00O0O0 ,O00OOO00O00O0O000 ,OO00OOO00OOOOOOOO ):#line:651:def __init__(self, parser, tree):
            O0000OO000O0OOO00 .__init__ (O00O0OOOO0O00O0O0 ,O00OOO00O00O0O000 ,OO00OOO00OOOOOOOO )#line:652:Phase.__init__(self, parser, tree)
            O00O0OOOO0O00O0O0 .startTagHandler =_utils .MethodDispatcher ([("html",O00O0OOOO0O00O0O0 .startTagHtml ),("head",O00O0OOOO0O00O0O0 .startTagHead )])#line:657:])
            O00O0OOOO0O00O0O0 .startTagHandler .default =O00O0OOOO0O00O0O0 .startTagOther #line:658:self.startTagHandler.default = self.startTagOther
            O00O0OOOO0O00O0O0 .endTagHandler =_utils .MethodDispatcher ([(("head","body","html","br"),O00O0OOOO0O00O0O0 .endTagImplyHead )])#line:662:])
            O00O0OOOO0O00O0O0 .endTagHandler .default =O00O0OOOO0O00O0O0 .endTagOther #line:663:self.endTagHandler.default = self.endTagOther
        def processEOF (O00OOOO00OO00O0OO ):#line:665:def processEOF(self):
            O00OOOO00OO00O0OO .startTagHead (impliedTagToken ("head","StartTag"))#line:666:self.startTagHead(impliedTagToken("head", "StartTag"))
            return True #line:667:return True
        def processSpaceCharacters (O0O0OOO0O0O00OO0O ,O00O0OO0000O0OOO0 ):#line:669:def processSpaceCharacters(self, token):
            pass #line:670:pass
        def processCharacters (O00OO0OO0O00O00OO ,OOOOOO0000O0OOOOO ):#line:672:def processCharacters(self, token):
            O00OO0OO0O00O00OO .startTagHead (impliedTagToken ("head","StartTag"))#line:673:self.startTagHead(impliedTagToken("head", "StartTag"))
            return OOOOOO0000O0OOOOO #line:674:return token
        def startTagHtml (O0O00O00OO0OOO0OO ,O0000O0OOOOO0O00O ):#line:676:def startTagHtml(self, token):
            return O0O00O00OO0OOO0OO .parser .phases ["inBody"].processStartTag (O0000O0OOOOO0O00O )#line:677:return self.parser.phases["inBody"].processStartTag(token)
        def startTagHead (O0000OOOO00O0O000 ,O0OOOOOOOOO0OOO0O ):#line:679:def startTagHead(self, token):
            O0000OOOO00O0O000 .tree .insertElement (O0OOOOOOOOO0OOO0O )#line:680:self.tree.insertElement(token)
            O0000OOOO00O0O000 .tree .headPointer =O0000OOOO00O0O000 .tree .openElements [-1 ]#line:681:self.tree.headPointer = self.tree.openElements[-1]
            O0000OOOO00O0O000 .parser .phase =O0000OOOO00O0O000 .parser .phases ["inHead"]#line:682:self.parser.phase = self.parser.phases["inHead"]
        def startTagOther (O0OOO00O0O0OO000O ,O00OOOOO00OOOOOO0 ):#line:684:def startTagOther(self, token):
            O0OOO00O0O0OO000O .startTagHead (impliedTagToken ("head","StartTag"))#line:685:self.startTagHead(impliedTagToken("head", "StartTag"))
            return O00OOOOO00OOOOOO0 #line:686:return token
        def endTagImplyHead (OO000O0OOOO0OO0O0 ,OO00OO0OO0O000O0O ):#line:688:def endTagImplyHead(self, token):
            OO000O0OOOO0OO0O0 .startTagHead (impliedTagToken ("head","StartTag"))#line:689:self.startTagHead(impliedTagToken("head", "StartTag"))
            return OO00OO0OO0O000O0O #line:690:return token
        def endTagOther (O0000OO0O0OO00O00 ,O0OO0O0O0O00OO000 ):#line:692:def endTagOther(self, token):
            O0000OO0O0OO00O00 .parser .parseError ("end-tag-after-implied-root",{"name":O0OO0O0O0O00OO000 ["name"]})#line:694:{"name": token["name"]})
    class OO0O0OOO0O0OOOOO0 (O0000OO000O0OOO00 ):#line:696:class InHeadPhase(Phase):
        def __init__ (O0O0OO00O000000OO ,O0O0OOOOO00OOO0O0 ,O000OO000O000OO0O ):#line:697:def __init__(self, parser, tree):
            O0000OO000O0OOO00 .__init__ (O0O0OO00O000000OO ,O0O0OOOOO00OOO0O0 ,O000OO000O000OO0O )#line:698:Phase.__init__(self, parser, tree)
            O0O0OO00O000000OO .startTagHandler =_utils .MethodDispatcher ([("html",O0O0OO00O000000OO .startTagHtml ),("title",O0O0OO00O000000OO .startTagTitle ),(("noframes","style"),O0O0OO00O000000OO .startTagNoFramesStyle ),("noscript",O0O0OO00O000000OO .startTagNoscript ),("script",O0O0OO00O000000OO .startTagScript ),(("base","basefont","bgsound","command","link"),O0O0OO00O000000OO .startTagBaseLinkCommand ),("meta",O0O0OO00O000000OO .startTagMeta ),("head",O0O0OO00O000000OO .startTagHead )])#line:710:])
            O0O0OO00O000000OO .startTagHandler .default =O0O0OO00O000000OO .startTagOther #line:711:self.startTagHandler.default = self.startTagOther
            O0O0OO00O000000OO .endTagHandler =_utils .MethodDispatcher ([("head",O0O0OO00O000000OO .endTagHead ),(("br","html","body"),O0O0OO00O000000OO .endTagHtmlBodyBr )])#line:716:])
            O0O0OO00O000000OO .endTagHandler .default =O0O0OO00O000000OO .endTagOther #line:717:self.endTagHandler.default = self.endTagOther
        def processEOF (OO0OOO00O000O0OO0 ):#line:720:def processEOF(self):
            OO0OOO00O000O0OO0 .anythingElse ()#line:721:self.anythingElse()
            return True #line:722:return True
        def processCharacters (O00OO0O0O0OOO0OO0 ,O000OO0OO0OOO0000 ):#line:724:def processCharacters(self, token):
            O00OO0O0O0OOO0OO0 .anythingElse ()#line:725:self.anythingElse()
            return O000OO0OO0OOO0000 #line:726:return token
        def startTagHtml (O00O00000OOOO00O0 ,O0OOO0OOO00OO0OO0 ):#line:728:def startTagHtml(self, token):
            return O00O00000OOOO00O0 .parser .phases ["inBody"].processStartTag (O0OOO0OOO00OO0OO0 )#line:729:return self.parser.phases["inBody"].processStartTag(token)
        def startTagHead (OOOOOOO0O0OO0OO00 ,O0OOO0O00OOO0OO0O ):#line:731:def startTagHead(self, token):
            OOOOOOO0O0OO0OO00 .parser .parseError ("two-heads-are-not-better-than-one")#line:732:self.parser.parseError("two-heads-are-not-better-than-one")
        def startTagBaseLinkCommand (OOO0OO0O000OO00O0 ,OOOO000000OO0O0OO ):#line:734:def startTagBaseLinkCommand(self, token):
            OOO0OO0O000OO00O0 .tree .insertElement (OOOO000000OO0O0OO )#line:735:self.tree.insertElement(token)
            OOO0OO0O000OO00O0 .tree .openElements .pop ()#line:736:self.tree.openElements.pop()
            OOOO000000OO0O0OO ["selfClosingAcknowledged"]=True #line:737:token["selfClosingAcknowledged"] = True
        def startTagMeta (OO0O0O0OO0OOOOOO0 ,OO000O0O0OOO0000O ):#line:739:def startTagMeta(self, token):
            OO0O0O0OO0OOOOOO0 .tree .insertElement (OO000O0O0OOO0000O )#line:740:self.tree.insertElement(token)
            OO0O0O0OO0OOOOOO0 .tree .openElements .pop ()#line:741:self.tree.openElements.pop()
            OO000O0O0OOO0000O ["selfClosingAcknowledged"]=True #line:742:token["selfClosingAcknowledged"] = True
            OOO0O0000OOO0OO00 =OO000O0O0OOO0000O ["data"]#line:744:attributes = token["data"]
            if OO0O0O0OO0OOOOOO0 .parser .tokenizer .stream .charEncoding [1 ]=="tentative":#line:745:if self.parser.tokenizer.stream.charEncoding[1] == "tentative":
                if "charset"in OOO0O0000OOO0OO00 :#line:746:if "charset" in attributes:
                    OO0O0O0OO0OOOOOO0 .parser .tokenizer .stream .changeEncoding (OOO0O0000OOO0OO00 ["charset"])#line:747:self.parser.tokenizer.stream.changeEncoding(attributes["charset"])
                elif ("content"in OOO0O0000OOO0OO00 and "http-equiv"in OOO0O0000OOO0OO00 and OOO0O0000OOO0OO00 ["http-equiv"].lower ()=="content-type"):#line:750:attributes["http-equiv"].lower() == "content-type"):
                    O0O000000000OO00O =_inputstream .EncodingBytes (OOO0O0000OOO0OO00 ["content"].encode ("utf-8"))#line:755:data = _inputstream.EncodingBytes(attributes["content"].encode("utf-8"))
                    O0OOOOO00000000O0 =_inputstream .ContentAttrParser (O0O000000000OO00O )#line:756:parser = _inputstream.ContentAttrParser(data)
                    OO0000OO00O00O0OO =O0OOOOO00000000O0 .parse ()#line:757:codec = parser.parse()
                    OO0O0O0OO0OOOOOO0 .parser .tokenizer .stream .changeEncoding (OO0000OO00O00O0OO )#line:758:self.parser.tokenizer.stream.changeEncoding(codec)
        def startTagTitle (OO00OO0000O00OO00 ,OO000000O00O0O00O ):#line:760:def startTagTitle(self, token):
            OO00OO0000O00OO00 .parser .parseRCDataRawtext (OO000000O00O0O00O ,"RCDATA")#line:761:self.parser.parseRCDataRawtext(token, "RCDATA")
        def startTagNoFramesStyle (O0O00000O0OO0O00O ,O0OOO00OOOOOO00O0 ):#line:763:def startTagNoFramesStyle(self, token):
            O0O00000O0OO0O00O .parser .parseRCDataRawtext (O0OOO00OOOOOO00O0 ,"RAWTEXT")#line:765:self.parser.parseRCDataRawtext(token, "RAWTEXT")
        def startTagNoscript (O0O00OO000OOO00O0 ,OOO000000000O0O00 ):#line:767:def startTagNoscript(self, token):
            if O0O00OO000OOO00O0 .parser .scripting :#line:768:if self.parser.scripting:
                O0O00OO000OOO00O0 .parser .parseRCDataRawtext (OOO000000000O0O00 ,"RAWTEXT")#line:769:self.parser.parseRCDataRawtext(token, "RAWTEXT")
            else :#line:770:else:
                O0O00OO000OOO00O0 .tree .insertElement (OOO000000000O0O00 )#line:771:self.tree.insertElement(token)
                O0O00OO000OOO00O0 .parser .phase =O0O00OO000OOO00O0 .parser .phases ["inHeadNoscript"]#line:772:self.parser.phase = self.parser.phases["inHeadNoscript"]
        def startTagScript (O0OOOO000OOOO0000 ,O0OO0O00O0OOO0000 ):#line:774:def startTagScript(self, token):
            O0OOOO000OOOO0000 .tree .insertElement (O0OO0O00O0OOO0000 )#line:775:self.tree.insertElement(token)
            O0OOOO000OOOO0000 .parser .tokenizer .state =O0OOOO000OOOO0000 .parser .tokenizer .scriptDataState #line:776:self.parser.tokenizer.state = self.parser.tokenizer.scriptDataState
            O0OOOO000OOOO0000 .parser .originalPhase =O0OOOO000OOOO0000 .parser .phase #line:777:self.parser.originalPhase = self.parser.phase
            O0OOOO000OOOO0000 .parser .phase =O0OOOO000OOOO0000 .parser .phases ["text"]#line:778:self.parser.phase = self.parser.phases["text"]
        def startTagOther (OO0O0O000O0OOO0O0 ,O0O0O00000O0OO0O0 ):#line:780:def startTagOther(self, token):
            OO0O0O000O0OOO0O0 .anythingElse ()#line:781:self.anythingElse()
            return O0O0O00000O0OO0O0 #line:782:return token
        def endTagHead (O0OOO0O00OOOO00OO ,O0O00OOOOO0OO00OO ):#line:784:def endTagHead(self, token):
            OOO000O0OO0O00000 =O0OOO0O00OOOO00OO .parser .tree .openElements .pop ()#line:785:node = self.parser.tree.openElements.pop()
            assert OOO000O0OO0O00000 .name =="head","Expected head got %s"%OOO000O0OO0O00000 .name #line:786:assert node.name == "head", "Expected head got %s" % node.name
            O0OOO0O00OOOO00OO .parser .phase =O0OOO0O00OOOO00OO .parser .phases ["afterHead"]#line:787:self.parser.phase = self.parser.phases["afterHead"]
        def endTagHtmlBodyBr (O000O0O0000OOOOO0 ,O0OO0OOOOOOO0O000 ):#line:789:def endTagHtmlBodyBr(self, token):
            O000O0O0000OOOOO0 .anythingElse ()#line:790:self.anythingElse()
            return O0OO0OOOOOOO0O000 #line:791:return token
        def endTagOther (OO0O0OO00O0000O00 ,O0OOO00OOOOOO000O ):#line:793:def endTagOther(self, token):
            OO0O0OO00O0000O00 .parser .parseError ("unexpected-end-tag",{"name":O0OOO00OOOOOO000O ["name"]})#line:794:self.parser.parseError("unexpected-end-tag", {"name": token["name"]})
        def anythingElse (OOOOO000O0OO0OO0O ):#line:796:def anythingElse(self):
            OOOOO000O0OO0OO0O .endTagHead (impliedTagToken ("head"))#line:797:self.endTagHead(impliedTagToken("head"))
    class OO00OO0O0O000OO00 (O0000OO000O0OOO00 ):#line:799:class InHeadNoscriptPhase(Phase):
        def __init__ (O000O0O00O0O000OO ,OOO0O000OOOO00000 ,OOOO0OO000OOOO000 ):#line:800:def __init__(self, parser, tree):
            O0000OO000O0OOO00 .__init__ (O000O0O00O0O000OO ,OOO0O000OOOO00000 ,OOOO0OO000OOOO000 )#line:801:Phase.__init__(self, parser, tree)
            O000O0O00O0O000OO .startTagHandler =_utils .MethodDispatcher ([("html",O000O0O00O0O000OO .startTagHtml ),(("basefont","bgsound","link","meta","noframes","style"),O000O0O00O0O000OO .startTagBaseLinkCommand ),(("head","noscript"),O000O0O00O0O000OO .startTagHeadNoscript ),])#line:807:])
            O000O0O00O0O000OO .startTagHandler .default =O000O0O00O0O000OO .startTagOther #line:808:self.startTagHandler.default = self.startTagOther
            O000O0O00O0O000OO .endTagHandler =_utils .MethodDispatcher ([("noscript",O000O0O00O0O000OO .endTagNoscript ),("br",O000O0O00O0O000OO .endTagBr ),])#line:813:])
            O000O0O00O0O000OO .endTagHandler .default =O000O0O00O0O000OO .endTagOther #line:814:self.endTagHandler.default = self.endTagOther
        def processEOF (O00OO00OO0OOOO00O ):#line:816:def processEOF(self):
            O00OO00OO0OOOO00O .parser .parseError ("eof-in-head-noscript")#line:817:self.parser.parseError("eof-in-head-noscript")
            O00OO00OO0OOOO00O .anythingElse ()#line:818:self.anythingElse()
            return True #line:819:return True
        def processComment (OO0OO0OO0O0OO000O ,OOOOOO0OOOO000000 ):#line:821:def processComment(self, token):
            return OO0OO0OO0O0OO000O .parser .phases ["inHead"].processComment (OOOOOO0OOOO000000 )#line:822:return self.parser.phases["inHead"].processComment(token)
        def processCharacters (OO00OO0O000O00OO0 ,O0O00000000O0O000 ):#line:824:def processCharacters(self, token):
            OO00OO0O000O00OO0 .parser .parseError ("char-in-head-noscript")#line:825:self.parser.parseError("char-in-head-noscript")
            OO00OO0O000O00OO0 .anythingElse ()#line:826:self.anythingElse()
            return O0O00000000O0O000 #line:827:return token
        def processSpaceCharacters (OO000OO00000O00OO ,OOOOOOO00OOO0OOOO ):#line:829:def processSpaceCharacters(self, token):
            return OO000OO00000O00OO .parser .phases ["inHead"].processSpaceCharacters (OOOOOOO00OOO0OOOO )#line:830:return self.parser.phases["inHead"].processSpaceCharacters(token)
        def startTagHtml (OO00OOOO00O0O0O0O ,OOOOO0O0O0OO0O000 ):#line:832:def startTagHtml(self, token):
            return OO00OOOO00O0O0O0O .parser .phases ["inBody"].processStartTag (OOOOO0O0O0OO0O000 )#line:833:return self.parser.phases["inBody"].processStartTag(token)
        def startTagBaseLinkCommand (O000O0O0000000O0O ,O000O0000O0OO000O ):#line:835:def startTagBaseLinkCommand(self, token):
            return O000O0O0000000O0O .parser .phases ["inHead"].processStartTag (O000O0000O0OO000O )#line:836:return self.parser.phases["inHead"].processStartTag(token)
        def startTagHeadNoscript (OOO0OO0000OOO0OO0 ,O0O0O0O0OOO00O00O ):#line:838:def startTagHeadNoscript(self, token):
            OOO0OO0000OOO0OO0 .parser .parseError ("unexpected-start-tag",{"name":O0O0O0O0OOO00O00O ["name"]})#line:839:self.parser.parseError("unexpected-start-tag", {"name": token["name"]})
        def startTagOther (OOOOO00O00O000O0O ,O0OO0OOO0OO00O00O ):#line:841:def startTagOther(self, token):
            OOOOO00O00O000O0O .parser .parseError ("unexpected-inhead-noscript-tag",{"name":O0OO0OOO0OO00O00O ["name"]})#line:842:self.parser.parseError("unexpected-inhead-noscript-tag", {"name": token["name"]})
            OOOOO00O00O000O0O .anythingElse ()#line:843:self.anythingElse()
            return O0OO0OOO0OO00O00O #line:844:return token
        def endTagNoscript (OOO0000O0O0O00O00 ,OO000OO0O00OOOOO0 ):#line:846:def endTagNoscript(self, token):
            OOO000O00000O0OO0 =OOO0000O0O0O00O00 .parser .tree .openElements .pop ()#line:847:node = self.parser.tree.openElements.pop()
            assert OOO000O00000O0OO0 .name =="noscript","Expected noscript got %s"%OOO000O00000O0OO0 .name #line:848:assert node.name == "noscript", "Expected noscript got %s" % node.name
            OOO0000O0O0O00O00 .parser .phase =OOO0000O0O0O00O00 .parser .phases ["inHead"]#line:849:self.parser.phase = self.parser.phases["inHead"]
        def endTagBr (OOO0O0OOOO0OOOOOO ,OO000OO000000O00O ):#line:851:def endTagBr(self, token):
            OOO0O0OOOO0OOOOOO .parser .parseError ("unexpected-inhead-noscript-tag",{"name":OO000OO000000O00O ["name"]})#line:852:self.parser.parseError("unexpected-inhead-noscript-tag", {"name": token["name"]})
            OOO0O0OOOO0OOOOOO .anythingElse ()#line:853:self.anythingElse()
            return OO000OO000000O00O #line:854:return token
        def endTagOther (OOO00O0OO000OOOO0 ,O0OOO00OO0OOOOOOO ):#line:856:def endTagOther(self, token):
            OOO00O0OO000OOOO0 .parser .parseError ("unexpected-end-tag",{"name":O0OOO00OO0OOOOOOO ["name"]})#line:857:self.parser.parseError("unexpected-end-tag", {"name": token["name"]})
        def anythingElse (O0OOO00OO0O00OO0O ):#line:859:def anythingElse(self):
            O0OOO00OO0O00OO0O .endTagNoscript (impliedTagToken ("noscript"))#line:861:self.endTagNoscript(impliedTagToken("noscript"))
    class O00OOO0O0O0O0OO0O (O0000OO000O0OOO00 ):#line:863:class AfterHeadPhase(Phase):
        def __init__ (O0OOO000O0OO00OO0 ,O00000O00O0OO0OO0 ,O0OO0OOO0000O00OO ):#line:864:def __init__(self, parser, tree):
            O0000OO000O0OOO00 .__init__ (O0OOO000O0OO00OO0 ,O00000O00O0OO0OO0 ,O0OO0OOO0000O00OO )#line:865:Phase.__init__(self, parser, tree)
            O0OOO000O0OO00OO0 .startTagHandler =_utils .MethodDispatcher ([("html",O0OOO000O0OO00OO0 .startTagHtml ),("body",O0OOO000O0OO00OO0 .startTagBody ),("frameset",O0OOO000O0OO00OO0 .startTagFrameset ),(("base","basefont","bgsound","link","meta","noframes","script","style","title"),O0OOO000O0OO00OO0 .startTagFromHead ),("head",O0OOO000O0OO00OO0 .startTagHead )])#line:875:])
            O0OOO000O0OO00OO0 .startTagHandler .default =O0OOO000O0OO00OO0 .startTagOther #line:876:self.startTagHandler.default = self.startTagOther
            O0OOO000O0OO00OO0 .endTagHandler =_utils .MethodDispatcher ([(("body","html","br"),O0OOO000O0OO00OO0 .endTagHtmlBodyBr )])#line:878:self.endTagHtmlBodyBr)])
            O0OOO000O0OO00OO0 .endTagHandler .default =O0OOO000O0OO00OO0 .endTagOther #line:879:self.endTagHandler.default = self.endTagOther
        def processEOF (OO00O0OO0O00O0OOO ):#line:881:def processEOF(self):
            OO00O0OO0O00O0OOO .anythingElse ()#line:882:self.anythingElse()
            return True #line:883:return True
        def processCharacters (OOOOOO0O0O00O0OO0 ,OO0OOOO0O0OOO0OOO ):#line:885:def processCharacters(self, token):
            OOOOOO0O0O00O0OO0 .anythingElse ()#line:886:self.anythingElse()
            return OO0OOOO0O0OOO0OOO #line:887:return token
        def startTagHtml (O00O0O0OOOOO00OO0 ,O0OO0O0OO00OOOOO0 ):#line:889:def startTagHtml(self, token):
            return O00O0O0OOOOO00OO0 .parser .phases ["inBody"].processStartTag (O0OO0O0OO00OOOOO0 )#line:890:return self.parser.phases["inBody"].processStartTag(token)
        def startTagBody (OOO0OOO00O00O000O ,OOOO0O000OOOOOO00 ):#line:892:def startTagBody(self, token):
            OOO0OOO00O00O000O .parser .framesetOK =False #line:893:self.parser.framesetOK = False
            OOO0OOO00O00O000O .tree .insertElement (OOOO0O000OOOOOO00 )#line:894:self.tree.insertElement(token)
            OOO0OOO00O00O000O .parser .phase =OOO0OOO00O00O000O .parser .phases ["inBody"]#line:895:self.parser.phase = self.parser.phases["inBody"]
        def startTagFrameset (OOO0O0O00O000O00O ,OO0OO0OO00OO0000O ):#line:897:def startTagFrameset(self, token):
            OOO0O0O00O000O00O .tree .insertElement (OO0OO0OO00OO0000O )#line:898:self.tree.insertElement(token)
            OOO0O0O00O000O00O .parser .phase =OOO0O0O00O000O00O .parser .phases ["inFrameset"]#line:899:self.parser.phase = self.parser.phases["inFrameset"]
        def startTagFromHead (O0OO0OOO0OO00000O ,OO0O0OO00O00OOO00 ):#line:901:def startTagFromHead(self, token):
            O0OO0OOO0OO00000O .parser .parseError ("unexpected-start-tag-out-of-my-head",{"name":OO0O0OO00O00OOO00 ["name"]})#line:903:{"name": token["name"]})
            O0OO0OOO0OO00000O .tree .openElements .append (O0OO0OOO0OO00000O .tree .headPointer )#line:904:self.tree.openElements.append(self.tree.headPointer)
            O0OO0OOO0OO00000O .parser .phases ["inHead"].processStartTag (OO0O0OO00O00OOO00 )#line:905:self.parser.phases["inHead"].processStartTag(token)
            for OO0000O00OOO0O00O in O0OO0OOO0OO00000O .tree .openElements [::-1 ]:#line:906:for node in self.tree.openElements[::-1]:
                if OO0000O00OOO0O00O .name =="head":#line:907:if node.name == "head":
                    O0OO0OOO0OO00000O .tree .openElements .remove (OO0000O00OOO0O00O )#line:908:self.tree.openElements.remove(node)
                    break #line:909:break
        def startTagHead (OO00OOOO0O000000O ,O000O0O0O00OO0OOO ):#line:911:def startTagHead(self, token):
            OO00OOOO0O000000O .parser .parseError ("unexpected-start-tag",{"name":O000O0O0O00OO0OOO ["name"]})#line:912:self.parser.parseError("unexpected-start-tag", {"name": token["name"]})
        def startTagOther (O0O0O0OO0OOO00OOO ,OOO0OOOOO00OO0000 ):#line:914:def startTagOther(self, token):
            O0O0O0OO0OOO00OOO .anythingElse ()#line:915:self.anythingElse()
            return OOO0OOOOO00OO0000 #line:916:return token
        def endTagHtmlBodyBr (O0O000OO0000OOOO0 ,O000OO0O00000O0O0 ):#line:918:def endTagHtmlBodyBr(self, token):
            O0O000OO0000OOOO0 .anythingElse ()#line:919:self.anythingElse()
            return O000OO0O00000O0O0 #line:920:return token
        def endTagOther (O0OO00OO0O0O0000O ,OO000000000OOO000 ):#line:922:def endTagOther(self, token):
            O0OO00OO0O0O0000O .parser .parseError ("unexpected-end-tag",{"name":OO000000000OOO000 ["name"]})#line:923:self.parser.parseError("unexpected-end-tag", {"name": token["name"]})
        def anythingElse (OO00000OO0OOO0000 ):#line:925:def anythingElse(self):
            OO00000OO0OOO0000 .tree .insertElement (impliedTagToken ("body","StartTag"))#line:926:self.tree.insertElement(impliedTagToken("body", "StartTag"))
            OO00000OO0OOO0000 .parser .phase =OO00000OO0OOO0000 .parser .phases ["inBody"]#line:927:self.parser.phase = self.parser.phases["inBody"]
            OO00000OO0OOO0000 .parser .framesetOK =True #line:928:self.parser.framesetOK = True
    class O000OOOO000OO000O (O0000OO000O0OOO00 ):#line:930:class InBodyPhase(Phase):
        def __init__ (O00O000O0OO0O0O00 ,O0OO000O0OO0OOO00 ,O000O0OOOO0OO0O0O ):#line:933:def __init__(self, parser, tree):
            O0000OO000O0OOO00 .__init__ (O00O000O0OO0O0O00 ,O0OO000O0OO0OOO00 ,O000O0OOOO0OO0O0O )#line:934:Phase.__init__(self, parser, tree)
            O00O000O0OO0O0O00 .processSpaceCharacters =O00O000O0OO0O0O00 .processSpaceCharactersNonPre #line:937:self.processSpaceCharacters = self.processSpaceCharactersNonPre
            O00O000O0OO0O0O00 .startTagHandler =_utils .MethodDispatcher ([("html",O00O000O0OO0O0O00 .startTagHtml ),(("base","basefont","bgsound","command","link","meta","script","style","title"),O00O000O0OO0O0O00 .startTagProcessInHead ),("body",O00O000O0OO0O0O00 .startTagBody ),("frameset",O00O000O0OO0O0O00 .startTagFrameset ),(("address","article","aside","blockquote","center","details","dir","div","dl","fieldset","figcaption","figure","footer","header","hgroup","main","menu","nav","ol","p","section","summary","ul"),O00O000O0OO0O0O00 .startTagCloseP ),(headingElements ,O00O000O0OO0O0O00 .startTagHeading ),(("pre","listing"),O00O000O0OO0O0O00 .startTagPreListing ),("form",O00O000O0OO0O0O00 .startTagForm ),(("li","dd","dt"),O00O000O0OO0O0O00 .startTagListItem ),("plaintext",O00O000O0OO0O0O00 .startTagPlaintext ),("a",O00O000O0OO0O0O00 .startTagA ),(("b","big","code","em","font","i","s","small","strike","strong","tt","u"),O00O000O0OO0O0O00 .startTagFormatting ),("nobr",O00O000O0OO0O0O00 .startTagNobr ),("button",O00O000O0OO0O0O00 .startTagButton ),(("applet","marquee","object"),O00O000O0OO0O0O00 .startTagAppletMarqueeObject ),("xmp",O00O000O0OO0O0O00 .startTagXmp ),("table",O00O000O0OO0O0O00 .startTagTable ),(("area","br","embed","img","keygen","wbr"),O00O000O0OO0O0O00 .startTagVoidFormatting ),(("param","source","track"),O00O000O0OO0O0O00 .startTagParamSource ),("input",O00O000O0OO0O0O00 .startTagInput ),("hr",O00O000O0OO0O0O00 .startTagHr ),("image",O00O000O0OO0O0O00 .startTagImage ),("isindex",O00O000O0OO0O0O00 .startTagIsIndex ),("textarea",O00O000O0OO0O0O00 .startTagTextarea ),("iframe",O00O000O0OO0O0O00 .startTagIFrame ),("noscript",O00O000O0OO0O0O00 .startTagNoscript ),(("noembed","noframes"),O00O000O0OO0O0O00 .startTagRawtext ),("select",O00O000O0OO0O0O00 .startTagSelect ),(("rp","rt"),O00O000O0OO0O0O00 .startTagRpRt ),(("option","optgroup"),O00O000O0OO0O0O00 .startTagOpt ),(("math"),O00O000O0OO0O0O00 .startTagMath ),(("svg"),O00O000O0OO0O0O00 .startTagSvg ),(("caption","col","colgroup","frame","head","tbody","td","tfoot","th","thead","tr"),O00O000O0OO0O0O00 .startTagMisplaced )])#line:983:])
            O00O000O0OO0O0O00 .startTagHandler .default =O00O000O0OO0O0O00 .startTagOther #line:984:self.startTagHandler.default = self.startTagOther
            O00O000O0OO0O0O00 .endTagHandler =_utils .MethodDispatcher ([("body",O00O000O0OO0O0O00 .endTagBody ),("html",O00O000O0OO0O0O00 .endTagHtml ),(("address","article","aside","blockquote","button","center","details","dialog","dir","div","dl","fieldset","figcaption","figure","footer","header","hgroup","listing","main","menu","nav","ol","pre","section","summary","ul"),O00O000O0OO0O0O00 .endTagBlock ),("form",O00O000O0OO0O0O00 .endTagForm ),("p",O00O000O0OO0O0O00 .endTagP ),(("dd","dt","li"),O00O000O0OO0O0O00 .endTagListItem ),(headingElements ,O00O000O0OO0O0O00 .endTagHeading ),(("a","b","big","code","em","font","i","nobr","s","small","strike","strong","tt","u"),O00O000O0OO0O0O00 .endTagFormatting ),(("applet","marquee","object"),O00O000O0OO0O0O00 .endTagAppletMarqueeObject ),("br",O00O000O0OO0O0O00 .endTagBr ),])#line:1001:])
            O00O000O0OO0O0O00 .endTagHandler .default =O00O000O0OO0O0O00 .endTagOther #line:1002:self.endTagHandler.default = self.endTagOther
        def isMatchingFormattingElement (O0OO0O00OOO0O0O00 ,OOOO00000O00000O0 ,O0O0OO0O0OOO0OO00 ):#line:1004:def isMatchingFormattingElement(self, node1, node2):
            return (OOOO00000O00000O0 .name ==O0O0OO0O0OOO0OO00 .name and OOOO00000O00000O0 .namespace ==O0O0OO0O0OOO0OO00 .namespace and OOOO00000O00000O0 .attributes ==O0O0OO0O0OOO0OO00 .attributes )#line:1007:node1.attributes == node2.attributes)
        def addFormattingElement (O0O0000OOO00O0000 ,O000O0O0O000000O0 ):#line:1010:def addFormattingElement(self, token):
            O0O0000OOO00O0000 .tree .insertElement (O000O0O0O000000O0 )#line:1011:self.tree.insertElement(token)
            O0000OOOO000OOO00 =O0O0000OOO00O0000 .tree .openElements [-1 ]#line:1012:element = self.tree.openElements[-1]
            OOOOO0000000OO0OO =[]#line:1014:matchingElements = []
            for O0O00OOOOO000OOO0 in O0O0000OOO00O0000 .tree .activeFormattingElements [::-1 ]:#line:1015:for node in self.tree.activeFormattingElements[::-1]:
                if O0O00OOOOO000OOO0 is Marker :#line:1016:if node is Marker:
                    break #line:1017:break
                elif O0O0000OOO00O0000 .isMatchingFormattingElement (O0O00OOOOO000OOO0 ,O0000OOOO000OOO00 ):#line:1018:elif self.isMatchingFormattingElement(node, element):
                    OOOOO0000000OO0OO .append (O0O00OOOOO000OOO0 )#line:1019:matchingElements.append(node)
            assert len (OOOOO0000000OO0OO )<=3 #line:1021:assert len(matchingElements) <= 3
            if len (OOOOO0000000OO0OO )==3 :#line:1022:if len(matchingElements) == 3:
                O0O0000OOO00O0000 .tree .activeFormattingElements .remove (OOOOO0000000OO0OO [-1 ])#line:1023:self.tree.activeFormattingElements.remove(matchingElements[-1])
            O0O0000OOO00O0000 .tree .activeFormattingElements .append (O0000OOOO000OOO00 )#line:1024:self.tree.activeFormattingElements.append(element)
        def processEOF (O0O0O0O0OO0OOO00O ):#line:1027:def processEOF(self):
            O0O0OOOOOOOOO0000 =frozenset (("dd","dt","li","p","tbody","td","tfoot","th","thead","tr","body","html"))#line:1030:"html"))
            for O0O0OO0OO00000OOO in O0O0O0O0OO0OOO00O .tree .openElements [::-1 ]:#line:1031:for node in self.tree.openElements[::-1]:
                if O0O0OO0OO00000OOO .name not in O0O0OOOOOOOOO0000 :#line:1032:if node.name not in allowed_elements:
                    O0O0O0O0OO0OOO00O .parser .parseError ("expected-closing-tag-but-got-eof")#line:1033:self.parser.parseError("expected-closing-tag-but-got-eof")
                    break #line:1034:break
        def processSpaceCharactersDropNewline (OO00OOOOOO00OO00O ,O0OO0000O0O0O0000 ):#line:1037:def processSpaceCharactersDropNewline(self, token):
            O0O0O00000000O0O0 =O0OO0000O0O0O0000 ["data"]#line:1040:data = token["data"]
            OO00OOOOOO00OO00O .processSpaceCharacters =OO00OOOOOO00OO00O .processSpaceCharactersNonPre #line:1041:self.processSpaceCharacters = self.processSpaceCharactersNonPre
            if (O0O0O00000000O0O0 .startswith ("\n")and OO00OOOOOO00OO00O .tree .openElements [-1 ].name in ("pre","listing","textarea")and not OO00OOOOOO00OO00O .tree .openElements [-1 ].hasContent ()):#line:1044:not self.tree.openElements[-1].hasContent()):
                O0O0O00000000O0O0 =O0O0O00000000O0O0 [1 :]#line:1045:data = data[1:]
            if O0O0O00000000O0O0 :#line:1046:if data:
                OO00OOOOOO00OO00O .tree .reconstructActiveFormattingElements ()#line:1047:self.tree.reconstructActiveFormattingElements()
                OO00OOOOOO00OO00O .tree .insertText (O0O0O00000000O0O0 )#line:1048:self.tree.insertText(data)
        def processCharacters (OO00O0OOO0000OOOO ,OOO0O0O00O0O0O000 ):#line:1050:def processCharacters(self, token):
            if OOO0O0O00O0O0O000 ["data"]=="\u0000":#line:1051:if token["data"] == "\u0000":
                return #line:1053:return
            OO00O0OOO0000OOOO .tree .reconstructActiveFormattingElements ()#line:1054:self.tree.reconstructActiveFormattingElements()
            OO00O0OOO0000OOOO .tree .insertText (OOO0O0O00O0O0O000 ["data"])#line:1055:self.tree.insertText(token["data"])
            if (OO00O0OOO0000OOOO .parser .framesetOK and any ([OOOO000O0OO00OO00 not in spaceCharacters for OOOO000O0OO00OO00 in OOO0O0O00O0O0O000 ["data"]])):#line:1059:for char in token["data"]])):
                OO00O0OOO0000OOOO .parser .framesetOK =False #line:1060:self.parser.framesetOK = False
        def processSpaceCharactersNonPre (OOO0OO0O00000OO0O ,OO00OO0OOOO000O00 ):#line:1062:def processSpaceCharactersNonPre(self, token):
            OOO0OO0O00000OO0O .tree .reconstructActiveFormattingElements ()#line:1063:self.tree.reconstructActiveFormattingElements()
            OOO0OO0O00000OO0O .tree .insertText (OO00OO0OOOO000O00 ["data"])#line:1064:self.tree.insertText(token["data"])
        def startTagProcessInHead (O0OO0O000OO0O0OO0 ,OOOOOO00OOO0OO00O ):#line:1066:def startTagProcessInHead(self, token):
            return O0OO0O000OO0O0OO0 .parser .phases ["inHead"].processStartTag (OOOOOO00OOO0OO00O )#line:1067:return self.parser.phases["inHead"].processStartTag(token)
        def startTagBody (OOO0OO00O00O0000O ,O0O00OO000000O000 ):#line:1069:def startTagBody(self, token):
            OOO0OO00O00O0000O .parser .parseError ("unexpected-start-tag",{"name":"body"})#line:1070:self.parser.parseError("unexpected-start-tag", {"name": "body"})
            if (len (OOO0OO00O00O0000O .tree .openElements )==1 or OOO0OO00O00O0000O .tree .openElements [1 ].name !="body"):#line:1072:self.tree.openElements[1].name != "body"):
                assert OOO0OO00O00O0000O .parser .innerHTML #line:1073:assert self.parser.innerHTML
            else :#line:1074:else:
                OOO0OO00O00O0000O .parser .framesetOK =False #line:1075:self.parser.framesetOK = False
                for O00O00O0000O00OO0 ,O00OOO0O00O0O0OOO in O0O00OO000000O000 ["data"].items ():#line:1076:for attr, value in token["data"].items():
                    if O00O00O0000O00OO0 not in OOO0OO00O00O0000O .tree .openElements [1 ].attributes :#line:1077:if attr not in self.tree.openElements[1].attributes:
                        OOO0OO00O00O0000O .tree .openElements [1 ].attributes [O00O00O0000O00OO0 ]=O00OOO0O00O0O0OOO #line:1078:self.tree.openElements[1].attributes[attr] = value
        def startTagFrameset (OOO0000O000O0O00O ,OOOOOOO00O0OO000O ):#line:1080:def startTagFrameset(self, token):
            OOO0000O000O0O00O .parser .parseError ("unexpected-start-tag",{"name":"frameset"})#line:1081:self.parser.parseError("unexpected-start-tag", {"name": "frameset"})
            if (len (OOO0000O000O0O00O .tree .openElements )==1 or OOO0000O000O0O00O .tree .openElements [1 ].name !="body"):#line:1082:if (len(self.tree.openElements) == 1 or self.tree.openElements[1].name != "body"):
                assert OOO0000O000O0O00O .parser .innerHTML #line:1083:assert self.parser.innerHTML
            elif not OOO0000O000O0O00O .parser .framesetOK :#line:1084:elif not self.parser.framesetOK:
                pass #line:1085:pass
            else :#line:1086:else:
                if OOO0000O000O0O00O .tree .openElements [1 ].parent :#line:1087:if self.tree.openElements[1].parent:
                    OOO0000O000O0O00O .tree .openElements [1 ].parent .removeChild (OOO0000O000O0O00O .tree .openElements [1 ])#line:1088:self.tree.openElements[1].parent.removeChild(self.tree.openElements[1])
                while OOO0000O000O0O00O .tree .openElements [-1 ].name !="html":#line:1089:while self.tree.openElements[-1].name != "html":
                    OOO0000O000O0O00O .tree .openElements .pop ()#line:1090:self.tree.openElements.pop()
                OOO0000O000O0O00O .tree .insertElement (OOOOOOO00O0OO000O )#line:1091:self.tree.insertElement(token)
                OOO0000O000O0O00O .parser .phase =OOO0000O000O0O00O .parser .phases ["inFrameset"]#line:1092:self.parser.phase = self.parser.phases["inFrameset"]
        def startTagCloseP (O00O0OOO0O000O00O ,OO0OO00000OO00O00 ):#line:1094:def startTagCloseP(self, token):
            if O00O0OOO0O000O00O .tree .elementInScope ("p",variant ="button"):#line:1095:if self.tree.elementInScope("p", variant="button"):
                O00O0OOO0O000O00O .endTagP (impliedTagToken ("p"))#line:1096:self.endTagP(impliedTagToken("p"))
            O00O0OOO0O000O00O .tree .insertElement (OO0OO00000OO00O00 )#line:1097:self.tree.insertElement(token)
        def startTagPreListing (OO000OOOO00O0OOO0 ,O0O000000OOO00O0O ):#line:1099:def startTagPreListing(self, token):
            if OO000OOOO00O0OOO0 .tree .elementInScope ("p",variant ="button"):#line:1100:if self.tree.elementInScope("p", variant="button"):
                OO000OOOO00O0OOO0 .endTagP (impliedTagToken ("p"))#line:1101:self.endTagP(impliedTagToken("p"))
            OO000OOOO00O0OOO0 .tree .insertElement (O0O000000OOO00O0O )#line:1102:self.tree.insertElement(token)
            OO000OOOO00O0OOO0 .parser .framesetOK =False #line:1103:self.parser.framesetOK = False
            OO000OOOO00O0OOO0 .processSpaceCharacters =OO000OOOO00O0OOO0 .processSpaceCharactersDropNewline #line:1104:self.processSpaceCharacters = self.processSpaceCharactersDropNewline
        def startTagForm (OOO00O000O00OOO00 ,O0O00O0OOO0OO00O0 ):#line:1106:def startTagForm(self, token):
            if OOO00O000O00OOO00 .tree .formPointer :#line:1107:if self.tree.formPointer:
                OOO00O000O00OOO00 .parser .parseError ("unexpected-start-tag",{"name":"form"})#line:1108:self.parser.parseError("unexpected-start-tag", {"name": "form"})
            else :#line:1109:else:
                if OOO00O000O00OOO00 .tree .elementInScope ("p",variant ="button"):#line:1110:if self.tree.elementInScope("p", variant="button"):
                    OOO00O000O00OOO00 .endTagP (impliedTagToken ("p"))#line:1111:self.endTagP(impliedTagToken("p"))
                OOO00O000O00OOO00 .tree .insertElement (O0O00O0OOO0OO00O0 )#line:1112:self.tree.insertElement(token)
                OOO00O000O00OOO00 .tree .formPointer =OOO00O000O00OOO00 .tree .openElements [-1 ]#line:1113:self.tree.formPointer = self.tree.openElements[-1]
        def startTagListItem (O0O0O000O00O0O00O ,OOOOO0O00OO0OO000 ):#line:1115:def startTagListItem(self, token):
            O0O0O000O00O0O00O .parser .framesetOK =False #line:1116:self.parser.framesetOK = False
            O00O00OO0O0OO000O ={"li":["li"],"dt":["dt","dd"],"dd":["dt","dd"]}#line:1120:"dd": ["dt", "dd"]}
            O0OOO000O000OO00O =O00O00OO0O0OO000O [OOOOO0O00OO0OO000 ["name"]]#line:1121:stopNames = stopNamesMap[token["name"]]
            for OO00O0O00OO000O0O in reversed (O0O0O000O00O0O00O .tree .openElements ):#line:1122:for node in reversed(self.tree.openElements):
                if OO00O0O00OO000O0O .name in O0OOO000O000OO00O :#line:1123:if node.name in stopNames:
                    O0O0O000O00O0O00O .parser .phase .processEndTag (impliedTagToken (OO00O0O00OO000O0O .name ,"EndTag"))#line:1125:impliedTagToken(node.name, "EndTag"))
                    break #line:1126:break
                if (OO00O0O00OO000O0O .nameTuple in specialElements and OO00O0O00OO000O0O .name not in ("address","div","p")):#line:1128:node.name not in ("address", "div", "p")):
                    break #line:1129:break
            if O0O0O000O00O0O00O .tree .elementInScope ("p",variant ="button"):#line:1131:if self.tree.elementInScope("p", variant="button"):
                O0O0O000O00O0O00O .parser .phase .processEndTag (impliedTagToken ("p","EndTag"))#line:1133:impliedTagToken("p", "EndTag"))
            O0O0O000O00O0O00O .tree .insertElement (OOOOO0O00OO0OO000 )#line:1135:self.tree.insertElement(token)
        def startTagPlaintext (O00OO0OOO0OOOO000 ,OO0OOOOO00OOO000O ):#line:1137:def startTagPlaintext(self, token):
            if O00OO0OOO0OOOO000 .tree .elementInScope ("p",variant ="button"):#line:1138:if self.tree.elementInScope("p", variant="button"):
                O00OO0OOO0OOOO000 .endTagP (impliedTagToken ("p"))#line:1139:self.endTagP(impliedTagToken("p"))
            O00OO0OOO0OOOO000 .tree .insertElement (OO0OOOOO00OOO000O )#line:1140:self.tree.insertElement(token)
            O00OO0OOO0OOOO000 .parser .tokenizer .state =O00OO0OOO0OOOO000 .parser .tokenizer .plaintextState #line:1141:self.parser.tokenizer.state = self.parser.tokenizer.plaintextState
        def startTagHeading (OO000000O0O0OO000 ,O0000O00000O0000O ):#line:1143:def startTagHeading(self, token):
            if OO000000O0O0OO000 .tree .elementInScope ("p",variant ="button"):#line:1144:if self.tree.elementInScope("p", variant="button"):
                OO000000O0O0OO000 .endTagP (impliedTagToken ("p"))#line:1145:self.endTagP(impliedTagToken("p"))
            if OO000000O0O0OO000 .tree .openElements [-1 ].name in headingElements :#line:1146:if self.tree.openElements[-1].name in headingElements:
                OO000000O0O0OO000 .parser .parseError ("unexpected-start-tag",{"name":O0000O00000O0000O ["name"]})#line:1147:self.parser.parseError("unexpected-start-tag", {"name": token["name"]})
                OO000000O0O0OO000 .tree .openElements .pop ()#line:1148:self.tree.openElements.pop()
            OO000000O0O0OO000 .tree .insertElement (O0000O00000O0000O )#line:1149:self.tree.insertElement(token)
        def startTagA (OOOOO00O0OOO000O0 ,OOOOOOO000OOOO0O0 ):#line:1151:def startTagA(self, token):
            OOO0OOO0O00O000O0 =OOOOO00O0OOO000O0 .tree .elementInActiveFormattingElements ("a")#line:1152:afeAElement = self.tree.elementInActiveFormattingElements("a")
            if OOO0OOO0O00O000O0 :#line:1153:if afeAElement:
                OOOOO00O0OOO000O0 .parser .parseError ("unexpected-start-tag-implies-end-tag",{"startName":"a","endName":"a"})#line:1155:{"startName": "a", "endName": "a"})
                OOOOO00O0OOO000O0 .endTagFormatting (impliedTagToken ("a"))#line:1156:self.endTagFormatting(impliedTagToken("a"))
                if OOO0OOO0O00O000O0 in OOOOO00O0OOO000O0 .tree .openElements :#line:1157:if afeAElement in self.tree.openElements:
                    OOOOO00O0OOO000O0 .tree .openElements .remove (OOO0OOO0O00O000O0 )#line:1158:self.tree.openElements.remove(afeAElement)
                if OOO0OOO0O00O000O0 in OOOOO00O0OOO000O0 .tree .activeFormattingElements :#line:1159:if afeAElement in self.tree.activeFormattingElements:
                    OOOOO00O0OOO000O0 .tree .activeFormattingElements .remove (OOO0OOO0O00O000O0 )#line:1160:self.tree.activeFormattingElements.remove(afeAElement)
            OOOOO00O0OOO000O0 .tree .reconstructActiveFormattingElements ()#line:1161:self.tree.reconstructActiveFormattingElements()
            OOOOO00O0OOO000O0 .addFormattingElement (OOOOOOO000OOOO0O0 )#line:1162:self.addFormattingElement(token)
        def startTagFormatting (OO0OOO000O0O00OO0 ,OOOOO0OOO00000O00 ):#line:1164:def startTagFormatting(self, token):
            OO0OOO000O0O00OO0 .tree .reconstructActiveFormattingElements ()#line:1165:self.tree.reconstructActiveFormattingElements()
            OO0OOO000O0O00OO0 .addFormattingElement (OOOOO0OOO00000O00 )#line:1166:self.addFormattingElement(token)
        def startTagNobr (OO0O000O0O0OOOO00 ,OOO00OO000O00OOO0 ):#line:1168:def startTagNobr(self, token):
            OO0O000O0O0OOOO00 .tree .reconstructActiveFormattingElements ()#line:1169:self.tree.reconstructActiveFormattingElements()
            if OO0O000O0O0OOOO00 .tree .elementInScope ("nobr"):#line:1170:if self.tree.elementInScope("nobr"):
                OO0O000O0O0OOOO00 .parser .parseError ("unexpected-start-tag-implies-end-tag",{"startName":"nobr","endName":"nobr"})#line:1172:{"startName": "nobr", "endName": "nobr"})
                OO0O000O0O0OOOO00 .processEndTag (impliedTagToken ("nobr"))#line:1173:self.processEndTag(impliedTagToken("nobr"))
                OO0O000O0O0OOOO00 .tree .reconstructActiveFormattingElements ()#line:1175:self.tree.reconstructActiveFormattingElements()
            OO0O000O0O0OOOO00 .addFormattingElement (OOO00OO000O00OOO0 )#line:1176:self.addFormattingElement(token)
        def startTagButton (OOOOO00OO00O000OO ,OOO0000000000OO00 ):#line:1178:def startTagButton(self, token):
            if OOOOO00OO00O000OO .tree .elementInScope ("button"):#line:1179:if self.tree.elementInScope("button"):
                OOOOO00OO00O000OO .parser .parseError ("unexpected-start-tag-implies-end-tag",{"startName":"button","endName":"button"})#line:1181:{"startName": "button", "endName": "button"})
                OOOOO00OO00O000OO .processEndTag (impliedTagToken ("button"))#line:1182:self.processEndTag(impliedTagToken("button"))
                return OOO0000000000OO00 #line:1183:return token
            else :#line:1184:else:
                OOOOO00OO00O000OO .tree .reconstructActiveFormattingElements ()#line:1185:self.tree.reconstructActiveFormattingElements()
                OOOOO00OO00O000OO .tree .insertElement (OOO0000000000OO00 )#line:1186:self.tree.insertElement(token)
                OOOOO00OO00O000OO .parser .framesetOK =False #line:1187:self.parser.framesetOK = False
        def startTagAppletMarqueeObject (O0OO00O0O000OO000 ,O0O000OOOOO0OOOOO ):#line:1189:def startTagAppletMarqueeObject(self, token):
            O0OO00O0O000OO000 .tree .reconstructActiveFormattingElements ()#line:1190:self.tree.reconstructActiveFormattingElements()
            O0OO00O0O000OO000 .tree .insertElement (O0O000OOOOO0OOOOO )#line:1191:self.tree.insertElement(token)
            O0OO00O0O000OO000 .tree .activeFormattingElements .append (Marker )#line:1192:self.tree.activeFormattingElements.append(Marker)
            O0OO00O0O000OO000 .parser .framesetOK =False #line:1193:self.parser.framesetOK = False
        def startTagXmp (OO0O00OOOO0OOOO00 ,O00O00OO0OOO000OO ):#line:1195:def startTagXmp(self, token):
            if OO0O00OOOO0OOOO00 .tree .elementInScope ("p",variant ="button"):#line:1196:if self.tree.elementInScope("p", variant="button"):
                OO0O00OOOO0OOOO00 .endTagP (impliedTagToken ("p"))#line:1197:self.endTagP(impliedTagToken("p"))
            OO0O00OOOO0OOOO00 .tree .reconstructActiveFormattingElements ()#line:1198:self.tree.reconstructActiveFormattingElements()
            OO0O00OOOO0OOOO00 .parser .framesetOK =False #line:1199:self.parser.framesetOK = False
            OO0O00OOOO0OOOO00 .parser .parseRCDataRawtext (O00O00OO0OOO000OO ,"RAWTEXT")#line:1200:self.parser.parseRCDataRawtext(token, "RAWTEXT")
        def startTagTable (OOO0000O0O0O000O0 ,OO0OOOO00O00O000O ):#line:1202:def startTagTable(self, token):
            if OOO0000O0O0O000O0 .parser .compatMode !="quirks":#line:1203:if self.parser.compatMode != "quirks":
                if OOO0000O0O0O000O0 .tree .elementInScope ("p",variant ="button"):#line:1204:if self.tree.elementInScope("p", variant="button"):
                    OOO0000O0O0O000O0 .processEndTag (impliedTagToken ("p"))#line:1205:self.processEndTag(impliedTagToken("p"))
            OOO0000O0O0O000O0 .tree .insertElement (OO0OOOO00O00O000O )#line:1206:self.tree.insertElement(token)
            OOO0000O0O0O000O0 .parser .framesetOK =False #line:1207:self.parser.framesetOK = False
            OOO0000O0O0O000O0 .parser .phase =OOO0000O0O0O000O0 .parser .phases ["inTable"]#line:1208:self.parser.phase = self.parser.phases["inTable"]
        def startTagVoidFormatting (O000O00O00O00000O ,O0O000OOO0000OO00 ):#line:1210:def startTagVoidFormatting(self, token):
            O000O00O00O00000O .tree .reconstructActiveFormattingElements ()#line:1211:self.tree.reconstructActiveFormattingElements()
            O000O00O00O00000O .tree .insertElement (O0O000OOO0000OO00 )#line:1212:self.tree.insertElement(token)
            O000O00O00O00000O .tree .openElements .pop ()#line:1213:self.tree.openElements.pop()
            O0O000OOO0000OO00 ["selfClosingAcknowledged"]=True #line:1214:token["selfClosingAcknowledged"] = True
            O000O00O00O00000O .parser .framesetOK =False #line:1215:self.parser.framesetOK = False
        def startTagInput (O00OOO0000000OOO0 ,O0O00O000OOOOOO00 ):#line:1217:def startTagInput(self, token):
            OO0000O0OO0O00000 =O00OOO0000000OOO0 .parser .framesetOK #line:1218:framesetOK = self.parser.framesetOK
            O00OOO0000000OOO0 .startTagVoidFormatting (O0O00O000OOOOOO00 )#line:1219:self.startTagVoidFormatting(token)
            if ("type"in O0O00O000OOOOOO00 ["data"]and O0O00O000OOOOOO00 ["data"]["type"].translate (asciiUpper2Lower )=="hidden"):#line:1221:token["data"]["type"].translate(asciiUpper2Lower) == "hidden"):
                O00OOO0000000OOO0 .parser .framesetOK =OO0000O0OO0O00000 #line:1223:self.parser.framesetOK = framesetOK
        def startTagParamSource (O0OOOOO0OO0OO000O ,OOO00OO00O0O0O0OO ):#line:1225:def startTagParamSource(self, token):
            O0OOOOO0OO0OO000O .tree .insertElement (OOO00OO00O0O0O0OO )#line:1226:self.tree.insertElement(token)
            O0OOOOO0OO0OO000O .tree .openElements .pop ()#line:1227:self.tree.openElements.pop()
            OOO00OO00O0O0O0OO ["selfClosingAcknowledged"]=True #line:1228:token["selfClosingAcknowledged"] = True
        def startTagHr (O0OOO00OOOOO00OO0 ,OOO0OOOO00O0000O0 ):#line:1230:def startTagHr(self, token):
            if O0OOO00OOOOO00OO0 .tree .elementInScope ("p",variant ="button"):#line:1231:if self.tree.elementInScope("p", variant="button"):
                O0OOO00OOOOO00OO0 .endTagP (impliedTagToken ("p"))#line:1232:self.endTagP(impliedTagToken("p"))
            O0OOO00OOOOO00OO0 .tree .insertElement (OOO0OOOO00O0000O0 )#line:1233:self.tree.insertElement(token)
            O0OOO00OOOOO00OO0 .tree .openElements .pop ()#line:1234:self.tree.openElements.pop()
            OOO0OOOO00O0000O0 ["selfClosingAcknowledged"]=True #line:1235:token["selfClosingAcknowledged"] = True
            O0OOO00OOOOO00OO0 .parser .framesetOK =False #line:1236:self.parser.framesetOK = False
        def startTagImage (OOO00O00OO000O0O0 ,O0O0O0OO0O0OOO00O ):#line:1238:def startTagImage(self, token):
            OOO00O00OO000O0O0 .parser .parseError ("unexpected-start-tag-treated-as",{"originalName":"image","newName":"img"})#line:1241:{"originalName": "image", "newName": "img"})
            OOO00O00OO000O0O0 .processStartTag (impliedTagToken ("img","StartTag",attributes =O0O0O0OO0O0OOO00O ["data"],selfClosing =O0O0O0OO0O0OOO00O ["selfClosing"]))#line:1244:selfClosing=token["selfClosing"]))
        def startTagIsIndex (O0O0O0OOOOO000O0O ,OO0OOO0OO0O000O00 ):#line:1246:def startTagIsIndex(self, token):
            O0O0O0OOOOO000O0O .parser .parseError ("deprecated-tag",{"name":"isindex"})#line:1247:self.parser.parseError("deprecated-tag", {"name": "isindex"})
            if O0O0O0OOOOO000O0O .tree .formPointer :#line:1248:if self.tree.formPointer:
                return #line:1249:return
            O0OOO0OOOO0O000OO ={}#line:1250:form_attrs = {}
            if "action"in OO0OOO0OO0O000O00 ["data"]:#line:1251:if "action" in token["data"]:
                O0OOO0OOOO0O000OO ["action"]=OO0OOO0OO0O000O00 ["data"]["action"]#line:1252:form_attrs["action"] = token["data"]["action"]
            O0O0O0OOOOO000O0O .processStartTag (impliedTagToken ("form","StartTag",attributes =O0OOO0OOOO0O000OO ))#line:1254:attributes=form_attrs))
            O0O0O0OOOOO000O0O .processStartTag (impliedTagToken ("hr","StartTag"))#line:1255:self.processStartTag(impliedTagToken("hr", "StartTag"))
            O0O0O0OOOOO000O0O .processStartTag (impliedTagToken ("label","StartTag"))#line:1256:self.processStartTag(impliedTagToken("label", "StartTag"))
            if "prompt"in OO0OOO0OO0O000O00 ["data"]:#line:1258:if "prompt" in token["data"]:
                O0OO000O0OOOO0OO0 =OO0OOO0OO0O000O00 ["data"]["prompt"]#line:1259:prompt = token["data"]["prompt"]
            else :#line:1260:else:
                O0OO000O0OOOO0OO0 ="This is a searchable index. Enter search keywords: "#line:1261:prompt = "This is a searchable index. Enter search keywords: "
            O0O0O0OOOOO000O0O .processCharacters ({"type":tokenTypes ["Characters"],"data":O0OO000O0OOOO0OO0 })#line:1263:{"type": tokenTypes["Characters"], "data": prompt})
            OO00OOOOOOOO0O0O0 =OO0OOO0OO0O000O00 ["data"].copy ()#line:1264:attributes = token["data"].copy()
            if "action"in OO00OOOOOOOO0O0O0 :#line:1265:if "action" in attributes:
                del OO00OOOOOOOO0O0O0 ["action"]#line:1266:del attributes["action"]
            if "prompt"in OO00OOOOOOOO0O0O0 :#line:1267:if "prompt" in attributes:
                del OO00OOOOOOOO0O0O0 ["prompt"]#line:1268:del attributes["prompt"]
            OO00OOOOOOOO0O0O0 ["name"]="isindex"#line:1269:attributes["name"] = "isindex"
            O0O0O0OOOOO000O0O .processStartTag (impliedTagToken ("input","StartTag",attributes =OO00OOOOOOOO0O0O0 ,selfClosing =OO0OOO0OO0O000O00 ["selfClosing"]))#line:1272:selfClosing=token["selfClosing"]))
            O0O0O0OOOOO000O0O .processEndTag (impliedTagToken ("label"))#line:1273:self.processEndTag(impliedTagToken("label"))
            O0O0O0OOOOO000O0O .processStartTag (impliedTagToken ("hr","StartTag"))#line:1274:self.processStartTag(impliedTagToken("hr", "StartTag"))
            O0O0O0OOOOO000O0O .processEndTag (impliedTagToken ("form"))#line:1275:self.processEndTag(impliedTagToken("form"))
        def startTagTextarea (O0OO00OO0O0O00000 ,OOO0O0O0O0O0O00O0 ):#line:1277:def startTagTextarea(self, token):
            O0OO00OO0O0O00000 .tree .insertElement (OOO0O0O0O0O0O00O0 )#line:1278:self.tree.insertElement(token)
            O0OO00OO0O0O00000 .parser .tokenizer .state =O0OO00OO0O0O00000 .parser .tokenizer .rcdataState #line:1279:self.parser.tokenizer.state = self.parser.tokenizer.rcdataState
            O0OO00OO0O0O00000 .processSpaceCharacters =O0OO00OO0O0O00000 .processSpaceCharactersDropNewline #line:1280:self.processSpaceCharacters = self.processSpaceCharactersDropNewline
            O0OO00OO0O0O00000 .parser .framesetOK =False #line:1281:self.parser.framesetOK = False
        def startTagIFrame (O00O0000OOOO0O00O ,OO00O0O000O0OO0O0 ):#line:1283:def startTagIFrame(self, token):
            O00O0000OOOO0O00O .parser .framesetOK =False #line:1284:self.parser.framesetOK = False
            O00O0000OOOO0O00O .startTagRawtext (OO00O0O000O0OO0O0 )#line:1285:self.startTagRawtext(token)
        def startTagNoscript (OOOOOO0OO0O0OOOOO ,OO0O00O0OO0O0OOOO ):#line:1287:def startTagNoscript(self, token):
            if OOOOOO0OO0O0OOOOO .parser .scripting :#line:1288:if self.parser.scripting:
                OOOOOO0OO0O0OOOOO .startTagRawtext (OO0O00O0OO0O0OOOO )#line:1289:self.startTagRawtext(token)
            else :#line:1290:else:
                OOOOOO0OO0O0OOOOO .startTagOther (OO0O00O0OO0O0OOOO )#line:1291:self.startTagOther(token)
        def startTagRawtext (OOO0O0O00OOOO00OO ,O00O00OOO00OOO0OO ):#line:1293:def startTagRawtext(self, token):
            ""#line:1294:"""iframe, noembed noframes, noscript(if scripting enabled)"""
            OOO0O0O00OOOO00OO .parser .parseRCDataRawtext (O00O00OOO00OOO0OO ,"RAWTEXT")#line:1295:self.parser.parseRCDataRawtext(token, "RAWTEXT")
        def startTagOpt (O0000OO0O0000O000 ,OO0O0OOO00OO00O0O ):#line:1297:def startTagOpt(self, token):
            if O0000OO0O0000O000 .tree .openElements [-1 ].name =="option":#line:1298:if self.tree.openElements[-1].name == "option":
                O0000OO0O0000O000 .parser .phase .processEndTag (impliedTagToken ("option"))#line:1299:self.parser.phase.processEndTag(impliedTagToken("option"))
            O0000OO0O0000O000 .tree .reconstructActiveFormattingElements ()#line:1300:self.tree.reconstructActiveFormattingElements()
            O0000OO0O0000O000 .parser .tree .insertElement (OO0O0OOO00OO00O0O )#line:1301:self.parser.tree.insertElement(token)
        def startTagSelect (OO00OO000O00OOOOO ,O0OO0O000O0000OOO ):#line:1303:def startTagSelect(self, token):
            OO00OO000O00OOOOO .tree .reconstructActiveFormattingElements ()#line:1304:self.tree.reconstructActiveFormattingElements()
            OO00OO000O00OOOOO .tree .insertElement (O0OO0O000O0000OOO )#line:1305:self.tree.insertElement(token)
            OO00OO000O00OOOOO .parser .framesetOK =False #line:1306:self.parser.framesetOK = False
            if OO00OO000O00OOOOO .parser .phase in (OO00OO000O00OOOOO .parser .phases ["inTable"],OO00OO000O00OOOOO .parser .phases ["inCaption"],OO00OO000O00OOOOO .parser .phases ["inColumnGroup"],OO00OO000O00OOOOO .parser .phases ["inTableBody"],OO00OO000O00OOOOO .parser .phases ["inRow"],OO00OO000O00OOOOO .parser .phases ["inCell"]):#line:1312:self.parser.phases["inCell"]):
                OO00OO000O00OOOOO .parser .phase =OO00OO000O00OOOOO .parser .phases ["inSelectInTable"]#line:1313:self.parser.phase = self.parser.phases["inSelectInTable"]
            else :#line:1314:else:
                OO00OO000O00OOOOO .parser .phase =OO00OO000O00OOOOO .parser .phases ["inSelect"]#line:1315:self.parser.phase = self.parser.phases["inSelect"]
        def startTagRpRt (O000O0OO00O0OO000 ,OOO000O0OOOOOO00O ):#line:1317:def startTagRpRt(self, token):
            if O000O0OO00O0OO000 .tree .elementInScope ("ruby"):#line:1318:if self.tree.elementInScope("ruby"):
                O000O0OO00O0OO000 .tree .generateImpliedEndTags ()#line:1319:self.tree.generateImpliedEndTags()
                if O000O0OO00O0OO000 .tree .openElements [-1 ].name !="ruby":#line:1320:if self.tree.openElements[-1].name != "ruby":
                    O000O0OO00O0OO000 .parser .parseError ()#line:1321:self.parser.parseError()
            O000O0OO00O0OO000 .tree .insertElement (OOO000O0OOOOOO00O )#line:1322:self.tree.insertElement(token)
        def startTagMath (O0OOO000OOO0O00OO ,O0000OOO000O0000O ):#line:1324:def startTagMath(self, token):
            O0OOO000OOO0O00OO .tree .reconstructActiveFormattingElements ()#line:1325:self.tree.reconstructActiveFormattingElements()
            O0OOO000OOO0O00OO .parser .adjustMathMLAttributes (O0000OOO000O0000O )#line:1326:self.parser.adjustMathMLAttributes(token)
            O0OOO000OOO0O00OO .parser .adjustForeignAttributes (O0000OOO000O0000O )#line:1327:self.parser.adjustForeignAttributes(token)
            O0000OOO000O0000O ["namespace"]=namespaces ["mathml"]#line:1328:token["namespace"] = namespaces["mathml"]
            O0OOO000OOO0O00OO .tree .insertElement (O0000OOO000O0000O )#line:1329:self.tree.insertElement(token)
            if O0000OOO000O0000O ["selfClosing"]:#line:1332:if token["selfClosing"]:
                O0OOO000OOO0O00OO .tree .openElements .pop ()#line:1333:self.tree.openElements.pop()
                O0000OOO000O0000O ["selfClosingAcknowledged"]=True #line:1334:token["selfClosingAcknowledged"] = True
        def startTagSvg (OOO0OO0O0OOOOOO00 ,O00O000O00O00000O ):#line:1336:def startTagSvg(self, token):
            OOO0OO0O0OOOOOO00 .tree .reconstructActiveFormattingElements ()#line:1337:self.tree.reconstructActiveFormattingElements()
            OOO0OO0O0OOOOOO00 .parser .adjustSVGAttributes (O00O000O00O00000O )#line:1338:self.parser.adjustSVGAttributes(token)
            OOO0OO0O0OOOOOO00 .parser .adjustForeignAttributes (O00O000O00O00000O )#line:1339:self.parser.adjustForeignAttributes(token)
            O00O000O00O00000O ["namespace"]=namespaces ["svg"]#line:1340:token["namespace"] = namespaces["svg"]
            OOO0OO0O0OOOOOO00 .tree .insertElement (O00O000O00O00000O )#line:1341:self.tree.insertElement(token)
            if O00O000O00O00000O ["selfClosing"]:#line:1344:if token["selfClosing"]:
                OOO0OO0O0OOOOOO00 .tree .openElements .pop ()#line:1345:self.tree.openElements.pop()
                O00O000O00O00000O ["selfClosingAcknowledged"]=True #line:1346:token["selfClosingAcknowledged"] = True
        def startTagMisplaced (OOO0OOOOO0OOO000O ,OOO0O0O00OOOOOO00 ):#line:1348:def startTagMisplaced(self, token):
            ""#line:1354:"""
            OOO0OOOOO0OOO000O .parser .parseError ("unexpected-start-tag-ignored",{"name":OOO0O0O00OOOOOO00 ["name"]})#line:1355:self.parser.parseError("unexpected-start-tag-ignored", {"name": token["name"]})
        def startTagOther (OO0OO00OO0O0OOO0O ,OO0OO0O0OO0OO00O0 ):#line:1357:def startTagOther(self, token):
            OO0OO00OO0O0OOO0O .tree .reconstructActiveFormattingElements ()#line:1358:self.tree.reconstructActiveFormattingElements()
            OO0OO00OO0O0OOO0O .tree .insertElement (OO0OO0O0OO0OO00O0 )#line:1359:self.tree.insertElement(token)
        def endTagP (OO000000O00O00000 ,O00O0OO000000OOO0 ):#line:1361:def endTagP(self, token):
            if not OO000000O00O00000 .tree .elementInScope ("p",variant ="button"):#line:1362:if not self.tree.elementInScope("p", variant="button"):
                OO000000O00O00000 .startTagCloseP (impliedTagToken ("p","StartTag"))#line:1363:self.startTagCloseP(impliedTagToken("p", "StartTag"))
                OO000000O00O00000 .parser .parseError ("unexpected-end-tag",{"name":"p"})#line:1364:self.parser.parseError("unexpected-end-tag", {"name": "p"})
                OO000000O00O00000 .endTagP (impliedTagToken ("p","EndTag"))#line:1365:self.endTagP(impliedTagToken("p", "EndTag"))
            else :#line:1366:else:
                OO000000O00O00000 .tree .generateImpliedEndTags ("p")#line:1367:self.tree.generateImpliedEndTags("p")
                if OO000000O00O00000 .tree .openElements [-1 ].name !="p":#line:1368:if self.tree.openElements[-1].name != "p":
                    OO000000O00O00000 .parser .parseError ("unexpected-end-tag",{"name":"p"})#line:1369:self.parser.parseError("unexpected-end-tag", {"name": "p"})
                O00OO0OOOOOO0O00O =OO000000O00O00000 .tree .openElements .pop ()#line:1370:node = self.tree.openElements.pop()
                while O00OO0OOOOOO0O00O .name !="p":#line:1371:while node.name != "p":
                    O00OO0OOOOOO0O00O =OO000000O00O00000 .tree .openElements .pop ()#line:1372:node = self.tree.openElements.pop()
        def endTagBody (O0O00OO0OO00O00O0 ,O0OO000OO00OO00OO ):#line:1374:def endTagBody(self, token):
            if not O0O00OO0OO00O00O0 .tree .elementInScope ("body"):#line:1375:if not self.tree.elementInScope("body"):
                O0O00OO0OO00O00O0 .parser .parseError ()#line:1376:self.parser.parseError()
                return #line:1377:return
            elif O0O00OO0OO00O00O0 .tree .openElements [-1 ].name !="body":#line:1378:elif self.tree.openElements[-1].name != "body":
                for O0000OO0O0O000O00 in O0O00OO0OO00O00O0 .tree .openElements [2 :]:#line:1379:for node in self.tree.openElements[2:]:
                    if O0000OO0O0O000O00 .name not in frozenset (("dd","dt","li","optgroup","option","p","rp","rt","tbody","td","tfoot","th","thead","tr","body","html")):#line:1384:"html")):
                        O0O00OO0OO00O00O0 .parser .parseError ("expected-one-end-tag-but-got-another",{"gotName":"body","expectedName":O0000OO0O0O000O00 .name })#line:1388:{"gotName": "body", "expectedName": node.name})
                        break #line:1389:break
            O0O00OO0OO00O00O0 .parser .phase =O0O00OO0OO00O00O0 .parser .phases ["afterBody"]#line:1390:self.parser.phase = self.parser.phases["afterBody"]
        def endTagHtml (OOOO000000O0O0O0O ,O0OO0OOOO0OO0O0O0 ):#line:1392:def endTagHtml(self, token):
            if OOOO000000O0O0O0O .tree .elementInScope ("body"):#line:1394:if self.tree.elementInScope("body"):
                OOOO000000O0O0O0O .endTagBody (impliedTagToken ("body"))#line:1395:self.endTagBody(impliedTagToken("body"))
                return O0OO0OOOO0OO0O0O0 #line:1396:return token
        def endTagBlock (OOO0OO0OO0OOOO0O0 ,OOO0OOO0OO0OO00O0 ):#line:1398:def endTagBlock(self, token):
            if OOO0OOO0OO0OO00O0 ["name"]=="pre":#line:1400:if token["name"] == "pre":
                OOO0OO0OO0OOOO0O0 .processSpaceCharacters =OOO0OO0OO0OOOO0O0 .processSpaceCharactersNonPre #line:1401:self.processSpaceCharacters = self.processSpaceCharactersNonPre
            OO0OOOO0O0O0OOOO0 =OOO0OO0OO0OOOO0O0 .tree .elementInScope (OOO0OOO0OO0OO00O0 ["name"])#line:1402:inScope = self.tree.elementInScope(token["name"])
            if OO0OOOO0O0O0OOOO0 :#line:1403:if inScope:
                OOO0OO0OO0OOOO0O0 .tree .generateImpliedEndTags ()#line:1404:self.tree.generateImpliedEndTags()
            if OOO0OO0OO0OOOO0O0 .tree .openElements [-1 ].name !=OOO0OOO0OO0OO00O0 ["name"]:#line:1405:if self.tree.openElements[-1].name != token["name"]:
                OOO0OO0OO0OOOO0O0 .parser .parseError ("end-tag-too-early",{"name":OOO0OOO0OO0OO00O0 ["name"]})#line:1406:self.parser.parseError("end-tag-too-early", {"name": token["name"]})
            if OO0OOOO0O0O0OOOO0 :#line:1407:if inScope:
                OO0O0OO0OO0OOOO0O =OOO0OO0OO0OOOO0O0 .tree .openElements .pop ()#line:1408:node = self.tree.openElements.pop()
                while OO0O0OO0OO0OOOO0O .name !=OOO0OOO0OO0OO00O0 ["name"]:#line:1409:while node.name != token["name"]:
                    OO0O0OO0OO0OOOO0O =OOO0OO0OO0OOOO0O0 .tree .openElements .pop ()#line:1410:node = self.tree.openElements.pop()
        def endTagForm (OOO0OO0OOO00OO0O0 ,OO0O0O000O0OO0OOO ):#line:1412:def endTagForm(self, token):
            O0000OO00000O000O =OOO0OO0OOO00OO0O0 .tree .formPointer #line:1413:node = self.tree.formPointer
            OOO0OO0OOO00OO0O0 .tree .formPointer =None #line:1414:self.tree.formPointer = None
            if O0000OO00000O000O is None or not OOO0OO0OOO00OO0O0 .tree .elementInScope (O0000OO00000O000O ):#line:1415:if node is None or not self.tree.elementInScope(node):
                OOO0OO0OOO00OO0O0 .parser .parseError ("unexpected-end-tag",{"name":"form"})#line:1417:{"name": "form"})
            else :#line:1418:else:
                OOO0OO0OOO00OO0O0 .tree .generateImpliedEndTags ()#line:1419:self.tree.generateImpliedEndTags()
                if OOO0OO0OOO00OO0O0 .tree .openElements [-1 ]!=O0000OO00000O000O :#line:1420:if self.tree.openElements[-1] != node:
                    OOO0OO0OOO00OO0O0 .parser .parseError ("end-tag-too-early-ignored",{"name":"form"})#line:1422:{"name": "form"})
                OOO0OO0OOO00OO0O0 .tree .openElements .remove (O0000OO00000O000O )#line:1423:self.tree.openElements.remove(node)
        def endTagListItem (O00OOO00OOOOOO000 ,OOOOO0OO0000O0000 ):#line:1425:def endTagListItem(self, token):
            if OOOOO0OO0000O0000 ["name"]=="li":#line:1426:if token["name"] == "li":
                OO0O0OOOOO00OO0OO ="list"#line:1427:variant = "list"
            else :#line:1428:else:
                OO0O0OOOOO00OO0OO =None #line:1429:variant = None
            if not O00OOO00OOOOOO000 .tree .elementInScope (OOOOO0OO0000O0000 ["name"],variant =OO0O0OOOOO00OO0OO ):#line:1430:if not self.tree.elementInScope(token["name"], variant=variant):
                O00OOO00OOOOOO000 .parser .parseError ("unexpected-end-tag",{"name":OOOOO0OO0000O0000 ["name"]})#line:1431:self.parser.parseError("unexpected-end-tag", {"name": token["name"]})
            else :#line:1432:else:
                O00OOO00OOOOOO000 .tree .generateImpliedEndTags (exclude =OOOOO0OO0000O0000 ["name"])#line:1433:self.tree.generateImpliedEndTags(exclude=token["name"])
                if O00OOO00OOOOOO000 .tree .openElements [-1 ].name !=OOOOO0OO0000O0000 ["name"]:#line:1434:if self.tree.openElements[-1].name != token["name"]:
                    O00OOO00OOOOOO000 .parser .parseError ("end-tag-too-early",{"name":OOOOO0OO0000O0000 ["name"]})#line:1437:{"name": token["name"]})
                OOO0O0O000000O000 =O00OOO00OOOOOO000 .tree .openElements .pop ()#line:1438:node = self.tree.openElements.pop()
                while OOO0O0O000000O000 .name !=OOOOO0OO0000O0000 ["name"]:#line:1439:while node.name != token["name"]:
                    OOO0O0O000000O000 =O00OOO00OOOOOO000 .tree .openElements .pop ()#line:1440:node = self.tree.openElements.pop()
        def endTagHeading (O00O0OO0OOO0O0O0O ,O00OO000OO00OOO00 ):#line:1442:def endTagHeading(self, token):
            for O0000OOOOOO0OO0OO in headingElements :#line:1443:for item in headingElements:
                if O00O0OO0OOO0O0O0O .tree .elementInScope (O0000OOOOOO0OO0OO ):#line:1444:if self.tree.elementInScope(item):
                    O00O0OO0OOO0O0O0O .tree .generateImpliedEndTags ()#line:1445:self.tree.generateImpliedEndTags()
                    break #line:1446:break
            if O00O0OO0OOO0O0O0O .tree .openElements [-1 ].name !=O00OO000OO00OOO00 ["name"]:#line:1447:if self.tree.openElements[-1].name != token["name"]:
                O00O0OO0OOO0O0O0O .parser .parseError ("end-tag-too-early",{"name":O00OO000OO00OOO00 ["name"]})#line:1448:self.parser.parseError("end-tag-too-early", {"name": token["name"]})
            for O0000OOOOOO0OO0OO in headingElements :#line:1450:for item in headingElements:
                if O00O0OO0OOO0O0O0O .tree .elementInScope (O0000OOOOOO0OO0OO ):#line:1451:if self.tree.elementInScope(item):
                    O0000OOOOOO0OO0OO =O00O0OO0OOO0O0O0O .tree .openElements .pop ()#line:1452:item = self.tree.openElements.pop()
                    while O0000OOOOOO0OO0OO .name not in headingElements :#line:1453:while item.name not in headingElements:
                        O0000OOOOOO0OO0OO =O00O0OO0OOO0O0O0O .tree .openElements .pop ()#line:1454:item = self.tree.openElements.pop()
                    break #line:1455:break
        def endTagFormatting (O00000OOO0OO000O0 ,OOOOOO0OO0000O00O ):#line:1457:def endTagFormatting(self, token):
            ""#line:1458:"""The much-feared adoption agency algorithm"""
            OOO0OOOO000OOOOOO =0 #line:1463:outerLoopCounter = 0
            while OOO0OOOO000OOOOOO <8 :#line:1466:while outerLoopCounter < 8:
                OOO0OOOO000OOOOOO +=1 #line:1469:outerLoopCounter += 1
                OOOOOO0O000OOO00O =O00000OOO0OO000O0 .tree .elementInActiveFormattingElements (OOOOOO0OO0000O00O ["name"])#line:1480:token["name"])
                if (not OOOOOO0O000OOO00O or (OOOOOO0O000OOO00O in O00000OOO0OO000O0 .tree .openElements and not O00000OOO0OO000O0 .tree .elementInScope (OOOOOO0O000OOO00O .name ))):#line:1483:not self.tree.elementInScope(formattingElement.name))):
                    O00000OOO0OO000O0 .endTagOther (OOOOOO0OO0000O00O )#line:1487:self.endTagOther(token)
                    return #line:1488:return
                elif OOOOOO0O000OOO00O not in O00000OOO0OO000O0 .tree .openElements :#line:1494:elif formattingElement not in self.tree.openElements:
                    O00000OOO0OO000O0 .parser .parseError ("adoption-agency-1.2",{"name":OOOOOO0OO0000O00O ["name"]})#line:1495:self.parser.parseError("adoption-agency-1.2", {"name": token["name"]})
                    O00000OOO0OO000O0 .tree .activeFormattingElements .remove (OOOOOO0O000OOO00O )#line:1496:self.tree.activeFormattingElements.remove(formattingElement)
                    return #line:1497:return
                elif not O00000OOO0OO000O0 .tree .elementInScope (OOOOOO0O000OOO00O .name ):#line:1503:elif not self.tree.elementInScope(formattingElement.name):
                    O00000OOO0OO000O0 .parser .parseError ("adoption-agency-4.4",{"name":OOOOOO0OO0000O00O ["name"]})#line:1504:self.parser.parseError("adoption-agency-4.4", {"name": token["name"]})
                    return #line:1505:return
                else :#line:1512:else:
                    if OOOOOO0O000OOO00O !=O00000OOO0OO000O0 .tree .openElements [-1 ]:#line:1513:if formattingElement != self.tree.openElements[-1]:
                        O00000OOO0OO000O0 .parser .parseError ("adoption-agency-1.3",{"name":OOOOOO0OO0000O00O ["name"]})#line:1514:self.parser.parseError("adoption-agency-1.3", {"name": token["name"]})
                O00O0OO00O00O0O00 =O00000OOO0OO000O0 .tree .openElements .index (OOOOOO0O000OOO00O )#line:1522:afeIndex = self.tree.openElements.index(formattingElement)
                OO0O00O0OO00OOOO0 =None #line:1523:furthestBlock = None
                for OOO0OOO0O0OOOO0OO in O00000OOO0OO000O0 .tree .openElements [O00O0OO00O00O0O00 :]:#line:1524:for element in self.tree.openElements[afeIndex:]:
                    if OOO0OOO0O0OOOO0OO .nameTuple in specialElements :#line:1525:if element.nameTuple in specialElements:
                        OO0O00O0OO00OOOO0 =OOO0OOO0O0OOOO0OO #line:1526:furthestBlock = element
                        break #line:1527:break
                if OO0O00O0OO00OOOO0 is None :#line:1537:if furthestBlock is None:
                    OOO0OOO0O0OOOO0OO =O00000OOO0OO000O0 .tree .openElements .pop ()#line:1538:element = self.tree.openElements.pop()
                    while OOO0OOO0O0OOOO0OO !=OOOOOO0O000OOO00O :#line:1539:while element != formattingElement:
                        OOO0OOO0O0OOOO0OO =O00000OOO0OO000O0 .tree .openElements .pop ()#line:1540:element = self.tree.openElements.pop()
                    O00000OOO0OO000O0 .tree .activeFormattingElements .remove (OOO0OOO0O0OOOO0OO )#line:1541:self.tree.activeFormattingElements.remove(element)
                    return #line:1542:return
                O0OO00O0000000O00 =O00000OOO0OO000O0 .tree .openElements [O00O0OO00O00O0O00 -1 ]#line:1545:commonAncestor = self.tree.openElements[afeIndex - 1]
                OO00O0O00O0OOO0O0 =O00000OOO0OO000O0 .tree .activeFormattingElements .index (OOOOOO0O000OOO00O )#line:1552:bookmark = self.tree.activeFormattingElements.index(formattingElement)
                OOO0000OOOO0000O0 =OOOOO0O0O0OOO000O =OO0O00O0OO00OOOO0 #line:1555:lastNode = node = furthestBlock
                O00O000O0OOOOOO00 =0 #line:1556:innerLoopCounter = 0
                OO0O00OOO0OOO00O0 =O00000OOO0OO000O0 .tree .openElements .index (OOOOO0O0O0OOO000O )#line:1558:index = self.tree.openElements.index(node)
                while O00O000O0OOOOOO00 <3 :#line:1559:while innerLoopCounter < 3:
                    O00O000O0OOOOOO00 +=1 #line:1560:innerLoopCounter += 1
                    OO0O00OOO0OOO00O0 -=1 #line:1562:index -= 1
                    OOOOO0O0O0OOO000O =O00000OOO0OO000O0 .tree .openElements [OO0O00OOO0OOO00O0 ]#line:1563:node = self.tree.openElements[index]
                    if OOOOO0O0O0OOO000O not in O00000OOO0OO000O0 .tree .activeFormattingElements :#line:1564:if node not in self.tree.activeFormattingElements:
                        O00000OOO0OO000O0 .tree .openElements .remove (OOOOO0O0O0OOO000O )#line:1565:self.tree.openElements.remove(node)
                        continue #line:1566:continue
                    if OOOOO0O0O0OOO000O ==OOOOOO0O000OOO00O :#line:1568:if node == formattingElement:
                        break #line:1569:break
                    if OOO0000OOOO0000O0 ==OO0O00O0OO00OOOO0 :#line:1571:if lastNode == furthestBlock:
                        OO00O0O00O0OOO0O0 =O00000OOO0OO000O0 .tree .activeFormattingElements .index (OOOOO0O0O0OOO000O )+1 #line:1572:bookmark = self.tree.activeFormattingElements.index(node) + 1
                    OOO0OO0O00O00O0OO =OOOOO0O0O0OOO000O .cloneNode ()#line:1574:clone = node.cloneNode()
                    O00000OOO0OO000O0 .tree .activeFormattingElements [O00000OOO0OO000O0 .tree .activeFormattingElements .index (OOOOO0O0O0OOO000O )]=OOO0OO0O00O00O0OO #line:1577:self.tree.activeFormattingElements.index(node)] = clone
                    O00000OOO0OO000O0 .tree .openElements [O00000OOO0OO000O0 .tree .openElements .index (OOOOO0O0O0OOO000O )]=OOO0OO0O00O00O0OO #line:1579:self.tree.openElements.index(node)] = clone
                    OOOOO0O0O0OOO000O =OOO0OO0O00O00O0OO #line:1580:node = clone
                    if OOO0000OOOO0000O0 .parent :#line:1583:if lastNode.parent:
                        OOO0000OOOO0000O0 .parent .removeChild (OOO0000OOOO0000O0 )#line:1584:lastNode.parent.removeChild(lastNode)
                    OOOOO0O0O0OOO000O .appendChild (OOO0000OOOO0000O0 )#line:1585:node.appendChild(lastNode)
                    OOO0000OOOO0000O0 =OOOOO0O0O0OOO000O #line:1587:lastNode = node
                if OOO0000OOOO0000O0 .parent :#line:1593:if lastNode.parent:
                    OOO0000OOOO0000O0 .parent .removeChild (OOO0000OOOO0000O0 )#line:1594:lastNode.parent.removeChild(lastNode)
                if O0OO00O0000000O00 .name in frozenset (("table","tbody","tfoot","thead","tr")):#line:1596:if commonAncestor.name in frozenset(("table", "tbody", "tfoot", "thead", "tr")):
                    OOOOOO000O0OOO00O ,OO00O00OOOOOO00O0 =O00000OOO0OO000O0 .tree .getTableMisnestedNodePosition ()#line:1597:parent, insertBefore = self.tree.getTableMisnestedNodePosition()
                    OOOOOO000O0OOO00O .insertBefore (OOO0000OOOO0000O0 ,OO00O00OOOOOO00O0 )#line:1598:parent.insertBefore(lastNode, insertBefore)
                else :#line:1599:else:
                    O0OO00O0000000O00 .appendChild (OOO0000OOOO0000O0 )#line:1600:commonAncestor.appendChild(lastNode)
                OOO0OO0O00O00O0OO =OOOOOO0O000OOO00O .cloneNode ()#line:1603:clone = formattingElement.cloneNode()
                OO0O00O0OO00OOOO0 .reparentChildren (OOO0OO0O00O00O0OO )#line:1606:furthestBlock.reparentChildren(clone)
                OO0O00O0OO00OOOO0 .appendChild (OOO0OO0O00O00O0OO )#line:1609:furthestBlock.appendChild(clone)
                O00000OOO0OO000O0 .tree .activeFormattingElements .remove (OOOOOO0O000OOO00O )#line:1612:self.tree.activeFormattingElements.remove(formattingElement)
                O00000OOO0OO000O0 .tree .activeFormattingElements .insert (OO00O0O00O0OOO0O0 ,OOO0OO0O00O00O0OO )#line:1613:self.tree.activeFormattingElements.insert(bookmark, clone)
                O00000OOO0OO000O0 .tree .openElements .remove (OOOOOO0O000OOO00O )#line:1616:self.tree.openElements.remove(formattingElement)
                O00000OOO0OO000O0 .tree .openElements .insert (O00000OOO0OO000O0 .tree .openElements .index (OO0O00O0OO00OOOO0 )+1 ,OOO0OO0O00O00O0OO )#line:1618:self.tree.openElements.index(furthestBlock) + 1, clone)
        def endTagAppletMarqueeObject (OOO000OO00O0OO000 ,OOO000OO0O0OOOOOO ):#line:1620:def endTagAppletMarqueeObject(self, token):
            if OOO000OO00O0OO000 .tree .elementInScope (OOO000OO0O0OOOOOO ["name"]):#line:1621:if self.tree.elementInScope(token["name"]):
                OOO000OO00O0OO000 .tree .generateImpliedEndTags ()#line:1622:self.tree.generateImpliedEndTags()
            if OOO000OO00O0OO000 .tree .openElements [-1 ].name !=OOO000OO0O0OOOOOO ["name"]:#line:1623:if self.tree.openElements[-1].name != token["name"]:
                OOO000OO00O0OO000 .parser .parseError ("end-tag-too-early",{"name":OOO000OO0O0OOOOOO ["name"]})#line:1624:self.parser.parseError("end-tag-too-early", {"name": token["name"]})
            if OOO000OO00O0OO000 .tree .elementInScope (OOO000OO0O0OOOOOO ["name"]):#line:1626:if self.tree.elementInScope(token["name"]):
                O0O0OOOOO00O0O000 =OOO000OO00O0OO000 .tree .openElements .pop ()#line:1627:element = self.tree.openElements.pop()
                while O0O0OOOOO00O0O000 .name !=OOO000OO0O0OOOOOO ["name"]:#line:1628:while element.name != token["name"]:
                    O0O0OOOOO00O0O000 =OOO000OO00O0OO000 .tree .openElements .pop ()#line:1629:element = self.tree.openElements.pop()
                OOO000OO00O0OO000 .tree .clearActiveFormattingElements ()#line:1630:self.tree.clearActiveFormattingElements()
        def endTagBr (OO00O0O0OO0OO0OOO ,OOO00OO000O0OO0OO ):#line:1632:def endTagBr(self, token):
            OO00O0O0OO0OO0OOO .parser .parseError ("unexpected-end-tag-treated-as",{"originalName":"br","newName":"br element"})#line:1634:{"originalName": "br", "newName": "br element"})
            OO00O0O0OO0OO0OOO .tree .reconstructActiveFormattingElements ()#line:1635:self.tree.reconstructActiveFormattingElements()
            OO00O0O0OO0OO0OOO .tree .insertElement (impliedTagToken ("br","StartTag"))#line:1636:self.tree.insertElement(impliedTagToken("br", "StartTag"))
            OO00O0O0OO0OO0OOO .tree .openElements .pop ()#line:1637:self.tree.openElements.pop()
        def endTagOther (OOO000O00OOOOOO0O ,OO00O00O0O0O00O00 ):#line:1639:def endTagOther(self, token):
            for OO0000000O0O000OO in OOO000O00OOOOOO0O .tree .openElements [::-1 ]:#line:1640:for node in self.tree.openElements[::-1]:
                if OO0000000O0O000OO .name ==OO00O00O0O0O00O00 ["name"]:#line:1641:if node.name == token["name"]:
                    OOO000O00OOOOOO0O .tree .generateImpliedEndTags (exclude =OO00O00O0O0O00O00 ["name"])#line:1642:self.tree.generateImpliedEndTags(exclude=token["name"])
                    if OOO000O00OOOOOO0O .tree .openElements [-1 ].name !=OO00O00O0O0O00O00 ["name"]:#line:1643:if self.tree.openElements[-1].name != token["name"]:
                        OOO000O00OOOOOO0O .parser .parseError ("unexpected-end-tag",{"name":OO00O00O0O0O00O00 ["name"]})#line:1644:self.parser.parseError("unexpected-end-tag", {"name": token["name"]})
                    while OOO000O00OOOOOO0O .tree .openElements .pop ()!=OO0000000O0O000OO :#line:1645:while self.tree.openElements.pop() != node:
                        pass #line:1646:pass
                    break #line:1647:break
                else :#line:1648:else:
                    if OO0000000O0O000OO .nameTuple in specialElements :#line:1649:if node.nameTuple in specialElements:
                        OOO000O00OOOOOO0O .parser .parseError ("unexpected-end-tag",{"name":OO00O00O0O0O00O00 ["name"]})#line:1650:self.parser.parseError("unexpected-end-tag", {"name": token["name"]})
                        break #line:1651:break
    class O000000OOO0OO0O00 (O0000OO000O0OOO00 ):#line:1653:class TextPhase(Phase):
        def __init__ (OO0O00OO000OOOO0O ,OOOO000OOO0000O0O ,OOO00OOO0O00O000O ):#line:1654:def __init__(self, parser, tree):
            O0000OO000O0OOO00 .__init__ (OO0O00OO000OOOO0O ,OOOO000OOO0000O0O ,OOO00OOO0O00O000O )#line:1655:Phase.__init__(self, parser, tree)
            OO0O00OO000OOOO0O .startTagHandler =_utils .MethodDispatcher ([])#line:1656:self.startTagHandler = _utils.MethodDispatcher([])
            OO0O00OO000OOOO0O .startTagHandler .default =OO0O00OO000OOOO0O .startTagOther #line:1657:self.startTagHandler.default = self.startTagOther
            OO0O00OO000OOOO0O .endTagHandler =_utils .MethodDispatcher ([("script",OO0O00OO000OOOO0O .endTagScript )])#line:1659:("script", self.endTagScript)])
            OO0O00OO000OOOO0O .endTagHandler .default =OO0O00OO000OOOO0O .endTagOther #line:1660:self.endTagHandler.default = self.endTagOther
        def processCharacters (O0000OO0OOOO00000 ,O000O0OO00O000O0O ):#line:1662:def processCharacters(self, token):
            O0000OO0OOOO00000 .tree .insertText (O000O0OO00O000O0O ["data"])#line:1663:self.tree.insertText(token["data"])
        def processEOF (O0OOOO0000O00O0O0 ):#line:1665:def processEOF(self):
            O0OOOO0000O00O0O0 .parser .parseError ("expected-named-closing-tag-but-got-eof",{"name":O0OOOO0000O00O0O0 .tree .openElements [-1 ].name })#line:1667:{"name": self.tree.openElements[-1].name})
            O0OOOO0000O00O0O0 .tree .openElements .pop ()#line:1668:self.tree.openElements.pop()
            O0OOOO0000O00O0O0 .parser .phase =O0OOOO0000O00O0O0 .parser .originalPhase #line:1669:self.parser.phase = self.parser.originalPhase
            return True #line:1670:return True
        def startTagOther (O00000O0OOOO0O000 ,O0O000OO00OO000O0 ):#line:1672:def startTagOther(self, token):
            assert False ,"Tried to process start tag %s in RCDATA/RAWTEXT mode"%O0O000OO00OO000O0 ['name']#line:1673:assert False, "Tried to process start tag %s in RCDATA/RAWTEXT mode" % token['name']
        def endTagScript (OO0O0OOO0OO00OO00 ,O000O000O000O0000 ):#line:1675:def endTagScript(self, token):
            OO0000OOO0O0OO0OO =OO0O0OOO0OO00OO00 .tree .openElements .pop ()#line:1676:node = self.tree.openElements.pop()
            assert OO0000OOO0O0OO0OO .name =="script"#line:1677:assert node.name == "script"
            OO0O0OOO0OO00OO00 .parser .phase =OO0O0OOO0OO00OO00 .parser .originalPhase #line:1678:self.parser.phase = self.parser.originalPhase
        def endTagOther (O00OOO00O0O00O00O ,O00O00O00O00OOO0O ):#line:1682:def endTagOther(self, token):
            O00OOO00O0O00O00O .tree .openElements .pop ()#line:1683:self.tree.openElements.pop()
            O00OOO00O0O00O00O .parser .phase =O00OOO00O0O00O00O .parser .originalPhase #line:1684:self.parser.phase = self.parser.originalPhase
    class OOOO0O0000OOO0OOO (O0000OO000O0OOO00 ):#line:1686:class InTablePhase(Phase):
        def __init__ (O0OO0OO000000OOOO ,O0OOO0O0OOOOOO00O ,OO0O0O0OO0O0O000O ):#line:1688:def __init__(self, parser, tree):
            O0000OO000O0OOO00 .__init__ (O0OO0OO000000OOOO ,O0OOO0O0OOOOOO00O ,OO0O0O0OO0O0O000O )#line:1689:Phase.__init__(self, parser, tree)
            O0OO0OO000000OOOO .startTagHandler =_utils .MethodDispatcher ([("html",O0OO0OO000000OOOO .startTagHtml ),("caption",O0OO0OO000000OOOO .startTagCaption ),("colgroup",O0OO0OO000000OOOO .startTagColgroup ),("col",O0OO0OO000000OOOO .startTagCol ),(("tbody","tfoot","thead"),O0OO0OO000000OOOO .startTagRowGroup ),(("td","th","tr"),O0OO0OO000000OOOO .startTagImplyTbody ),("table",O0OO0OO000000OOOO .startTagTable ),(("style","script"),O0OO0OO000000OOOO .startTagStyleScript ),("input",O0OO0OO000000OOOO .startTagInput ),("form",O0OO0OO000000OOOO .startTagForm )])#line:1701:])
            O0OO0OO000000OOOO .startTagHandler .default =O0OO0OO000000OOOO .startTagOther #line:1702:self.startTagHandler.default = self.startTagOther
            O0OO0OO000000OOOO .endTagHandler =_utils .MethodDispatcher ([("table",O0OO0OO000000OOOO .endTagTable ),(("body","caption","col","colgroup","html","tbody","td","tfoot","th","thead","tr"),O0OO0OO000000OOOO .endTagIgnore )])#line:1708:])
            O0OO0OO000000OOOO .endTagHandler .default =O0OO0OO000000OOOO .endTagOther #line:1709:self.endTagHandler.default = self.endTagOther
        def clearStackToTableContext (OOO0O0O0OO0OO00O0 ):#line:1712:def clearStackToTableContext(self):
            while OOO0O0O0OO0OO00O0 .tree .openElements [-1 ].name not in ("table","html"):#line:1714:while self.tree.openElements[-1].name not in ("table", "html"):
                OOO0O0O0OO0OO00O0 .tree .openElements .pop ()#line:1717:self.tree.openElements.pop()
        def processEOF (O000O0O000OO00000 ):#line:1721:def processEOF(self):
            if O000O0O000OO00000 .tree .openElements [-1 ].name !="html":#line:1722:if self.tree.openElements[-1].name != "html":
                O000O0O000OO00000 .parser .parseError ("eof-in-table")#line:1723:self.parser.parseError("eof-in-table")
            else :#line:1724:else:
                assert O000O0O000OO00000 .parser .innerHTML #line:1725:assert self.parser.innerHTML
        def processSpaceCharacters (OO00000O0000OOO0O ,OO00OO00O00000O0O ):#line:1728:def processSpaceCharacters(self, token):
            O0O000O0OOOO0OOOO =OO00000O0000OOO0O .parser .phase #line:1729:originalPhase = self.parser.phase
            OO00000O0000OOO0O .parser .phase =OO00000O0000OOO0O .parser .phases ["inTableText"]#line:1730:self.parser.phase = self.parser.phases["inTableText"]
            OO00000O0000OOO0O .parser .phase .originalPhase =O0O000O0OOOO0OOOO #line:1731:self.parser.phase.originalPhase = originalPhase
            OO00000O0000OOO0O .parser .phase .processSpaceCharacters (OO00OO00O00000O0O )#line:1732:self.parser.phase.processSpaceCharacters(token)
        def processCharacters (O00000000O0OO0O0O ,O0O0OO0O00000O00O ):#line:1734:def processCharacters(self, token):
            OOOOOO00O00O0O0OO =O00000000O0OO0O0O .parser .phase #line:1735:originalPhase = self.parser.phase
            O00000000O0OO0O0O .parser .phase =O00000000O0OO0O0O .parser .phases ["inTableText"]#line:1736:self.parser.phase = self.parser.phases["inTableText"]
            O00000000O0OO0O0O .parser .phase .originalPhase =OOOOOO00O00O0O0OO #line:1737:self.parser.phase.originalPhase = originalPhase
            O00000000O0OO0O0O .parser .phase .processCharacters (O0O0OO0O00000O00O )#line:1738:self.parser.phase.processCharacters(token)
        def insertText (OO0O000OO0O00000O ,O0O00OO0OO00000O0 ):#line:1740:def insertText(self, token):
            OO0O000OO0O00000O .tree .insertFromTable =True #line:1743:self.tree.insertFromTable = True
            OO0O000OO0O00000O .parser .phases ["inBody"].processCharacters (O0O00OO0OO00000O0 )#line:1744:self.parser.phases["inBody"].processCharacters(token)
            OO0O000OO0O00000O .tree .insertFromTable =False #line:1745:self.tree.insertFromTable = False
        def startTagCaption (O0O00000O0OO0O0O0 ,OO0OOO0O000OO0OO0 ):#line:1747:def startTagCaption(self, token):
            O0O00000O0OO0O0O0 .clearStackToTableContext ()#line:1748:self.clearStackToTableContext()
            O0O00000O0OO0O0O0 .tree .activeFormattingElements .append (Marker )#line:1749:self.tree.activeFormattingElements.append(Marker)
            O0O00000O0OO0O0O0 .tree .insertElement (OO0OOO0O000OO0OO0 )#line:1750:self.tree.insertElement(token)
            O0O00000O0OO0O0O0 .parser .phase =O0O00000O0OO0O0O0 .parser .phases ["inCaption"]#line:1751:self.parser.phase = self.parser.phases["inCaption"]
        def startTagColgroup (O0OOO0000OOOO0O00 ,OOO00OO0O00OO0OO0 ):#line:1753:def startTagColgroup(self, token):
            O0OOO0000OOOO0O00 .clearStackToTableContext ()#line:1754:self.clearStackToTableContext()
            O0OOO0000OOOO0O00 .tree .insertElement (OOO00OO0O00OO0OO0 )#line:1755:self.tree.insertElement(token)
            O0OOO0000OOOO0O00 .parser .phase =O0OOO0000OOOO0O00 .parser .phases ["inColumnGroup"]#line:1756:self.parser.phase = self.parser.phases["inColumnGroup"]
        def startTagCol (OOOO0OOO0OO00O0O0 ,OOO00O0O000O000OO ):#line:1758:def startTagCol(self, token):
            OOOO0OOO0OO00O0O0 .startTagColgroup (impliedTagToken ("colgroup","StartTag"))#line:1759:self.startTagColgroup(impliedTagToken("colgroup", "StartTag"))
            return OOO00O0O000O000OO #line:1760:return token
        def startTagRowGroup (OOO000OO0O0OOOO00 ,OO0OO0O00O0000OOO ):#line:1762:def startTagRowGroup(self, token):
            OOO000OO0O0OOOO00 .clearStackToTableContext ()#line:1763:self.clearStackToTableContext()
            OOO000OO0O0OOOO00 .tree .insertElement (OO0OO0O00O0000OOO )#line:1764:self.tree.insertElement(token)
            OOO000OO0O0OOOO00 .parser .phase =OOO000OO0O0OOOO00 .parser .phases ["inTableBody"]#line:1765:self.parser.phase = self.parser.phases["inTableBody"]
        def startTagImplyTbody (OOO000OOOO0O00OO0 ,OO0O000O0O000O00O ):#line:1767:def startTagImplyTbody(self, token):
            OOO000OOOO0O00OO0 .startTagRowGroup (impliedTagToken ("tbody","StartTag"))#line:1768:self.startTagRowGroup(impliedTagToken("tbody", "StartTag"))
            return OO0O000O0O000O00O #line:1769:return token
        def startTagTable (OOOOOO00O00O0OO00 ,OO00O000O0OO0OO00 ):#line:1771:def startTagTable(self, token):
            OOOOOO00O00O0OO00 .parser .parseError ("unexpected-start-tag-implies-end-tag",{"startName":"table","endName":"table"})#line:1773:{"startName": "table", "endName": "table"})
            OOOOOO00O00O0OO00 .parser .phase .processEndTag (impliedTagToken ("table"))#line:1774:self.parser.phase.processEndTag(impliedTagToken("table"))
            if not OOOOOO00O00O0OO00 .parser .innerHTML :#line:1775:if not self.parser.innerHTML:
                return OO00O000O0OO0OO00 #line:1776:return token
        def startTagStyleScript (O0O000O0O0OOO0O00 ,O00000O00OO0O0000 ):#line:1778:def startTagStyleScript(self, token):
            return O0O000O0O0OOO0O00 .parser .phases ["inHead"].processStartTag (O00000O00OO0O0000 )#line:1779:return self.parser.phases["inHead"].processStartTag(token)
        def startTagInput (OO000OOOO00OOOO0O ,O0OOO00OOOOO0O00O ):#line:1781:def startTagInput(self, token):
            if ("type"in O0OOO00OOOOO0O00O ["data"]and O0OOO00OOOOO0O00O ["data"]["type"].translate (asciiUpper2Lower )=="hidden"):#line:1783:token["data"]["type"].translate(asciiUpper2Lower) == "hidden"):
                OO000OOOO00OOOO0O .parser .parseError ("unexpected-hidden-input-in-table")#line:1784:self.parser.parseError("unexpected-hidden-input-in-table")
                OO000OOOO00OOOO0O .tree .insertElement (O0OOO00OOOOO0O00O )#line:1785:self.tree.insertElement(token)
                OO000OOOO00OOOO0O .tree .openElements .pop ()#line:1787:self.tree.openElements.pop()
            else :#line:1788:else:
                OO000OOOO00OOOO0O .startTagOther (O0OOO00OOOOO0O00O )#line:1789:self.startTagOther(token)
        def startTagForm (O0000OOO0O0O0O0OO ,OOOO0O000O000O0O0 ):#line:1791:def startTagForm(self, token):
            O0000OOO0O0O0O0OO .parser .parseError ("unexpected-form-in-table")#line:1792:self.parser.parseError("unexpected-form-in-table")
            if O0000OOO0O0O0O0OO .tree .formPointer is None :#line:1793:if self.tree.formPointer is None:
                O0000OOO0O0O0O0OO .tree .insertElement (OOOO0O000O000O0O0 )#line:1794:self.tree.insertElement(token)
                O0000OOO0O0O0O0OO .tree .formPointer =O0000OOO0O0O0O0OO .tree .openElements [-1 ]#line:1795:self.tree.formPointer = self.tree.openElements[-1]
                O0000OOO0O0O0O0OO .tree .openElements .pop ()#line:1796:self.tree.openElements.pop()
        def startTagOther (O0OO00O0000O000O0 ,O00OO00O00OO000OO ):#line:1798:def startTagOther(self, token):
            O0OO00O0000O000O0 .parser .parseError ("unexpected-start-tag-implies-table-voodoo",{"name":O00OO00O00OO000OO ["name"]})#line:1799:self.parser.parseError("unexpected-start-tag-implies-table-voodoo", {"name": token["name"]})
            O0OO00O0000O000O0 .tree .insertFromTable =True #line:1801:self.tree.insertFromTable = True
            O0OO00O0000O000O0 .parser .phases ["inBody"].processStartTag (O00OO00O00OO000OO )#line:1802:self.parser.phases["inBody"].processStartTag(token)
            O0OO00O0000O000O0 .tree .insertFromTable =False #line:1803:self.tree.insertFromTable = False
        def endTagTable (OOO000O00O00000O0 ,O0OO0OO00OOOOO0O0 ):#line:1805:def endTagTable(self, token):
            if OOO000O00O00000O0 .tree .elementInScope ("table",variant ="table"):#line:1806:if self.tree.elementInScope("table", variant="table"):
                OOO000O00O00000O0 .tree .generateImpliedEndTags ()#line:1807:self.tree.generateImpliedEndTags()
                if OOO000O00O00000O0 .tree .openElements [-1 ].name !="table":#line:1808:if self.tree.openElements[-1].name != "table":
                    OOO000O00O00000O0 .parser .parseError ("end-tag-too-early-named",{"gotName":"table","expectedName":OOO000O00O00000O0 .tree .openElements [-1 ].name })#line:1811:"expectedName": self.tree.openElements[-1].name})
                while OOO000O00O00000O0 .tree .openElements [-1 ].name !="table":#line:1812:while self.tree.openElements[-1].name != "table":
                    OOO000O00O00000O0 .tree .openElements .pop ()#line:1813:self.tree.openElements.pop()
                OOO000O00O00000O0 .tree .openElements .pop ()#line:1814:self.tree.openElements.pop()
                OOO000O00O00000O0 .parser .resetInsertionMode ()#line:1815:self.parser.resetInsertionMode()
            else :#line:1816:else:
                assert OOO000O00O00000O0 .parser .innerHTML #line:1818:assert self.parser.innerHTML
                OOO000O00O00000O0 .parser .parseError ()#line:1819:self.parser.parseError()
        def endTagIgnore (O00OO0O0OO0O0OO0O ,OOOO000O0O0O000OO ):#line:1821:def endTagIgnore(self, token):
            O00OO0O0OO0O0OO0O .parser .parseError ("unexpected-end-tag",{"name":OOOO000O0O0O000OO ["name"]})#line:1822:self.parser.parseError("unexpected-end-tag", {"name": token["name"]})
        def endTagOther (O000000OOO0OO00O0 ,O0O000OOOO000O00O ):#line:1824:def endTagOther(self, token):
            O000000OOO0OO00O0 .parser .parseError ("unexpected-end-tag-implies-table-voodoo",{"name":O0O000OOOO000O00O ["name"]})#line:1825:self.parser.parseError("unexpected-end-tag-implies-table-voodoo", {"name": token["name"]})
            O000000OOO0OO00O0 .tree .insertFromTable =True #line:1827:self.tree.insertFromTable = True
            O000000OOO0OO00O0 .parser .phases ["inBody"].processEndTag (O0O000OOOO000O00O )#line:1828:self.parser.phases["inBody"].processEndTag(token)
            O000000OOO0OO00O0 .tree .insertFromTable =False #line:1829:self.tree.insertFromTable = False
    class OOOOOO00OOO00OOOO (O0000OO000O0OOO00 ):#line:1831:class InTableTextPhase(Phase):
        def __init__ (O0O0OOO00O000OO00 ,O0OOOO00O0O000000 ,OOO000000000O00O0 ):#line:1832:def __init__(self, parser, tree):
            O0000OO000O0OOO00 .__init__ (O0O0OOO00O000OO00 ,O0OOOO00O0O000000 ,OOO000000000O00O0 )#line:1833:Phase.__init__(self, parser, tree)
            O0O0OOO00O000OO00 .originalPhase =None #line:1834:self.originalPhase = None
            O0O0OOO00O000OO00 .characterTokens =[]#line:1835:self.characterTokens = []
        def flushCharacters (O000OO0OOO0000O0O ):#line:1837:def flushCharacters(self):
            O0OO000OOO0O00OOO ="".join ([O00O00O00OO0O0O0O ["data"]for O00O00O00OO0O0O0O in O000OO0OOO0000O0O .characterTokens ])#line:1838:data = "".join([item["data"] for item in self.characterTokens])
            if any ([OOOOO00O0O00OO00O not in spaceCharacters for OOOOO00O0O00OO00O in O0OO000OOO0O00OOO ]):#line:1839:if any([item not in spaceCharacters for item in data]):
                OO00O0000O00O0O0O ={"type":tokenTypes ["Characters"],"data":O0OO000OOO0O00OOO }#line:1840:token = {"type": tokenTypes["Characters"], "data": data}
                O000OO0OOO0000O0O .parser .phases ["inTable"].insertText (OO00O0000O00O0O0O )#line:1841:self.parser.phases["inTable"].insertText(token)
            elif O0OO000OOO0O00OOO :#line:1842:elif data:
                O000OO0OOO0000O0O .tree .insertText (O0OO000OOO0O00OOO )#line:1843:self.tree.insertText(data)
            O000OO0OOO0000O0O .characterTokens =[]#line:1844:self.characterTokens = []
        def processComment (O000OOO000O0OO00O ,O00O0OOOO00OO000O ):#line:1846:def processComment(self, token):
            O000OOO000O0OO00O .flushCharacters ()#line:1847:self.flushCharacters()
            O000OOO000O0OO00O .parser .phase =O000OOO000O0OO00O .originalPhase #line:1848:self.parser.phase = self.originalPhase
            return O00O0OOOO00OO000O #line:1849:return token
        def processEOF (O000000OO0OOOO0OO ):#line:1851:def processEOF(self):
            O000000OO0OOOO0OO .flushCharacters ()#line:1852:self.flushCharacters()
            O000000OO0OOOO0OO .parser .phase =O000000OO0OOOO0OO .originalPhase #line:1853:self.parser.phase = self.originalPhase
            return True #line:1854:return True
        def processCharacters (OOOOO0OO00O0O00OO ,O00000000000O00O0 ):#line:1856:def processCharacters(self, token):
            if O00000000000O00O0 ["data"]=="\u0000":#line:1857:if token["data"] == "\u0000":
                return #line:1858:return
            OOOOO0OO00O0O00OO .characterTokens .append (O00000000000O00O0 )#line:1859:self.characterTokens.append(token)
        def processSpaceCharacters (O000OO0O000O0000O ,O00OOOOO000000OOO ):#line:1861:def processSpaceCharacters(self, token):
            O000OO0O000O0000O .characterTokens .append (O00OOOOO000000OOO )#line:1863:self.characterTokens.append(token)
        def processStartTag (O000O00O000OO0000 ,O0OO00OO0OOO0000O ):#line:1866:def processStartTag(self, token):
            O000O00O000OO0000 .flushCharacters ()#line:1867:self.flushCharacters()
            O000O00O000OO0000 .parser .phase =O000O00O000OO0000 .originalPhase #line:1868:self.parser.phase = self.originalPhase
            return O0OO00OO0OOO0000O #line:1869:return token
        def processEndTag (O00O00O0O00O00OOO ,O0OOOO0OOO0O0OOOO ):#line:1871:def processEndTag(self, token):
            O00O00O0O00O00OOO .flushCharacters ()#line:1872:self.flushCharacters()
            O00O00O0O00O00OOO .parser .phase =O00O00O0O00O00OOO .originalPhase #line:1873:self.parser.phase = self.originalPhase
            return O0OOOO0OOO0O0OOOO #line:1874:return token
    class OO0OO00O0O0O00OOO (O0000OO000O0OOO00 ):#line:1876:class InCaptionPhase(Phase):
        def __init__ (O0O000OO0OO0O0000 ,OOO0O0O0O0000OO0O ,OO000OOOOO00000OO ):#line:1878:def __init__(self, parser, tree):
            O0000OO000O0OOO00 .__init__ (O0O000OO0OO0O0000 ,OOO0O0O0O0000OO0O ,OO000OOOOO00000OO )#line:1879:Phase.__init__(self, parser, tree)
            O0O000OO0OO0O0000 .startTagHandler =_utils .MethodDispatcher ([("html",O0O000OO0OO0O0000 .startTagHtml ),(("caption","col","colgroup","tbody","td","tfoot","th","thead","tr"),O0O000OO0OO0O0000 .startTagTableElement )])#line:1885:])
            O0O000OO0OO0O0000 .startTagHandler .default =O0O000OO0OO0O0000 .startTagOther #line:1886:self.startTagHandler.default = self.startTagOther
            O0O000OO0OO0O0000 .endTagHandler =_utils .MethodDispatcher ([("caption",O0O000OO0OO0O0000 .endTagCaption ),("table",O0O000OO0OO0O0000 .endTagTable ),(("body","col","colgroup","html","tbody","td","tfoot","th","thead","tr"),O0O000OO0OO0O0000 .endTagIgnore )])#line:1893:])
            O0O000OO0OO0O0000 .endTagHandler .default =O0O000OO0OO0O0000 .endTagOther #line:1894:self.endTagHandler.default = self.endTagOther
        def ignoreEndTagCaption (O00O0O00OO0O0O000 ):#line:1896:def ignoreEndTagCaption(self):
            return not O00O0O00OO0O0O000 .tree .elementInScope ("caption",variant ="table")#line:1897:return not self.tree.elementInScope("caption", variant="table")
        def processEOF (O00O0000OO0000O0O ):#line:1899:def processEOF(self):
            O00O0000OO0000O0O .parser .phases ["inBody"].processEOF ()#line:1900:self.parser.phases["inBody"].processEOF()
        def processCharacters (OOOOO0O0OO0O0OOOO ,OOO0OOO00OOOOO0OO ):#line:1902:def processCharacters(self, token):
            return OOOOO0O0OO0O0OOOO .parser .phases ["inBody"].processCharacters (OOO0OOO00OOOOO0OO )#line:1903:return self.parser.phases["inBody"].processCharacters(token)
        def startTagTableElement (OOOO00O0O00000OOO ,O0O00OOO0O0O00000 ):#line:1905:def startTagTableElement(self, token):
            OOOO00O0O00000OOO .parser .parseError ()#line:1906:self.parser.parseError()
            O0O0O0O0OOOO0O0OO =OOOO00O0O00000OOO .ignoreEndTagCaption ()#line:1908:ignoreEndTag = self.ignoreEndTagCaption()
            OOOO00O0O00000OOO .parser .phase .processEndTag (impliedTagToken ("caption"))#line:1909:self.parser.phase.processEndTag(impliedTagToken("caption"))
            if not O0O0O0O0OOOO0O0OO :#line:1910:if not ignoreEndTag:
                return O0O00OOO0O0O00000 #line:1911:return token
        def startTagOther (OOOOO0O0OOOOO0O00 ,OOO000OOO0OO00000 ):#line:1913:def startTagOther(self, token):
            return OOOOO0O0OOOOO0O00 .parser .phases ["inBody"].processStartTag (OOO000OOO0OO00000 )#line:1914:return self.parser.phases["inBody"].processStartTag(token)
        def endTagCaption (OO0OOO00OOOO0OO00 ,OO000OOO0000O0OOO ):#line:1916:def endTagCaption(self, token):
            if not OO0OOO00OOOO0OO00 .ignoreEndTagCaption ():#line:1917:if not self.ignoreEndTagCaption():
                OO0OOO00OOOO0OO00 .tree .generateImpliedEndTags ()#line:1919:self.tree.generateImpliedEndTags()
                if OO0OOO00OOOO0OO00 .tree .openElements [-1 ].name !="caption":#line:1920:if self.tree.openElements[-1].name != "caption":
                    OO0OOO00OOOO0OO00 .parser .parseError ("expected-one-end-tag-but-got-another",{"gotName":"caption","expectedName":OO0OOO00OOOO0OO00 .tree .openElements [-1 ].name })#line:1923:"expectedName": self.tree.openElements[-1].name})
                while OO0OOO00OOOO0OO00 .tree .openElements [-1 ].name !="caption":#line:1924:while self.tree.openElements[-1].name != "caption":
                    OO0OOO00OOOO0OO00 .tree .openElements .pop ()#line:1925:self.tree.openElements.pop()
                OO0OOO00OOOO0OO00 .tree .openElements .pop ()#line:1926:self.tree.openElements.pop()
                OO0OOO00OOOO0OO00 .tree .clearActiveFormattingElements ()#line:1927:self.tree.clearActiveFormattingElements()
                OO0OOO00OOOO0OO00 .parser .phase =OO0OOO00OOOO0OO00 .parser .phases ["inTable"]#line:1928:self.parser.phase = self.parser.phases["inTable"]
            else :#line:1929:else:
                assert OO0OOO00OOOO0OO00 .parser .innerHTML #line:1931:assert self.parser.innerHTML
                OO0OOO00OOOO0OO00 .parser .parseError ()#line:1932:self.parser.parseError()
        def endTagTable (OOO00O0O00OO0OOO0 ,O00OOO0000O0O0000 ):#line:1934:def endTagTable(self, token):
            OOO00O0O00OO0OOO0 .parser .parseError ()#line:1935:self.parser.parseError()
            OO0O0OOOOOO0OOOOO =OOO00O0O00OO0OOO0 .ignoreEndTagCaption ()#line:1936:ignoreEndTag = self.ignoreEndTagCaption()
            OOO00O0O00OO0OOO0 .parser .phase .processEndTag (impliedTagToken ("caption"))#line:1937:self.parser.phase.processEndTag(impliedTagToken("caption"))
            if not OO0O0OOOOOO0OOOOO :#line:1938:if not ignoreEndTag:
                return O00OOO0000O0O0000 #line:1939:return token
        def endTagIgnore (O0OO0O00OOOO000OO ,O00OOO00OOOO00OO0 ):#line:1941:def endTagIgnore(self, token):
            O0OO0O00OOOO000OO .parser .parseError ("unexpected-end-tag",{"name":O00OOO00OOOO00OO0 ["name"]})#line:1942:self.parser.parseError("unexpected-end-tag", {"name": token["name"]})
        def endTagOther (OOOO0O0O0O000OOO0 ,O00000000O0OOOO00 ):#line:1944:def endTagOther(self, token):
            return OOOO0O0O0O000OOO0 .parser .phases ["inBody"].processEndTag (O00000000O0OOOO00 )#line:1945:return self.parser.phases["inBody"].processEndTag(token)
    class OOO0000OO00O0000O (O0000OO000O0OOO00 ):#line:1947:class InColumnGroupPhase(Phase):
        def __init__ (OO0O0000OO0000O00 ,O0O00O0O00O0O00OO ,O00OOO0O0OO0000O0 ):#line:1950:def __init__(self, parser, tree):
            O0000OO000O0OOO00 .__init__ (OO0O0000OO0000O00 ,O0O00O0O00O0O00OO ,O00OOO0O0OO0000O0 )#line:1951:Phase.__init__(self, parser, tree)
            OO0O0000OO0000O00 .startTagHandler =_utils .MethodDispatcher ([("html",OO0O0000OO0000O00 .startTagHtml ),("col",OO0O0000OO0000O00 .startTagCol )])#line:1956:])
            OO0O0000OO0000O00 .startTagHandler .default =OO0O0000OO0000O00 .startTagOther #line:1957:self.startTagHandler.default = self.startTagOther
            OO0O0000OO0000O00 .endTagHandler =_utils .MethodDispatcher ([("colgroup",OO0O0000OO0000O00 .endTagColgroup ),("col",OO0O0000OO0000O00 .endTagCol )])#line:1962:])
            OO0O0000OO0000O00 .endTagHandler .default =OO0O0000OO0000O00 .endTagOther #line:1963:self.endTagHandler.default = self.endTagOther
        def ignoreEndTagColgroup (O0OO000OO0OO00O0O ):#line:1965:def ignoreEndTagColgroup(self):
            return O0OO000OO0OO00O0O .tree .openElements [-1 ].name =="html"#line:1966:return self.tree.openElements[-1].name == "html"
        def processEOF (OOOO000O0OOO0OO0O ):#line:1968:def processEOF(self):
            if OOOO000O0OOO0OO0O .tree .openElements [-1 ].name =="html":#line:1969:if self.tree.openElements[-1].name == "html":
                assert OOOO000O0OOO0OO0O .parser .innerHTML #line:1970:assert self.parser.innerHTML
                return #line:1971:return
            else :#line:1972:else:
                O0OO0O00OOO0OO00O =OOOO000O0OOO0OO0O .ignoreEndTagColgroup ()#line:1973:ignoreEndTag = self.ignoreEndTagColgroup()
                OOOO000O0OOO0OO0O .endTagColgroup (impliedTagToken ("colgroup"))#line:1974:self.endTagColgroup(impliedTagToken("colgroup"))
                if not O0OO0O00OOO0OO00O :#line:1975:if not ignoreEndTag:
                    return True #line:1976:return True
        def processCharacters (O0O00000O00000000 ,O00OO0O0OO0000OOO ):#line:1978:def processCharacters(self, token):
            O0OO00O00000OOOOO =O0O00000O00000000 .ignoreEndTagColgroup ()#line:1979:ignoreEndTag = self.ignoreEndTagColgroup()
            O0O00000O00000000 .endTagColgroup (impliedTagToken ("colgroup"))#line:1980:self.endTagColgroup(impliedTagToken("colgroup"))
            if not O0OO00O00000OOOOO :#line:1981:if not ignoreEndTag:
                return O00OO0O0OO0000OOO #line:1982:return token
        def startTagCol (OO0OO000O0O000000 ,O0OO0000O00O0O00O ):#line:1984:def startTagCol(self, token):
            OO0OO000O0O000000 .tree .insertElement (O0OO0000O00O0O00O )#line:1985:self.tree.insertElement(token)
            OO0OO000O0O000000 .tree .openElements .pop ()#line:1986:self.tree.openElements.pop()
            O0OO0000O00O0O00O ["selfClosingAcknowledged"]=True #line:1987:token["selfClosingAcknowledged"] = True
        def startTagOther (O0OO0O00OO0000OOO ,O000O00OOO0OOO00O ):#line:1989:def startTagOther(self, token):
            OO000O000O0OOOO00 =O0OO0O00OO0000OOO .ignoreEndTagColgroup ()#line:1990:ignoreEndTag = self.ignoreEndTagColgroup()
            O0OO0O00OO0000OOO .endTagColgroup (impliedTagToken ("colgroup"))#line:1991:self.endTagColgroup(impliedTagToken("colgroup"))
            if not OO000O000O0OOOO00 :#line:1992:if not ignoreEndTag:
                return O000O00OOO0OOO00O #line:1993:return token
        def endTagColgroup (O0OO000O00OOOO00O ,O00000000000OOO00 ):#line:1995:def endTagColgroup(self, token):
            if O0OO000O00OOOO00O .ignoreEndTagColgroup ():#line:1996:if self.ignoreEndTagColgroup():
                assert O0OO000O00OOOO00O .parser .innerHTML #line:1998:assert self.parser.innerHTML
                O0OO000O00OOOO00O .parser .parseError ()#line:1999:self.parser.parseError()
            else :#line:2000:else:
                O0OO000O00OOOO00O .tree .openElements .pop ()#line:2001:self.tree.openElements.pop()
                O0OO000O00OOOO00O .parser .phase =O0OO000O00OOOO00O .parser .phases ["inTable"]#line:2002:self.parser.phase = self.parser.phases["inTable"]
        def endTagCol (OOOO00OO00000O0O0 ,O000OOOO0O00O0O0O ):#line:2004:def endTagCol(self, token):
            OOOO00OO00000O0O0 .parser .parseError ("no-end-tag",{"name":"col"})#line:2005:self.parser.parseError("no-end-tag", {"name": "col"})
        def endTagOther (OOO0O0000O0O0O0OO ,OOOO0O0O00OOO0O00 ):#line:2007:def endTagOther(self, token):
            O00OO0OOOOOOOO000 =OOO0O0000O0O0O0OO .ignoreEndTagColgroup ()#line:2008:ignoreEndTag = self.ignoreEndTagColgroup()
            OOO0O0000O0O0O0OO .endTagColgroup (impliedTagToken ("colgroup"))#line:2009:self.endTagColgroup(impliedTagToken("colgroup"))
            if not O00OO0OOOOOOOO000 :#line:2010:if not ignoreEndTag:
                return OOOO0O0O00OOO0O00 #line:2011:return token
    class OO000000O000O0000 (O0000OO000O0OOO00 ):#line:2013:class InTableBodyPhase(Phase):
        def __init__ (OO0OOOOO0OO0O00OO ,O0000OOOO00OOO00O ,O000O00OO0OOOOO0O ):#line:2015:def __init__(self, parser, tree):
            O0000OO000O0OOO00 .__init__ (OO0OOOOO0OO0O00OO ,O0000OOOO00OOO00O ,O000O00OO0OOOOO0O )#line:2016:Phase.__init__(self, parser, tree)
            OO0OOOOO0OO0O00OO .startTagHandler =_utils .MethodDispatcher ([("html",OO0OOOOO0OO0O00OO .startTagHtml ),("tr",OO0OOOOO0OO0O00OO .startTagTr ),(("td","th"),OO0OOOOO0OO0O00OO .startTagTableCell ),(("caption","col","colgroup","tbody","tfoot","thead"),OO0OOOOO0OO0O00OO .startTagTableOther )])#line:2023:])
            OO0OOOOO0OO0O00OO .startTagHandler .default =OO0OOOOO0OO0O00OO .startTagOther #line:2024:self.startTagHandler.default = self.startTagOther
            OO0OOOOO0OO0O00OO .endTagHandler =_utils .MethodDispatcher ([(("tbody","tfoot","thead"),OO0OOOOO0OO0O00OO .endTagTableRowGroup ),("table",OO0OOOOO0OO0O00OO .endTagTable ),(("body","caption","col","colgroup","html","td","th","tr"),OO0OOOOO0OO0O00OO .endTagIgnore )])#line:2031:])
            OO0OOOOO0OO0O00OO .endTagHandler .default =OO0OOOOO0OO0O00OO .endTagOther #line:2032:self.endTagHandler.default = self.endTagOther
        def clearStackToTableBodyContext (OO0000000O0O0OOOO ):#line:2035:def clearStackToTableBodyContext(self):
            while OO0000000O0O0OOOO .tree .openElements [-1 ].name not in ("tbody","tfoot","thead","html"):#line:2037:"thead", "html"):
                OO0000000O0O0OOOO .tree .openElements .pop ()#line:2040:self.tree.openElements.pop()
            if OO0000000O0O0OOOO .tree .openElements [-1 ].name =="html":#line:2041:if self.tree.openElements[-1].name == "html":
                assert OO0000000O0O0OOOO .parser .innerHTML #line:2042:assert self.parser.innerHTML
        def processEOF (OO0000OO0000000O0 ):#line:2045:def processEOF(self):
            OO0000OO0000000O0 .parser .phases ["inTable"].processEOF ()#line:2046:self.parser.phases["inTable"].processEOF()
        def processSpaceCharacters (O0O0O00O0O0000O0O ,O00000OO0O0O0O000 ):#line:2048:def processSpaceCharacters(self, token):
            return O0O0O00O0O0000O0O .parser .phases ["inTable"].processSpaceCharacters (O00000OO0O0O0O000 )#line:2049:return self.parser.phases["inTable"].processSpaceCharacters(token)
        def processCharacters (OOOO00OOOOOOO0OO0 ,O00OOO0O00000O0O0 ):#line:2051:def processCharacters(self, token):
            return OOOO00OOOOOOO0OO0 .parser .phases ["inTable"].processCharacters (O00OOO0O00000O0O0 )#line:2052:return self.parser.phases["inTable"].processCharacters(token)
        def startTagTr (O0OOO0OOO000OO00O ,O0OOO00OOOO0000OO ):#line:2054:def startTagTr(self, token):
            O0OOO0OOO000OO00O .clearStackToTableBodyContext ()#line:2055:self.clearStackToTableBodyContext()
            O0OOO0OOO000OO00O .tree .insertElement (O0OOO00OOOO0000OO )#line:2056:self.tree.insertElement(token)
            O0OOO0OOO000OO00O .parser .phase =O0OOO0OOO000OO00O .parser .phases ["inRow"]#line:2057:self.parser.phase = self.parser.phases["inRow"]
        def startTagTableCell (OOOOO0OO0OOO0OOOO ,O0OO0O000OOO0OOO0 ):#line:2059:def startTagTableCell(self, token):
            OOOOO0OO0OOO0OOOO .parser .parseError ("unexpected-cell-in-table-body",{"name":O0OO0O000OOO0OOO0 ["name"]})#line:2061:{"name": token["name"]})
            OOOOO0OO0OOO0OOOO .startTagTr (impliedTagToken ("tr","StartTag"))#line:2062:self.startTagTr(impliedTagToken("tr", "StartTag"))
            return O0OO0O000OOO0OOO0 #line:2063:return token
        def startTagTableOther (OO0OOO0000O00OOO0 ,OO00OO000000OOO00 ):#line:2065:def startTagTableOther(self, token):
            if (OO0OOO0000O00OOO0 .tree .elementInScope ("tbody",variant ="table")or OO0OOO0000O00OOO0 .tree .elementInScope ("thead",variant ="table")or OO0OOO0000O00OOO0 .tree .elementInScope ("tfoot",variant ="table")):#line:2069:self.tree.elementInScope("tfoot", variant="table")):
                OO0OOO0000O00OOO0 .clearStackToTableBodyContext ()#line:2070:self.clearStackToTableBodyContext()
                OO0OOO0000O00OOO0 .endTagTableRowGroup (impliedTagToken (OO0OOO0000O00OOO0 .tree .openElements [-1 ].name ))#line:2072:impliedTagToken(self.tree.openElements[-1].name))
                return OO00OO000000OOO00 #line:2073:return token
            else :#line:2074:else:
                assert OO0OOO0000O00OOO0 .parser .innerHTML #line:2076:assert self.parser.innerHTML
                OO0OOO0000O00OOO0 .parser .parseError ()#line:2077:self.parser.parseError()
        def startTagOther (OO0O0O0OOO000O0O0 ,OO00O00OOOOOOOOOO ):#line:2079:def startTagOther(self, token):
            return OO0O0O0OOO000O0O0 .parser .phases ["inTable"].processStartTag (OO00O00OOOOOOOOOO )#line:2080:return self.parser.phases["inTable"].processStartTag(token)
        def endTagTableRowGroup (O00OO0O00O00O0O0O ,OOO00O00OO00O0O00 ):#line:2082:def endTagTableRowGroup(self, token):
            if O00OO0O00O00O0O0O .tree .elementInScope (OOO00O00OO00O0O00 ["name"],variant ="table"):#line:2083:if self.tree.elementInScope(token["name"], variant="table"):
                O00OO0O00O00O0O0O .clearStackToTableBodyContext ()#line:2084:self.clearStackToTableBodyContext()
                O00OO0O00O00O0O0O .tree .openElements .pop ()#line:2085:self.tree.openElements.pop()
                O00OO0O00O00O0O0O .parser .phase =O00OO0O00O00O0O0O .parser .phases ["inTable"]#line:2086:self.parser.phase = self.parser.phases["inTable"]
            else :#line:2087:else:
                O00OO0O00O00O0O0O .parser .parseError ("unexpected-end-tag-in-table-body",{"name":OOO00O00OO00O0O00 ["name"]})#line:2089:{"name": token["name"]})
        def endTagTable (O00000O00O00O0000 ,O0O00000OO00O00O0 ):#line:2091:def endTagTable(self, token):
            if (O00000O00O00O0000 .tree .elementInScope ("tbody",variant ="table")or O00000O00O00O0000 .tree .elementInScope ("thead",variant ="table")or O00000O00O00O0000 .tree .elementInScope ("tfoot",variant ="table")):#line:2094:self.tree.elementInScope("tfoot", variant="table")):
                O00000O00O00O0000 .clearStackToTableBodyContext ()#line:2095:self.clearStackToTableBodyContext()
                O00000O00O00O0000 .endTagTableRowGroup (impliedTagToken (O00000O00O00O0000 .tree .openElements [-1 ].name ))#line:2097:impliedTagToken(self.tree.openElements[-1].name))
                return O0O00000OO00O00O0 #line:2098:return token
            else :#line:2099:else:
                assert O00000O00O00O0000 .parser .innerHTML #line:2101:assert self.parser.innerHTML
                O00000O00O00O0000 .parser .parseError ()#line:2102:self.parser.parseError()
        def endTagIgnore (O00O000O000000O0O ,O00O00OO00OOOOO0O ):#line:2104:def endTagIgnore(self, token):
            O00O000O000000O0O .parser .parseError ("unexpected-end-tag-in-table-body",{"name":O00O00OO00OOOOO0O ["name"]})#line:2106:{"name": token["name"]})
        def endTagOther (O0O0O000O00OOO000 ,O0OOOO000O0OO0000 ):#line:2108:def endTagOther(self, token):
            return O0O0O000O00OOO000 .parser .phases ["inTable"].processEndTag (O0OOOO000O0OO0000 )#line:2109:return self.parser.phases["inTable"].processEndTag(token)
    class O00000O0000OO0000 (O0000OO000O0OOO00 ):#line:2111:class InRowPhase(Phase):
        def __init__ (OO00000O0O0OO0OO0 ,OO0O0000O000OO0OO ,OOOOOO0O00O0OO0O0 ):#line:2113:def __init__(self, parser, tree):
            O0000OO000O0OOO00 .__init__ (OO00000O0O0OO0OO0 ,OO0O0000O000OO0OO ,OOOOOO0O00O0OO0O0 )#line:2114:Phase.__init__(self, parser, tree)
            OO00000O0O0OO0OO0 .startTagHandler =_utils .MethodDispatcher ([("html",OO00000O0O0OO0OO0 .startTagHtml ),(("td","th"),OO00000O0O0OO0OO0 .startTagTableCell ),(("caption","col","colgroup","tbody","tfoot","thead","tr"),OO00000O0O0OO0OO0 .startTagTableOther )])#line:2120:])
            OO00000O0O0OO0OO0 .startTagHandler .default =OO00000O0O0OO0OO0 .startTagOther #line:2121:self.startTagHandler.default = self.startTagOther
            OO00000O0O0OO0OO0 .endTagHandler =_utils .MethodDispatcher ([("tr",OO00000O0O0OO0OO0 .endTagTr ),("table",OO00000O0O0OO0OO0 .endTagTable ),(("tbody","tfoot","thead"),OO00000O0O0OO0OO0 .endTagTableRowGroup ),(("body","caption","col","colgroup","html","td","th"),OO00000O0O0OO0OO0 .endTagIgnore )])#line:2129:])
            OO00000O0O0OO0OO0 .endTagHandler .default =OO00000O0O0OO0OO0 .endTagOther #line:2130:self.endTagHandler.default = self.endTagOther
        def clearStackToTableRowContext (O00O00OO0O000O000 ):#line:2133:def clearStackToTableRowContext(self):
            while O00O00OO0O000O000 .tree .openElements [-1 ].name not in ("tr","html"):#line:2134:while self.tree.openElements[-1].name not in ("tr", "html"):
                O00O00OO0O000O000 .parser .parseError ("unexpected-implied-end-tag-in-table-row",{"name":O00O00OO0O000O000 .tree .openElements [-1 ].name })#line:2136:{"name": self.tree.openElements[-1].name})
                O00O00OO0O000O000 .tree .openElements .pop ()#line:2137:self.tree.openElements.pop()
        def ignoreEndTagTr (OOO0O0OOOO00O00O0 ):#line:2139:def ignoreEndTagTr(self):
            return not OOO0O0OOOO00O00O0 .tree .elementInScope ("tr",variant ="table")#line:2140:return not self.tree.elementInScope("tr", variant="table")
        def processEOF (O0O0OOOOOO0000OOO ):#line:2143:def processEOF(self):
            O0O0OOOOOO0000OOO .parser .phases ["inTable"].processEOF ()#line:2144:self.parser.phases["inTable"].processEOF()
        def processSpaceCharacters (OO0OO0OO00OO0OOO0 ,O0O00OOOOOOO0O0O0 ):#line:2146:def processSpaceCharacters(self, token):
            return OO0OO0OO00OO0OOO0 .parser .phases ["inTable"].processSpaceCharacters (O0O00OOOOOOO0O0O0 )#line:2147:return self.parser.phases["inTable"].processSpaceCharacters(token)
        def processCharacters (O0O0O0OO0OO0O00OO ,OOOOOO00O00OOO0OO ):#line:2149:def processCharacters(self, token):
            return O0O0O0OO0OO0O00OO .parser .phases ["inTable"].processCharacters (OOOOOO00O00OOO0OO )#line:2150:return self.parser.phases["inTable"].processCharacters(token)
        def startTagTableCell (OO0000OO0OOO00OO0 ,O0O0OO0OO0OOO000O ):#line:2152:def startTagTableCell(self, token):
            OO0000OO0OOO00OO0 .clearStackToTableRowContext ()#line:2153:self.clearStackToTableRowContext()
            OO0000OO0OOO00OO0 .tree .insertElement (O0O0OO0OO0OOO000O )#line:2154:self.tree.insertElement(token)
            OO0000OO0OOO00OO0 .parser .phase =OO0000OO0OOO00OO0 .parser .phases ["inCell"]#line:2155:self.parser.phase = self.parser.phases["inCell"]
            OO0000OO0OOO00OO0 .tree .activeFormattingElements .append (Marker )#line:2156:self.tree.activeFormattingElements.append(Marker)
        def startTagTableOther (OO0OO0O00O00O0000 ,O0000OO0O0OO00OO0 ):#line:2158:def startTagTableOther(self, token):
            O00OO00OO0O000OOO =OO0OO0O00O00O0000 .ignoreEndTagTr ()#line:2159:ignoreEndTag = self.ignoreEndTagTr()
            OO0OO0O00O00O0000 .endTagTr (impliedTagToken ("tr"))#line:2160:self.endTagTr(impliedTagToken("tr"))
            if not O00OO00OO0O000OOO :#line:2162:if not ignoreEndTag:
                return O0000OO0O0OO00OO0 #line:2163:return token
        def startTagOther (O000O00OOO00000O0 ,O0O0O00O0OOO0OOOO ):#line:2165:def startTagOther(self, token):
            return O000O00OOO00000O0 .parser .phases ["inTable"].processStartTag (O0O0O00O0OOO0OOOO )#line:2166:return self.parser.phases["inTable"].processStartTag(token)
        def endTagTr (OOOO00OO0OOOO00O0 ,OOO0O0OO0OO000000 ):#line:2168:def endTagTr(self, token):
            if not OOOO00OO0OOOO00O0 .ignoreEndTagTr ():#line:2169:if not self.ignoreEndTagTr():
                OOOO00OO0OOOO00O0 .clearStackToTableRowContext ()#line:2170:self.clearStackToTableRowContext()
                OOOO00OO0OOOO00O0 .tree .openElements .pop ()#line:2171:self.tree.openElements.pop()
                OOOO00OO0OOOO00O0 .parser .phase =OOOO00OO0OOOO00O0 .parser .phases ["inTableBody"]#line:2172:self.parser.phase = self.parser.phases["inTableBody"]
            else :#line:2173:else:
                assert OOOO00OO0OOOO00O0 .parser .innerHTML #line:2175:assert self.parser.innerHTML
                OOOO00OO0OOOO00O0 .parser .parseError ()#line:2176:self.parser.parseError()
        def endTagTable (OO00OOO0OO0OO00OO ,OOOO0OOO0O00OOOO0 ):#line:2178:def endTagTable(self, token):
            O0OO0O00O00O0OO0O =OO00OOO0OO0OO00OO .ignoreEndTagTr ()#line:2179:ignoreEndTag = self.ignoreEndTagTr()
            OO00OOO0OO0OO00OO .endTagTr (impliedTagToken ("tr"))#line:2180:self.endTagTr(impliedTagToken("tr"))
            if not O0OO0O00O00O0OO0O :#line:2183:if not ignoreEndTag:
                return OOOO0OOO0O00OOOO0 #line:2184:return token
        def endTagTableRowGroup (OO0OOO00OOOO0O0O0 ,O0O00O0O0O0OOO000 ):#line:2186:def endTagTableRowGroup(self, token):
            if OO0OOO00OOOO0O0O0 .tree .elementInScope (O0O00O0O0O0OOO000 ["name"],variant ="table"):#line:2187:if self.tree.elementInScope(token["name"], variant="table"):
                OO0OOO00OOOO0O0O0 .endTagTr (impliedTagToken ("tr"))#line:2188:self.endTagTr(impliedTagToken("tr"))
                return O0O00O0O0O0OOO000 #line:2189:return token
            else :#line:2190:else:
                OO0OOO00OOOO0O0O0 .parser .parseError ()#line:2191:self.parser.parseError()
        def endTagIgnore (O0O0O0O0O00O0O00O ,OO0OO0O00O0O0O000 ):#line:2193:def endTagIgnore(self, token):
            O0O0O0O0O00O0O00O .parser .parseError ("unexpected-end-tag-in-table-row",{"name":OO0OO0O00O0O0O000 ["name"]})#line:2195:{"name": token["name"]})
        def endTagOther (OO00OO0O0O00O0000 ,O000O0OO0O0O00OOO ):#line:2197:def endTagOther(self, token):
            return OO00OO0O0O00O0000 .parser .phases ["inTable"].processEndTag (O000O0OO0O0O00OOO )#line:2198:return self.parser.phases["inTable"].processEndTag(token)
    class OO0OOO00OO0O0000O (O0000OO000O0OOO00 ):#line:2200:class InCellPhase(Phase):
        def __init__ (OOO0O00O0OO0O0OO0 ,OO0O000OO000OO0O0 ,O000O0OO00O0O0OO0 ):#line:2202:def __init__(self, parser, tree):
            O0000OO000O0OOO00 .__init__ (OOO0O00O0OO0O0OO0 ,OO0O000OO000OO0O0 ,O000O0OO00O0O0OO0 )#line:2203:Phase.__init__(self, parser, tree)
            OOO0O00O0OO0O0OO0 .startTagHandler =_utils .MethodDispatcher ([("html",OOO0O00O0OO0O0OO0 .startTagHtml ),(("caption","col","colgroup","tbody","td","tfoot","th","thead","tr"),OOO0O00O0OO0O0OO0 .startTagTableOther )])#line:2208:])
            OOO0O00O0OO0O0OO0 .startTagHandler .default =OOO0O00O0OO0O0OO0 .startTagOther #line:2209:self.startTagHandler.default = self.startTagOther
            OOO0O00O0OO0O0OO0 .endTagHandler =_utils .MethodDispatcher ([(("td","th"),OOO0O00O0OO0O0OO0 .endTagTableCell ),(("body","caption","col","colgroup","html"),OOO0O00O0OO0O0OO0 .endTagIgnore ),(("table","tbody","tfoot","thead","tr"),OOO0O00O0OO0O0OO0 .endTagImply )])#line:2215:])
            OOO0O00O0OO0O0OO0 .endTagHandler .default =OOO0O00O0OO0O0OO0 .endTagOther #line:2216:self.endTagHandler.default = self.endTagOther
        def closeCell (O000OO00O0OO0OOO0 ):#line:2219:def closeCell(self):
            if O000OO00O0OO0OOO0 .tree .elementInScope ("td",variant ="table"):#line:2220:if self.tree.elementInScope("td", variant="table"):
                O000OO00O0OO0OOO0 .endTagTableCell (impliedTagToken ("td"))#line:2221:self.endTagTableCell(impliedTagToken("td"))
            elif O000OO00O0OO0OOO0 .tree .elementInScope ("th",variant ="table"):#line:2222:elif self.tree.elementInScope("th", variant="table"):
                O000OO00O0OO0OOO0 .endTagTableCell (impliedTagToken ("th"))#line:2223:self.endTagTableCell(impliedTagToken("th"))
        def processEOF (OO0O00O000O0O0000 ):#line:2226:def processEOF(self):
            OO0O00O000O0O0000 .parser .phases ["inBody"].processEOF ()#line:2227:self.parser.phases["inBody"].processEOF()
        def processCharacters (O00O000O000OO0OOO ,OO00O0OO00OO0OOO0 ):#line:2229:def processCharacters(self, token):
            return O00O000O000OO0OOO .parser .phases ["inBody"].processCharacters (OO00O0OO00OO0OOO0 )#line:2230:return self.parser.phases["inBody"].processCharacters(token)
        def startTagTableOther (O0OO0O000O0O0OO0O ,O000OOO000000OOOO ):#line:2232:def startTagTableOther(self, token):
            if (O0OO0O000O0O0OO0O .tree .elementInScope ("td",variant ="table")or O0OO0O000O0O0OO0O .tree .elementInScope ("th",variant ="table")):#line:2234:self.tree.elementInScope("th", variant="table")):
                O0OO0O000O0O0OO0O .closeCell ()#line:2235:self.closeCell()
                return O000OOO000000OOOO #line:2236:return token
            else :#line:2237:else:
                assert O0OO0O000O0O0OO0O .parser .innerHTML #line:2239:assert self.parser.innerHTML
                O0OO0O000O0O0OO0O .parser .parseError ()#line:2240:self.parser.parseError()
        def startTagOther (O0000O000O0O0O00O ,O0000000O00O000OO ):#line:2242:def startTagOther(self, token):
            return O0000O000O0O0O00O .parser .phases ["inBody"].processStartTag (O0000000O00O000OO )#line:2243:return self.parser.phases["inBody"].processStartTag(token)
        def endTagTableCell (OO00O0OOOO000O0OO ,O00OOO0O0O0000OOO ):#line:2245:def endTagTableCell(self, token):
            if OO00O0OOOO000O0OO .tree .elementInScope (O00OOO0O0O0000OOO ["name"],variant ="table"):#line:2246:if self.tree.elementInScope(token["name"], variant="table"):
                OO00O0OOOO000O0OO .tree .generateImpliedEndTags (O00OOO0O0O0000OOO ["name"])#line:2247:self.tree.generateImpliedEndTags(token["name"])
                if OO00O0OOOO000O0OO .tree .openElements [-1 ].name !=O00OOO0O0O0000OOO ["name"]:#line:2248:if self.tree.openElements[-1].name != token["name"]:
                    OO00O0OOOO000O0OO .parser .parseError ("unexpected-cell-end-tag",{"name":O00OOO0O0O0000OOO ["name"]})#line:2250:{"name": token["name"]})
                    while True :#line:2251:while True:
                        OOOO000O0O00O000O =OO00O0OOOO000O0OO .tree .openElements .pop ()#line:2252:node = self.tree.openElements.pop()
                        if OOOO000O0O00O000O .name ==O00OOO0O0O0000OOO ["name"]:#line:2253:if node.name == token["name"]:
                            break #line:2254:break
                else :#line:2255:else:
                    OO00O0OOOO000O0OO .tree .openElements .pop ()#line:2256:self.tree.openElements.pop()
                OO00O0OOOO000O0OO .tree .clearActiveFormattingElements ()#line:2257:self.tree.clearActiveFormattingElements()
                OO00O0OOOO000O0OO .parser .phase =OO00O0OOOO000O0OO .parser .phases ["inRow"]#line:2258:self.parser.phase = self.parser.phases["inRow"]
            else :#line:2259:else:
                OO00O0OOOO000O0OO .parser .parseError ("unexpected-end-tag",{"name":O00OOO0O0O0000OOO ["name"]})#line:2260:self.parser.parseError("unexpected-end-tag", {"name": token["name"]})
        def endTagIgnore (O0OO0OOO0OO0OOOOO ,OO00O00O0000O0000 ):#line:2262:def endTagIgnore(self, token):
            O0OO0OOO0OO0OOOOO .parser .parseError ("unexpected-end-tag",{"name":OO00O00O0000O0000 ["name"]})#line:2263:self.parser.parseError("unexpected-end-tag", {"name": token["name"]})
        def endTagImply (O0O0OOO00O0000000 ,OO0O00OO00OOOO0OO ):#line:2265:def endTagImply(self, token):
            if O0O0OOO00O0000000 .tree .elementInScope (OO0O00OO00OOOO0OO ["name"],variant ="table"):#line:2266:if self.tree.elementInScope(token["name"], variant="table"):
                O0O0OOO00O0000000 .closeCell ()#line:2267:self.closeCell()
                return OO0O00OO00OOOO0OO #line:2268:return token
            else :#line:2269:else:
                O0O0OOO00O0000000 .parser .parseError ()#line:2271:self.parser.parseError()
        def endTagOther (OO000OO0O0OOO00OO ,OO00O00OO00000O0O ):#line:2273:def endTagOther(self, token):
            return OO000OO0O0OOO00OO .parser .phases ["inBody"].processEndTag (OO00O00OO00000O0O )#line:2274:return self.parser.phases["inBody"].processEndTag(token)
    class OOO00OOO00O00O0O0 (O0000OO000O0OOO00 ):#line:2276:class InSelectPhase(Phase):
        def __init__ (OO000OO000OO00OOO ,OO0OO00O0000O00O0 ,O0OO0O00OO0O00O0O ):#line:2277:def __init__(self, parser, tree):
            O0000OO000O0OOO00 .__init__ (OO000OO000OO00OOO ,OO0OO00O0000O00O0 ,O0OO0O00OO0O00O0O )#line:2278:Phase.__init__(self, parser, tree)
            OO000OO000OO00OOO .startTagHandler =_utils .MethodDispatcher ([("html",OO000OO000OO00OOO .startTagHtml ),("option",OO000OO000OO00OOO .startTagOption ),("optgroup",OO000OO000OO00OOO .startTagOptgroup ),("select",OO000OO000OO00OOO .startTagSelect ),(("input","keygen","textarea"),OO000OO000OO00OOO .startTagInput ),("script",OO000OO000OO00OOO .startTagScript )])#line:2287:])
            OO000OO000OO00OOO .startTagHandler .default =OO000OO000OO00OOO .startTagOther #line:2288:self.startTagHandler.default = self.startTagOther
            OO000OO000OO00OOO .endTagHandler =_utils .MethodDispatcher ([("option",OO000OO000OO00OOO .endTagOption ),("optgroup",OO000OO000OO00OOO .endTagOptgroup ),("select",OO000OO000OO00OOO .endTagSelect )])#line:2294:])
            OO000OO000OO00OOO .endTagHandler .default =OO000OO000OO00OOO .endTagOther #line:2295:self.endTagHandler.default = self.endTagOther
        def processEOF (O0OOO00000O0O0OO0 ):#line:2298:def processEOF(self):
            if O0OOO00000O0O0OO0 .tree .openElements [-1 ].name !="html":#line:2299:if self.tree.openElements[-1].name != "html":
                O0OOO00000O0O0OO0 .parser .parseError ("eof-in-select")#line:2300:self.parser.parseError("eof-in-select")
            else :#line:2301:else:
                assert O0OOO00000O0O0OO0 .parser .innerHTML #line:2302:assert self.parser.innerHTML
        def processCharacters (O00OOOOO0OO0OO000 ,O0O00O0O000OOOO0O ):#line:2304:def processCharacters(self, token):
            if O0O00O0O000OOOO0O ["data"]=="\u0000":#line:2305:if token["data"] == "\u0000":
                return #line:2306:return
            O00OOOOO0OO0OO000 .tree .insertText (O0O00O0O000OOOO0O ["data"])#line:2307:self.tree.insertText(token["data"])
        def startTagOption (O00O0OO0O0OOO0O0O ,OO00OOOOO0O00O0OO ):#line:2309:def startTagOption(self, token):
            if O00O0OO0O0OOO0O0O .tree .openElements [-1 ].name =="option":#line:2311:if self.tree.openElements[-1].name == "option":
                O00O0OO0O0OOO0O0O .tree .openElements .pop ()#line:2312:self.tree.openElements.pop()
            O00O0OO0O0OOO0O0O .tree .insertElement (OO00OOOOO0O00O0OO )#line:2313:self.tree.insertElement(token)
        def startTagOptgroup (OOO0O0OO0O000O00O ,O0OO0000OOOO00O0O ):#line:2315:def startTagOptgroup(self, token):
            if OOO0O0OO0O000O00O .tree .openElements [-1 ].name =="option":#line:2316:if self.tree.openElements[-1].name == "option":
                OOO0O0OO0O000O00O .tree .openElements .pop ()#line:2317:self.tree.openElements.pop()
            if OOO0O0OO0O000O00O .tree .openElements [-1 ].name =="optgroup":#line:2318:if self.tree.openElements[-1].name == "optgroup":
                OOO0O0OO0O000O00O .tree .openElements .pop ()#line:2319:self.tree.openElements.pop()
            OOO0O0OO0O000O00O .tree .insertElement (O0OO0000OOOO00O0O )#line:2320:self.tree.insertElement(token)
        def startTagSelect (OO000OO0000O0OO0O ,OOO0O00O00O00O00O ):#line:2322:def startTagSelect(self, token):
            OO000OO0000O0OO0O .parser .parseError ("unexpected-select-in-select")#line:2323:self.parser.parseError("unexpected-select-in-select")
            OO000OO0000O0OO0O .endTagSelect (impliedTagToken ("select"))#line:2324:self.endTagSelect(impliedTagToken("select"))
        def startTagInput (OO0O00000OO00O00O ,OO0O0O0O0OO0OOOOO ):#line:2326:def startTagInput(self, token):
            OO0O00000OO00O00O .parser .parseError ("unexpected-input-in-select")#line:2327:self.parser.parseError("unexpected-input-in-select")
            if OO0O00000OO00O00O .tree .elementInScope ("select",variant ="select"):#line:2328:if self.tree.elementInScope("select", variant="select"):
                OO0O00000OO00O00O .endTagSelect (impliedTagToken ("select"))#line:2329:self.endTagSelect(impliedTagToken("select"))
                return OO0O0O0O0OO0OOOOO #line:2330:return token
            else :#line:2331:else:
                assert OO0O00000OO00O00O .parser .innerHTML #line:2332:assert self.parser.innerHTML
        def startTagScript (OO00O0O000OO0O0O0 ,O0000O0OO0O000O0O ):#line:2334:def startTagScript(self, token):
            return OO00O0O000OO0O0O0 .parser .phases ["inHead"].processStartTag (O0000O0OO0O000O0O )#line:2335:return self.parser.phases["inHead"].processStartTag(token)
        def startTagOther (OOO00O0OOO0OO0O0O ,O00OOO0000O0OO0OO ):#line:2337:def startTagOther(self, token):
            OOO00O0OOO0OO0O0O .parser .parseError ("unexpected-start-tag-in-select",{"name":O00OOO0000O0OO0OO ["name"]})#line:2339:{"name": token["name"]})
        def endTagOption (O0O0O0O0O0OOOO0O0 ,OOO0O00O0OOOO0000 ):#line:2341:def endTagOption(self, token):
            if O0O0O0O0O0OOOO0O0 .tree .openElements [-1 ].name =="option":#line:2342:if self.tree.openElements[-1].name == "option":
                O0O0O0O0O0OOOO0O0 .tree .openElements .pop ()#line:2343:self.tree.openElements.pop()
            else :#line:2344:else:
                O0O0O0O0O0OOOO0O0 .parser .parseError ("unexpected-end-tag-in-select",{"name":"option"})#line:2346:{"name": "option"})
        def endTagOptgroup (O0OOO00O0OO000000 ,OOOOO0000O00O0O00 ):#line:2348:def endTagOptgroup(self, token):
            if (O0OOO00O0OO000000 .tree .openElements [-1 ].name =="option"and O0OOO00O0OO000000 .tree .openElements [-2 ].name =="optgroup"):#line:2351:self.tree.openElements[-2].name == "optgroup"):
                O0OOO00O0OO000000 .tree .openElements .pop ()#line:2352:self.tree.openElements.pop()
            if O0OOO00O0OO000000 .tree .openElements [-1 ].name =="optgroup":#line:2354:if self.tree.openElements[-1].name == "optgroup":
                O0OOO00O0OO000000 .tree .openElements .pop ()#line:2355:self.tree.openElements.pop()
            else :#line:2357:else:
                O0OOO00O0OO000000 .parser .parseError ("unexpected-end-tag-in-select",{"name":"optgroup"})#line:2359:{"name": "optgroup"})
        def endTagSelect (OO0O0O00000OO000O ,OO0O0O0000OOOOOO0 ):#line:2361:def endTagSelect(self, token):
            if OO0O0O00000OO000O .tree .elementInScope ("select",variant ="select"):#line:2362:if self.tree.elementInScope("select", variant="select"):
                O0O00O0000O000OO0 =OO0O0O00000OO000O .tree .openElements .pop ()#line:2363:node = self.tree.openElements.pop()
                while O0O00O0000O000OO0 .name !="select":#line:2364:while node.name != "select":
                    O0O00O0000O000OO0 =OO0O0O00000OO000O .tree .openElements .pop ()#line:2365:node = self.tree.openElements.pop()
                OO0O0O00000OO000O .parser .resetInsertionMode ()#line:2366:self.parser.resetInsertionMode()
            else :#line:2367:else:
                assert OO0O0O00000OO000O .parser .innerHTML #line:2369:assert self.parser.innerHTML
                OO0O0O00000OO000O .parser .parseError ()#line:2370:self.parser.parseError()
        def endTagOther (OO000OOO00O000O0O ,OO0O0OOO00OO0O0OO ):#line:2372:def endTagOther(self, token):
            OO000OOO00O000O0O .parser .parseError ("unexpected-end-tag-in-select",{"name":OO0O0OOO00OO0O0OO ["name"]})#line:2374:{"name": token["name"]})
    class OOOOOO00O0O0O0O00 (O0000OO000O0OOO00 ):#line:2376:class InSelectInTablePhase(Phase):
        def __init__ (OO0O0O0000O00O000 ,OOOO0O000OO0OO00O ,O00OOO0O0O00O0O0O ):#line:2377:def __init__(self, parser, tree):
            O0000OO000O0OOO00 .__init__ (OO0O0O0000O00O000 ,OOOO0O000OO0OO00O ,O00OOO0O0O00O0O0O )#line:2378:Phase.__init__(self, parser, tree)
            OO0O0O0000O00O000 .startTagHandler =_utils .MethodDispatcher ([(("caption","table","tbody","tfoot","thead","tr","td","th"),OO0O0O0000O00O000 .startTagTable )])#line:2383:])
            OO0O0O0000O00O000 .startTagHandler .default =OO0O0O0000O00O000 .startTagOther #line:2384:self.startTagHandler.default = self.startTagOther
            OO0O0O0000O00O000 .endTagHandler =_utils .MethodDispatcher ([(("caption","table","tbody","tfoot","thead","tr","td","th"),OO0O0O0000O00O000 .endTagTable )])#line:2389:])
            OO0O0O0000O00O000 .endTagHandler .default =OO0O0O0000O00O000 .endTagOther #line:2390:self.endTagHandler.default = self.endTagOther
        def processEOF (OO0O0OOO0OO0OOO0O ):#line:2392:def processEOF(self):
            OO0O0OOO0OO0OOO0O .parser .phases ["inSelect"].processEOF ()#line:2393:self.parser.phases["inSelect"].processEOF()
        def processCharacters (O0O00O0O0O00O00OO ,O0OO0OO0OO0O0O0O0 ):#line:2395:def processCharacters(self, token):
            return O0O00O0O0O00O00OO .parser .phases ["inSelect"].processCharacters (O0OO0OO0OO0O0O0O0 )#line:2396:return self.parser.phases["inSelect"].processCharacters(token)
        def startTagTable (OOOO0O000000OO000 ,OO0OO0OOOO000O0OO ):#line:2398:def startTagTable(self, token):
            OOOO0O000000OO000 .parser .parseError ("unexpected-table-element-start-tag-in-select-in-table",{"name":OO0OO0OOOO000O0OO ["name"]})#line:2399:self.parser.parseError("unexpected-table-element-start-tag-in-select-in-table", {"name": token["name"]})
            OOOO0O000000OO000 .endTagOther (impliedTagToken ("select"))#line:2400:self.endTagOther(impliedTagToken("select"))
            return OO0OO0OOOO000O0OO #line:2401:return token
        def startTagOther (O000OO0O0OO0O0OOO ,OOOO0OOOO0O0OOO00 ):#line:2403:def startTagOther(self, token):
            return O000OO0O0OO0O0OOO .parser .phases ["inSelect"].processStartTag (OOOO0OOOO0O0OOO00 )#line:2404:return self.parser.phases["inSelect"].processStartTag(token)
        def endTagTable (OO0OOO00O0000O000 ,OOOO000O0000O0OOO ):#line:2406:def endTagTable(self, token):
            OO0OOO00O0000O000 .parser .parseError ("unexpected-table-element-end-tag-in-select-in-table",{"name":OOOO000O0000O0OOO ["name"]})#line:2407:self.parser.parseError("unexpected-table-element-end-tag-in-select-in-table", {"name": token["name"]})
            if OO0OOO00O0000O000 .tree .elementInScope (OOOO000O0000O0OOO ["name"],variant ="table"):#line:2408:if self.tree.elementInScope(token["name"], variant="table"):
                OO0OOO00O0000O000 .endTagOther (impliedTagToken ("select"))#line:2409:self.endTagOther(impliedTagToken("select"))
                return OOOO000O0000O0OOO #line:2410:return token
        def endTagOther (O000OOO0OO0OOO00O ,O00O00OO0OOOO000O ):#line:2412:def endTagOther(self, token):
            return O000OOO0OO0OOO00O .parser .phases ["inSelect"].processEndTag (O00O00OO0OOOO000O )#line:2413:return self.parser.phases["inSelect"].processEndTag(token)
    class O0OO0OOOOOO00000O (O0000OO000O0OOO00 ):#line:2415:class InForeignContentPhase(Phase):
        breakoutElements =frozenset (["b","big","blockquote","body","br","center","code","dd","div","dl","dt","em","embed","h1","h2","h3","h4","h5","h6","head","hr","i","img","li","listing","menu","meta","nobr","ol","p","pre","ruby","s","small","span","strong","strike","sub","sup","table","tt","u","ul","var"])#line:2423:"table", "tt", "u", "ul", "var"])
        def __init__ (OOOOO0OO0OOOO000O ,O0OOOOOOOOOO0O0OO ,OOO0OOO0000OOO000 ):#line:2425:def __init__(self, parser, tree):
            O0000OO000O0OOO00 .__init__ (OOOOO0OO0OOOO000O ,O0OOOOOOOOOO0O0OO ,OOO0OOO0000OOO000 )#line:2426:Phase.__init__(self, parser, tree)
        def adjustSVGTagNames (O00OO00O0OOOOOO0O ,OOO0OO00O0O00OOOO ):#line:2428:def adjustSVGTagNames(self, token):
            OOO0O00OO000OO0O0 ={"altglyph":"altGlyph","altglyphdef":"altGlyphDef","altglyphitem":"altGlyphItem","animatecolor":"animateColor","animatemotion":"animateMotion","animatetransform":"animateTransform","clippath":"clipPath","feblend":"feBlend","fecolormatrix":"feColorMatrix","fecomponenttransfer":"feComponentTransfer","fecomposite":"feComposite","feconvolvematrix":"feConvolveMatrix","fediffuselighting":"feDiffuseLighting","fedisplacementmap":"feDisplacementMap","fedistantlight":"feDistantLight","feflood":"feFlood","fefunca":"feFuncA","fefuncb":"feFuncB","fefuncg":"feFuncG","fefuncr":"feFuncR","fegaussianblur":"feGaussianBlur","feimage":"feImage","femerge":"feMerge","femergenode":"feMergeNode","femorphology":"feMorphology","feoffset":"feOffset","fepointlight":"fePointLight","fespecularlighting":"feSpecularLighting","fespotlight":"feSpotLight","fetile":"feTile","feturbulence":"feTurbulence","foreignobject":"foreignObject","glyphref":"glyphRef","lineargradient":"linearGradient","radialgradient":"radialGradient","textpath":"textPath"}#line:2464:"textpath": "textPath"}
            if OOO0OO00O0O00OOOO ["name"]in OOO0O00OO000OO0O0 :#line:2466:if token["name"] in replacements:
                OOO0OO00O0O00OOOO ["name"]=OOO0O00OO000OO0O0 [OOO0OO00O0O00OOOO ["name"]]#line:2467:token["name"] = replacements[token["name"]]
        def processCharacters (O0000OO0OOO0OO0O0 ,O0OO0O0O0O0OO00O0 ):#line:2469:def processCharacters(self, token):
            if O0OO0O0O0O0OO00O0 ["data"]=="\u0000":#line:2470:if token["data"] == "\u0000":
                O0OO0O0O0O0OO00O0 ["data"]="\uFFFD"#line:2471:token["data"] = "\uFFFD"
            elif (O0000OO0OOO0OO0O0 .parser .framesetOK and any (OOOO0O0O0O000O0O0 not in spaceCharacters for OOOO0O0O0O000O0O0 in O0OO0O0O0O0OO00O0 ["data"])):#line:2473:any(char not in spaceCharacters for char in token["data"])):
                O0000OO0OOO0OO0O0 .parser .framesetOK =False #line:2474:self.parser.framesetOK = False
            O0000OO000O0OOO00 .processCharacters (O0000OO0OOO0OO0O0 ,O0OO0O0O0O0OO00O0 )#line:2475:Phase.processCharacters(self, token)
        def processStartTag (O0OO00O0OOOO0OO0O ,OOO00000OOO0O0O00 ):#line:2477:def processStartTag(self, token):
            OO0O0O0000OOOO000 =O0OO00O0OOOO0OO0O .tree .openElements [-1 ]#line:2478:currentNode = self.tree.openElements[-1]
            if (OOO00000OOO0O0O00 ["name"]in O0OO00O0OOOO0OO0O .breakoutElements or (OOO00000OOO0O0O00 ["name"]=="font"and set (OOO00000OOO0O0O00 ["data"].keys ())&set (["color","face","size"]))):#line:2481:set(token["data"].keys()) & set(["color", "face", "size"]))):
                O0OO00O0OOOO0OO0O .parser .parseError ("unexpected-html-element-in-foreign-content",{"name":OOO00000OOO0O0O00 ["name"]})#line:2483:{"name": token["name"]})
                while (O0OO00O0OOOO0OO0O .tree .openElements [-1 ].namespace !=O0OO00O0OOOO0OO0O .tree .defaultNamespace and not O0OO00O0OOOO0OO0O .parser .isHTMLIntegrationPoint (O0OO00O0OOOO0OO0O .tree .openElements [-1 ])and not O0OO00O0OOOO0OO0O .parser .isMathMLTextIntegrationPoint (O0OO00O0OOOO0OO0O .tree .openElements [-1 ])):#line:2487:not self.parser.isMathMLTextIntegrationPoint(self.tree.openElements[-1])):
                    O0OO00O0OOOO0OO0O .tree .openElements .pop ()#line:2488:self.tree.openElements.pop()
                return OOO00000OOO0O0O00 #line:2489:return token
            else :#line:2491:else:
                if OO0O0O0000OOOO000 .namespace ==namespaces ["mathml"]:#line:2492:if currentNode.namespace == namespaces["mathml"]:
                    O0OO00O0OOOO0OO0O .parser .adjustMathMLAttributes (OOO00000OOO0O0O00 )#line:2493:self.parser.adjustMathMLAttributes(token)
                elif OO0O0O0000OOOO000 .namespace ==namespaces ["svg"]:#line:2494:elif currentNode.namespace == namespaces["svg"]:
                    O0OO00O0OOOO0OO0O .adjustSVGTagNames (OOO00000OOO0O0O00 )#line:2495:self.adjustSVGTagNames(token)
                    O0OO00O0OOOO0OO0O .parser .adjustSVGAttributes (OOO00000OOO0O0O00 )#line:2496:self.parser.adjustSVGAttributes(token)
                O0OO00O0OOOO0OO0O .parser .adjustForeignAttributes (OOO00000OOO0O0O00 )#line:2497:self.parser.adjustForeignAttributes(token)
                OOO00000OOO0O0O00 ["namespace"]=OO0O0O0000OOOO000 .namespace #line:2498:token["namespace"] = currentNode.namespace
                O0OO00O0OOOO0OO0O .tree .insertElement (OOO00000OOO0O0O00 )#line:2499:self.tree.insertElement(token)
                if OOO00000OOO0O0O00 ["selfClosing"]:#line:2500:if token["selfClosing"]:
                    O0OO00O0OOOO0OO0O .tree .openElements .pop ()#line:2501:self.tree.openElements.pop()
                    OOO00000OOO0O0O00 ["selfClosingAcknowledged"]=True #line:2502:token["selfClosingAcknowledged"] = True
        def processEndTag (OOO0O000O0O0O0OO0 ,OOOO000O00000OO0O ):#line:2504:def processEndTag(self, token):
            O000OOOOO0000O0OO =len (OOO0O000O0O0O0OO0 .tree .openElements )-1 #line:2505:nodeIndex = len(self.tree.openElements) - 1
            OO000O0OOOOOOOO0O =OOO0O000O0O0O0OO0 .tree .openElements [-1 ]#line:2506:node = self.tree.openElements[-1]
            if OO000O0OOOOOOOO0O .name .translate (asciiUpper2Lower )!=OOOO000O00000OO0O ["name"]:#line:2507:if node.name.translate(asciiUpper2Lower) != token["name"]:
                OOO0O000O0O0O0OO0 .parser .parseError ("unexpected-end-tag",{"name":OOOO000O00000OO0O ["name"]})#line:2508:self.parser.parseError("unexpected-end-tag", {"name": token["name"]})
            while True :#line:2510:while True:
                if OO000O0OOOOOOOO0O .name .translate (asciiUpper2Lower )==OOOO000O00000OO0O ["name"]:#line:2511:if node.name.translate(asciiUpper2Lower) == token["name"]:
                    if OOO0O000O0O0O0OO0 .parser .phase ==OOO0O000O0O0O0OO0 .parser .phases ["inTableText"]:#line:2513:if self.parser.phase == self.parser.phases["inTableText"]:
                        OOO0O000O0O0O0OO0 .parser .phase .flushCharacters ()#line:2514:self.parser.phase.flushCharacters()
                        OOO0O000O0O0O0OO0 .parser .phase =OOO0O000O0O0O0OO0 .parser .phase .originalPhase #line:2515:self.parser.phase = self.parser.phase.originalPhase
                    while OOO0O000O0O0O0OO0 .tree .openElements .pop ()!=OO000O0OOOOOOOO0O :#line:2516:while self.tree.openElements.pop() != node:
                        assert OOO0O000O0O0O0OO0 .tree .openElements #line:2517:assert self.tree.openElements
                    OO0000OO0O0O0O0O0 =None #line:2518:new_token = None
                    break #line:2519:break
                O000OOOOO0000O0OO -=1 #line:2520:nodeIndex -= 1
                OO000O0OOOOOOOO0O =OOO0O000O0O0O0OO0 .tree .openElements [O000OOOOO0000O0OO ]#line:2522:node = self.tree.openElements[nodeIndex]
                if OO000O0OOOOOOOO0O .namespace !=OOO0O000O0O0O0OO0 .tree .defaultNamespace :#line:2523:if node.namespace != self.tree.defaultNamespace:
                    continue #line:2524:continue
                else :#line:2525:else:
                    OO0000OO0O0O0O0O0 =OOO0O000O0O0O0OO0 .parser .phase .processEndTag (OOOO000O00000OO0O )#line:2526:new_token = self.parser.phase.processEndTag(token)
                    break #line:2527:break
            return OO0000OO0O0O0O0O0 #line:2528:return new_token
    class O0OOO000000O00O00 (O0000OO000O0OOO00 ):#line:2530:class AfterBodyPhase(Phase):
        def __init__ (OO00OO0OOO00OOOO0 ,O00OO0OO000000O0O ,O0OOOOO000O0O00OO ):#line:2531:def __init__(self, parser, tree):
            O0000OO000O0OOO00 .__init__ (OO00OO0OOO00OOOO0 ,O00OO0OO000000O0O ,O0OOOOO000O0O00OO )#line:2532:Phase.__init__(self, parser, tree)
            OO00OO0OOO00OOOO0 .startTagHandler =_utils .MethodDispatcher ([("html",OO00OO0OOO00OOOO0 .startTagHtml )])#line:2536:])
            OO00OO0OOO00OOOO0 .startTagHandler .default =OO00OO0OOO00OOOO0 .startTagOther #line:2537:self.startTagHandler.default = self.startTagOther
            OO00OO0OOO00OOOO0 .endTagHandler =_utils .MethodDispatcher ([("html",OO00OO0OOO00OOOO0 .endTagHtml )])#line:2539:self.endTagHandler = _utils.MethodDispatcher([("html", self.endTagHtml)])
            OO00OO0OOO00OOOO0 .endTagHandler .default =OO00OO0OOO00OOOO0 .endTagOther #line:2540:self.endTagHandler.default = self.endTagOther
        def processEOF (OOOOO0O000O0OOOOO ):#line:2542:def processEOF(self):
            pass #line:2544:pass
        def processComment (OO0O00O0OO0O0O000 ,O0OO0OOOO00000O00 ):#line:2546:def processComment(self, token):
            OO0O00O0OO0O0O000 .tree .insertComment (O0OO0OOOO00000O00 ,OO0O00O0OO0O0O000 .tree .openElements [0 ])#line:2549:self.tree.insertComment(token, self.tree.openElements[0])
        def processCharacters (OOO0OOOOOO000O000 ,O0O00O00OOO00O0OO ):#line:2551:def processCharacters(self, token):
            OOO0OOOOOO000O000 .parser .parseError ("unexpected-char-after-body")#line:2552:self.parser.parseError("unexpected-char-after-body")
            OOO0OOOOOO000O000 .parser .phase =OOO0OOOOOO000O000 .parser .phases ["inBody"]#line:2553:self.parser.phase = self.parser.phases["inBody"]
            return O0O00O00OOO00O0OO #line:2554:return token
        def startTagHtml (OOOOO000OO0O0O000 ,OOO0O0OO000OO0O00 ):#line:2556:def startTagHtml(self, token):
            return OOOOO000OO0O0O000 .parser .phases ["inBody"].processStartTag (OOO0O0OO000OO0O00 )#line:2557:return self.parser.phases["inBody"].processStartTag(token)
        def startTagOther (OO0O0OO000OOO000O ,O00O000O0OO0OOOOO ):#line:2559:def startTagOther(self, token):
            OO0O0OO000OOO000O .parser .parseError ("unexpected-start-tag-after-body",{"name":O00O000O0OO0OOOOO ["name"]})#line:2561:{"name": token["name"]})
            OO0O0OO000OOO000O .parser .phase =OO0O0OO000OOO000O .parser .phases ["inBody"]#line:2562:self.parser.phase = self.parser.phases["inBody"]
            return O00O000O0OO0OOOOO #line:2563:return token
        def endTagHtml (O0OO0OO0OO0OO000O ,O0OOOO000O00O000O ):#line:2565:def endTagHtml(self, name):
            if O0OO0OO0OO0OO000O .parser .innerHTML :#line:2566:if self.parser.innerHTML:
                O0OO0OO0OO0OO000O .parser .parseError ("unexpected-end-tag-after-body-innerhtml")#line:2567:self.parser.parseError("unexpected-end-tag-after-body-innerhtml")
            else :#line:2568:else:
                O0OO0OO0OO0OO000O .parser .phase =O0OO0OO0OO0OO000O .parser .phases ["afterAfterBody"]#line:2569:self.parser.phase = self.parser.phases["afterAfterBody"]
        def endTagOther (O0OO000O000OOO00O ,O0O000OOOOOO000OO ):#line:2571:def endTagOther(self, token):
            O0OO000O000OOO00O .parser .parseError ("unexpected-end-tag-after-body",{"name":O0O000OOOOOO000OO ["name"]})#line:2573:{"name": token["name"]})
            O0OO000O000OOO00O .parser .phase =O0OO000O000OOO00O .parser .phases ["inBody"]#line:2574:self.parser.phase = self.parser.phases["inBody"]
            return O0O000OOOOOO000OO #line:2575:return token
    class OO00OOO000O0OOO00 (O0000OO000O0OOO00 ):#line:2577:class InFramesetPhase(Phase):
        def __init__ (OOO0O00OOOOO00O0O ,O0O0000O00O000000 ,OO0OO000000O000O0 ):#line:2579:def __init__(self, parser, tree):
            O0000OO000O0OOO00 .__init__ (OOO0O00OOOOO00O0O ,O0O0000O00O000000 ,OO0OO000000O000O0 )#line:2580:Phase.__init__(self, parser, tree)
            OOO0O00OOOOO00O0O .startTagHandler =_utils .MethodDispatcher ([("html",OOO0O00OOOOO00O0O .startTagHtml ),("frameset",OOO0O00OOOOO00O0O .startTagFrameset ),("frame",OOO0O00OOOOO00O0O .startTagFrame ),("noframes",OOO0O00OOOOO00O0O .startTagNoframes )])#line:2587:])
            OOO0O00OOOOO00O0O .startTagHandler .default =OOO0O00OOOOO00O0O .startTagOther #line:2588:self.startTagHandler.default = self.startTagOther
            OOO0O00OOOOO00O0O .endTagHandler =_utils .MethodDispatcher ([("frameset",OOO0O00OOOOO00O0O .endTagFrameset )])#line:2592:])
            OOO0O00OOOOO00O0O .endTagHandler .default =OOO0O00OOOOO00O0O .endTagOther #line:2593:self.endTagHandler.default = self.endTagOther
        def processEOF (O00O0O0O00000O00O ):#line:2595:def processEOF(self):
            if O00O0O0O00000O00O .tree .openElements [-1 ].name !="html":#line:2596:if self.tree.openElements[-1].name != "html":
                O00O0O0O00000O00O .parser .parseError ("eof-in-frameset")#line:2597:self.parser.parseError("eof-in-frameset")
            else :#line:2598:else:
                assert O00O0O0O00000O00O .parser .innerHTML #line:2599:assert self.parser.innerHTML
        def processCharacters (O00OOOOO00OO0O0O0 ,O0O00OO00O0OO0OOO ):#line:2601:def processCharacters(self, token):
            O00OOOOO00OO0O0O0 .parser .parseError ("unexpected-char-in-frameset")#line:2602:self.parser.parseError("unexpected-char-in-frameset")
        def startTagFrameset (O0OOOO00O00OOOO0O ,O0O0O000O0O00OO0O ):#line:2604:def startTagFrameset(self, token):
            O0OOOO00O00OOOO0O .tree .insertElement (O0O0O000O0O00OO0O )#line:2605:self.tree.insertElement(token)
        def startTagFrame (O00O00O000O0OOOO0 ,OOOOOOOOOOO0000O0 ):#line:2607:def startTagFrame(self, token):
            O00O00O000O0OOOO0 .tree .insertElement (OOOOOOOOOOO0000O0 )#line:2608:self.tree.insertElement(token)
            O00O00O000O0OOOO0 .tree .openElements .pop ()#line:2609:self.tree.openElements.pop()
        def startTagNoframes (O000O0O0OO0O0O000 ,O0O00O00O0O0OOOOO ):#line:2611:def startTagNoframes(self, token):
            return O000O0O0OO0O0O000 .parser .phases ["inBody"].processStartTag (O0O00O00O0O0OOOOO )#line:2612:return self.parser.phases["inBody"].processStartTag(token)
        def startTagOther (O00O00O00OO000OO0 ,OO0O00O0OOOO0OO00 ):#line:2614:def startTagOther(self, token):
            O00O00O00OO000OO0 .parser .parseError ("unexpected-start-tag-in-frameset",{"name":OO0O00O0OOOO0OO00 ["name"]})#line:2616:{"name": token["name"]})
        def endTagFrameset (O0O00O00OOO0000OO ,OO0O00OOOOO0OO0OO ):#line:2618:def endTagFrameset(self, token):
            if O0O00O00OOO0000OO .tree .openElements [-1 ].name =="html":#line:2619:if self.tree.openElements[-1].name == "html":
                O0O00O00OOO0000OO .parser .parseError ("unexpected-frameset-in-frameset-innerhtml")#line:2621:self.parser.parseError("unexpected-frameset-in-frameset-innerhtml")
            else :#line:2622:else:
                O0O00O00OOO0000OO .tree .openElements .pop ()#line:2623:self.tree.openElements.pop()
            if (not O0O00O00OOO0000OO .parser .innerHTML and O0O00O00OOO0000OO .tree .openElements [-1 ].name !="frameset"):#line:2625:self.tree.openElements[-1].name != "frameset"):
                O0O00O00OOO0000OO .parser .phase =O0O00O00OOO0000OO .parser .phases ["afterFrameset"]#line:2628:self.parser.phase = self.parser.phases["afterFrameset"]
        def endTagOther (OO0OOOO0OO0OOO000 ,O0O000OO0OOO0O0O0 ):#line:2630:def endTagOther(self, token):
            OO0OOOO0OO0OOO000 .parser .parseError ("unexpected-end-tag-in-frameset",{"name":O0O000OO0OOO0O0O0 ["name"]})#line:2632:{"name": token["name"]})
    class O0O000OOOO00OO00O (O0000OO000O0OOO00 ):#line:2634:class AfterFramesetPhase(Phase):
        def __init__ (OOOO0OOO0O0O000O0 ,O0OO0OO0OOO00000O ,OO0OO0O0O0OO000O0 ):#line:2636:def __init__(self, parser, tree):
            O0000OO000O0OOO00 .__init__ (OOOO0OOO0O0O000O0 ,O0OO0OO0OOO00000O ,OO0OO0O0O0OO000O0 )#line:2637:Phase.__init__(self, parser, tree)
            OOOO0OOO0O0O000O0 .startTagHandler =_utils .MethodDispatcher ([("html",OOOO0OOO0O0O000O0 .startTagHtml ),("noframes",OOOO0OOO0O0O000O0 .startTagNoframes )])#line:2642:])
            OOOO0OOO0O0O000O0 .startTagHandler .default =OOOO0OOO0O0O000O0 .startTagOther #line:2643:self.startTagHandler.default = self.startTagOther
            OOOO0OOO0O0O000O0 .endTagHandler =_utils .MethodDispatcher ([("html",OOOO0OOO0O0O000O0 .endTagHtml )])#line:2647:])
            OOOO0OOO0O0O000O0 .endTagHandler .default =OOOO0OOO0O0O000O0 .endTagOther #line:2648:self.endTagHandler.default = self.endTagOther
        def processEOF (OOOOO0O00OOO00O00 ):#line:2650:def processEOF(self):
            pass #line:2652:pass
        def processCharacters (O000O0OO00O0O0000 ,O00OOOOO000O00000 ):#line:2654:def processCharacters(self, token):
            O000O0OO00O0O0000 .parser .parseError ("unexpected-char-after-frameset")#line:2655:self.parser.parseError("unexpected-char-after-frameset")
        def startTagNoframes (O00O0000000O0O00O ,O0O00O000OOO00000 ):#line:2657:def startTagNoframes(self, token):
            return O00O0000000O0O00O .parser .phases ["inHead"].processStartTag (O0O00O000OOO00000 )#line:2658:return self.parser.phases["inHead"].processStartTag(token)
        def startTagOther (O0OOO00O0OO0OOO0O ,OO0OOO00000000O00 ):#line:2660:def startTagOther(self, token):
            O0OOO00O0OO0OOO0O .parser .parseError ("unexpected-start-tag-after-frameset",{"name":OO0OOO00000000O00 ["name"]})#line:2662:{"name": token["name"]})
        def endTagHtml (OOOOOO0OO0O0OOO0O ,O00OOO000OOOO0000 ):#line:2664:def endTagHtml(self, token):
            OOOOOO0OO0O0OOO0O .parser .phase =OOOOOO0OO0O0OOO0O .parser .phases ["afterAfterFrameset"]#line:2665:self.parser.phase = self.parser.phases["afterAfterFrameset"]
        def endTagOther (O000OOOO0OO0000O0 ,O0OO0O0OO000O0O0O ):#line:2667:def endTagOther(self, token):
            O000OOOO0OO0000O0 .parser .parseError ("unexpected-end-tag-after-frameset",{"name":O0OO0O0OO000O0O0O ["name"]})#line:2669:{"name": token["name"]})
    class O000OOOO0O00O00OO (O0000OO000O0OOO00 ):#line:2671:class AfterAfterBodyPhase(Phase):
        def __init__ (OO00OOO0O0O00O000 ,O0OO0OOOOO00O00O0 ,O00OO0OO0O000O0O0 ):#line:2672:def __init__(self, parser, tree):
            O0000OO000O0OOO00 .__init__ (OO00OOO0O0O00O000 ,O0OO0OOOOO00O00O0 ,O00OO0OO0O000O0O0 )#line:2673:Phase.__init__(self, parser, tree)
            OO00OOO0O0O00O000 .startTagHandler =_utils .MethodDispatcher ([("html",OO00OOO0O0O00O000 .startTagHtml )])#line:2677:])
            OO00OOO0O0O00O000 .startTagHandler .default =OO00OOO0O0O00O000 .startTagOther #line:2678:self.startTagHandler.default = self.startTagOther
        def processEOF (O0O0OO0OOOOO0OOOO ):#line:2680:def processEOF(self):
            pass #line:2681:pass
        def processComment (O0OOOO00O0OO000OO ,OO00OO00O0O00OO0O ):#line:2683:def processComment(self, token):
            O0OOOO00O0OO000OO .tree .insertComment (OO00OO00O0O00OO0O ,O0OOOO00O0OO000OO .tree .document )#line:2684:self.tree.insertComment(token, self.tree.document)
        def processSpaceCharacters (OO0OOO0O00OO0O0O0 ,OOOO000OOO00OOOO0 ):#line:2686:def processSpaceCharacters(self, token):
            return OO0OOO0O00OO0O0O0 .parser .phases ["inBody"].processSpaceCharacters (OOOO000OOO00OOOO0 )#line:2687:return self.parser.phases["inBody"].processSpaceCharacters(token)
        def processCharacters (O0O000OO00O0O0000 ,O00O0OO0OOOO00OO0 ):#line:2689:def processCharacters(self, token):
            O0O000OO00O0O0000 .parser .parseError ("expected-eof-but-got-char")#line:2690:self.parser.parseError("expected-eof-but-got-char")
            O0O000OO00O0O0000 .parser .phase =O0O000OO00O0O0000 .parser .phases ["inBody"]#line:2691:self.parser.phase = self.parser.phases["inBody"]
            return O00O0OO0OOOO00OO0 #line:2692:return token
        def startTagHtml (O0O0OOOOO0OOOO000 ,O00O000OO0O0O0OOO ):#line:2694:def startTagHtml(self, token):
            return O0O0OOOOO0OOOO000 .parser .phases ["inBody"].processStartTag (O00O000OO0O0O0OOO )#line:2695:return self.parser.phases["inBody"].processStartTag(token)
        def startTagOther (O00000OO00OOOOO00 ,O0000O0O0OO000OOO ):#line:2697:def startTagOther(self, token):
            O00000OO00OOOOO00 .parser .parseError ("expected-eof-but-got-start-tag",{"name":O0000O0O0OO000OOO ["name"]})#line:2699:{"name": token["name"]})
            O00000OO00OOOOO00 .parser .phase =O00000OO00OOOOO00 .parser .phases ["inBody"]#line:2700:self.parser.phase = self.parser.phases["inBody"]
            return O0000O0O0OO000OOO #line:2701:return token
        def processEndTag (OO0O0000OO0OO0O00 ,O0O0000O000O00000 ):#line:2703:def processEndTag(self, token):
            OO0O0000OO0OO0O00 .parser .parseError ("expected-eof-but-got-end-tag",{"name":O0O0000O000O00000 ["name"]})#line:2705:{"name": token["name"]})
            OO0O0000OO0OO0O00 .parser .phase =OO0O0000OO0OO0O00 .parser .phases ["inBody"]#line:2706:self.parser.phase = self.parser.phases["inBody"]
            return O0O0000O000O00000 #line:2707:return token
    class OO0OO00OOO0O0O0OO (O0000OO000O0OOO00 ):#line:2709:class AfterAfterFramesetPhase(Phase):
        def __init__ (O000O00O0000O00OO ,O00OO000OOO00O0O0 ,OOO00OO0OOOOOOOO0 ):#line:2710:def __init__(self, parser, tree):
            O0000OO000O0OOO00 .__init__ (O000O00O0000O00OO ,O00OO000OOO00O0O0 ,OOO00OO0OOOOOOOO0 )#line:2711:Phase.__init__(self, parser, tree)
            O000O00O0000O00OO .startTagHandler =_utils .MethodDispatcher ([("html",O000O00O0000O00OO .startTagHtml ),("noframes",O000O00O0000O00OO .startTagNoFrames )])#line:2716:])
            O000O00O0000O00OO .startTagHandler .default =O000O00O0000O00OO .startTagOther #line:2717:self.startTagHandler.default = self.startTagOther
        def processEOF (OOO000O0OOOOOO000 ):#line:2719:def processEOF(self):
            pass #line:2720:pass
        def processComment (O000OO000O0O0OOO0 ,OOOOOO00OO00O00O0 ):#line:2722:def processComment(self, token):
            O000OO000O0O0OOO0 .tree .insertComment (OOOOOO00OO00O00O0 ,O000OO000O0O0OOO0 .tree .document )#line:2723:self.tree.insertComment(token, self.tree.document)
        def processSpaceCharacters (OOO000000OO0O000O ,O0O0OOO0OOOOO0O0O ):#line:2725:def processSpaceCharacters(self, token):
            return OOO000000OO0O000O .parser .phases ["inBody"].processSpaceCharacters (O0O0OOO0OOOOO0O0O )#line:2726:return self.parser.phases["inBody"].processSpaceCharacters(token)
        def processCharacters (OOO00OOOO00O00O0O ,O0OOO0OOOO0O00O0O ):#line:2728:def processCharacters(self, token):
            OOO00OOOO00O00O0O .parser .parseError ("expected-eof-but-got-char")#line:2729:self.parser.parseError("expected-eof-but-got-char")
        def startTagHtml (O00O00OOOOO0OOO00 ,O000O0OO00OO000OO ):#line:2731:def startTagHtml(self, token):
            return O00O00OOOOO0OOO00 .parser .phases ["inBody"].processStartTag (O000O0OO00OO000OO )#line:2732:return self.parser.phases["inBody"].processStartTag(token)
        def startTagNoFrames (OOOOOOO000OO0O0OO ,O0000O0O0O000000O ):#line:2734:def startTagNoFrames(self, token):
            return OOOOOOO000OO0O0OO .parser .phases ["inHead"].processStartTag (O0000O0O0O000000O )#line:2735:return self.parser.phases["inHead"].processStartTag(token)
        def startTagOther (O0OOOO000OOOO00OO ,OOOO0O0000O00O00O ):#line:2737:def startTagOther(self, token):
            O0OOOO000OOOO00OO .parser .parseError ("expected-eof-but-got-start-tag",{"name":OOOO0O0000O00O00O ["name"]})#line:2739:{"name": token["name"]})
        def processEndTag (OOOO0O00000OO0OOO ,O0OO0OOO0OOOOO00O ):#line:2741:def processEndTag(self, token):
            OOOO0O00000OO0OOO .parser .parseError ("expected-eof-but-got-end-tag",{"name":O0OO0OOO0OOOOO00O ["name"]})#line:2743:{"name": token["name"]})
    return {"initial":OOO0OOO0OOO0OO0OO ,"beforeHtml":O0OOOO0OO000000OO ,"beforeHead":O0OO000OO00O0000O ,"inHead":OO0O0OOO0O0OOOOO0 ,"inHeadNoscript":OO00OO0O0O000OO00 ,"afterHead":O00OOO0O0O0O0OO0O ,"inBody":O000OOOO000OO000O ,"text":O000000OOO0OO0O00 ,"inTable":OOOO0O0000OOO0OOO ,"inTableText":OOOOOO00OOO00OOOO ,"inCaption":OO0OO00O0O0O00OOO ,"inColumnGroup":OOO0000OO00O0000O ,"inTableBody":OO000000O000O0000 ,"inRow":O00000O0000OO0000 ,"inCell":OO0OOO00OO0O0000O ,"inSelect":OOO00OOO00O00O0O0 ,"inSelectInTable":OOOOOO00O0O0O0O00 ,"inForeignContent":O0OO0OOOOOO00000O ,"afterBody":O0OOO000000O00O00 ,"inFrameset":OO00OOO000O0OOO00 ,"afterFrameset":O0O000OOOO00OO00O ,"afterAfterBody":O000OOOO0O00O00OO ,"afterAfterFrameset":OO0OO00OOO0O0O0OO ,}#line:2771:}
def adjust_attributes (O00000OOO0OOO00OO ,O00OOOOOOOOOOOOO0 ):#line:2774:def adjust_attributes(token, replacements):
    O0OO00OO0OO000OOO =viewkeys (O00000OOO0OOO00OO ['data'])&viewkeys (O00OOOOOOOOOOOOO0 )#line:2775:needs_adjustment = viewkeys(token['data']) & viewkeys(replacements)
    if O0OO00OO0OO000OOO :#line:2776:if needs_adjustment:
        O00000OOO0OOO00OO ['data']=OrderedDict ((O00OOOOOOOOOOOOO0 .get (O00000O000O0OO0OO ,O00000O000O0OO0OO ),OOO0O00OOOOO0O000 )for O00000O000O0OO0OO ,OOO0O00OOOOO0O000 in O00000OOO0OOO00OO ['data'].items ())#line:2778:for k, v in token['data'].items())
def impliedTagToken (O0OO0OO0O000OO00O ,type ="EndTag",attributes =None ,selfClosing =False ):#line:2782:selfClosing=False):
    if attributes is None :#line:2783:if attributes is None:
        attributes ={}#line:2784:attributes = {}
    return {"type":tokenTypes [type ],"name":O0OO0OO0O000OO00O ,"data":attributes ,"selfClosing":selfClosing }#line:2786:"selfClosing": selfClosing}
class ParseError (Exception ):#line:2789:class ParseError(Exception):
    ""#line:2790:"""Error in parsed document"""
    pass #line:2791:pass
