""#line:9:"""
from __future__ import unicode_literals #line:10:from __future__ import unicode_literals
import codecs #line:12:import codecs
from email import message_from_file #line:13:from email import message_from_file
import json #line:14:import json
import logging #line:15:import logging
import re #line:16:import re
from .import DistlibException ,__version__ #line:19:from . import DistlibException, __version__
from .compat import StringIO ,string_types ,text_type #line:20:from .compat import StringIO, string_types, text_type
from .markers import interpret #line:21:from .markers import interpret
from .util import extract_by_key ,get_extras #line:22:from .util import extract_by_key, get_extras
from .version import get_scheme ,PEP440_VERSION_RE #line:23:from .version import get_scheme, PEP440_VERSION_RE
O0OO0O0OOO0OOOO00 =logging .getLogger (__name__ )#line:25:logger = logging.getLogger(__name__)
class MetadataMissingError (DistlibException ):#line:28:class MetadataMissingError(DistlibException):
    ""#line:29:"""A required metadata is missing"""
class MetadataConflictError (DistlibException ):#line:32:class MetadataConflictError(DistlibException):
    ""#line:33:"""Attempt to read or write metadata fields that are conflictual."""
class MetadataUnrecognizedVersionError (DistlibException ):#line:36:class MetadataUnrecognizedVersionError(DistlibException):
    ""#line:37:"""Unknown metadata version number."""
class MetadataInvalidError (DistlibException ):#line:40:class MetadataInvalidError(DistlibException):
    ""#line:41:"""A metadata value is invalid"""
__all__ =['Metadata','PKG_INFO_ENCODING','PKG_INFO_PREFERRED_VERSION']#line:44:__all__ = ['Metadata', 'PKG_INFO_ENCODING', 'PKG_INFO_PREFERRED_VERSION']
PKG_INFO_ENCODING ='utf-8'#line:47:PKG_INFO_ENCODING = 'utf-8'
PKG_INFO_PREFERRED_VERSION ='1.1'#line:51:PKG_INFO_PREFERRED_VERSION = '1.1'
_O00OOOOO0OO0O0O0O =re .compile ('\n       \\|')#line:53:_LINE_PREFIX_1_2 = re.compile('\n       \\|')
_OO0O000OOOOOO0OOO =re .compile ('\n        ')#line:54:_LINE_PREFIX_PRE_1_2 = re.compile('\n        ')
_O0O000O000OO0OO0O =('Metadata-Version','Name','Version','Platform','Summary','Description','Keywords','Home-page','Author','Author-email','License')#line:58:'License')
_OOO00000OOO000O0O =('Metadata-Version','Name','Version','Platform','Supported-Platform','Summary','Description','Keywords','Home-page','Author','Author-email','License','Classifier','Download-URL','Obsoletes','Provides','Requires')#line:64:'Provides', 'Requires')
_O0OO0000O0O00OO00 =('Obsoletes','Provides','Requires','Classifier','Download-URL')#line:67:'Download-URL')
_O0OO0000O0OO0OOO0 =('Metadata-Version','Name','Version','Platform','Supported-Platform','Summary','Description','Keywords','Home-page','Author','Author-email','Maintainer','Maintainer-email','License','Classifier','Download-URL','Obsoletes-Dist','Project-URL','Provides-Dist','Requires-Dist','Requires-Python','Requires-External')#line:75:'Requires-Python', 'Requires-External')
_OOOOOO00O0O000OOO =('Provides-Dist','Requires-Dist','Requires-Python','Obsoletes-Dist','Requires-External','Maintainer','Maintainer-email','Project-URL')#line:79:'Maintainer-email', 'Project-URL')
_OO0O0O0O0OO0O0OOO =('Metadata-Version','Name','Version','Platform','Supported-Platform','Summary','Description','Keywords','Home-page','Author','Author-email','Maintainer','Maintainer-email','License','Classifier','Download-URL','Obsoletes-Dist','Project-URL','Provides-Dist','Requires-Dist','Requires-Python','Requires-External','Private-Version','Obsoleted-By','Setup-Requires-Dist','Extension','Provides-Extra')#line:89:'Provides-Extra')
_O000O000000OO0O00 =('Private-Version','Provides-Extra','Obsoleted-By','Setup-Requires-Dist','Extension')#line:92:'Setup-Requires-Dist', 'Extension')
_O0OO00OOO0OOO0OO0 =_OO0O0O0O0OO0O0OOO +('Description-Content-Type','Requires')#line:96:_566_FIELDS = _426_FIELDS + ('Description-Content-Type', 'Requires')
_O0O00O00O0O00OOO0 =('Description-Content-Type',)#line:98:_566_MARKERS = ('Description-Content-Type',)
_O0O0OO00O0OO0OOO0 =set ()#line:100:_ALL_FIELDS = set()
_O0O0OO00O0OO0OOO0 .update (_O0O000O000OO0OO0O )#line:101:_ALL_FIELDS.update(_241_FIELDS)
_O0O0OO00O0OO0OOO0 .update (_OOO00000OOO000O0O )#line:102:_ALL_FIELDS.update(_314_FIELDS)
_O0O0OO00O0OO0OOO0 .update (_O0OO0000O0OO0OOO0 )#line:103:_ALL_FIELDS.update(_345_FIELDS)
_O0O0OO00O0OO0OOO0 .update (_OO0O0O0O0OO0O0OOO )#line:104:_ALL_FIELDS.update(_426_FIELDS)
_O0O0OO00O0OO0OOO0 .update (_O0OO00OOO0OOO0OO0 )#line:105:_ALL_FIELDS.update(_566_FIELDS)
OO0O0O0O00O0O00O0 =re .compile (r'''extra\s*==\s*("([^"]+)"|'([^']+)')''')#line:107:EXTRA_RE = re.compile(r'''extra\s*==\s*("([^"]+)"|'([^']+)')''')
def _OO0O0000O0000OOOO (O0O0000O0OOO00OOO ):#line:110:def _version2fieldlist(version):
    if O0O0000O0OOO00OOO =='1.0':#line:111:if version == '1.0':
        return _O0O000O000OO0OO0O #line:112:return _241_FIELDS
    elif O0O0000O0OOO00OOO =='1.1':#line:113:elif version == '1.1':
        return _OOO00000OOO000O0O #line:114:return _314_FIELDS
    elif O0O0000O0OOO00OOO =='1.2':#line:115:elif version == '1.2':
        return _O0OO0000O0OO0OOO0 #line:116:return _345_FIELDS
    elif O0O0000O0OOO00OOO in ('1.3','2.1'):#line:117:elif version in ('1.3', '2.1'):
        return _O0OO0000O0OO0OOO0 +_O0OO00OOO0OOO0OO0 #line:118:return _345_FIELDS + _566_FIELDS
    elif O0O0000O0OOO00OOO =='2.0':#line:119:elif version == '2.0':
        return _OO0O0O0O0OO0O0OOO #line:120:return _426_FIELDS
    raise MetadataUnrecognizedVersionError (O0O0000O0OOO00OOO )#line:121:raise MetadataUnrecognizedVersionError(version)
def _O0OO000OOOO00OO0O (O0O0O0OOO0OOOO00O ):#line:124:def _best_version(fields):
    ""#line:125:"""Detect the best version depending on the fields used."""
    def _O00OO0O0O00O00OO0 (OOOO00OO0O00O000O ,O0000OOO0O00O00O0 ):#line:126:def _has_marker(keys, markers):
        for O0OOO00O00000OO00 in O0000OOO0O00O00O0 :#line:127:for marker in markers:
            if O0OOO00O00000OO00 in OOOO00OO0O00O000O :#line:128:if marker in keys:
                return True #line:129:return True
        return False #line:130:return False
    O0OOOOOOO0OOO0OO0 =[]#line:132:keys = []
    for O00O0O0O0OO00O00O ,O00000OOOO0OO0OO0 in O0O0O0OOO0OOOO00O .items ():#line:133:for key, value in fields.items():
        if O00000OOOO0OO0OO0 in ([],'UNKNOWN',None ):#line:134:if value in ([], 'UNKNOWN', None):
            continue #line:135:continue
        O0OOOOOOO0OOO0OO0 .append (O00O0O0O0OO00O00O )#line:136:keys.append(key)
    O00O00O0O00OO00O0 =['1.0','1.1','1.2','1.3','2.0','2.1']#line:138:possible_versions = ['1.0', '1.1', '1.2', '1.3', '2.0', '2.1']
    for O00O0O0O0OO00O00O in O0OOOOOOO0OOO0OO0 :#line:141:for key in keys:
        if O00O0O0O0OO00O00O not in _O0O000O000OO0OO0O and '1.0'in O00O00O0O00OO00O0 :#line:142:if key not in _241_FIELDS and '1.0' in possible_versions:
            O00O00O0O00OO00O0 .remove ('1.0')#line:143:possible_versions.remove('1.0')
            O0OO0O0OOO0OOOO00 .debug ('Removed 1.0 due to %s',O00O0O0O0OO00O00O )#line:144:logger.debug('Removed 1.0 due to %s', key)
        if O00O0O0O0OO00O00O not in _OOO00000OOO000O0O and '1.1'in O00O00O0O00OO00O0 :#line:145:if key not in _314_FIELDS and '1.1' in possible_versions:
            O00O00O0O00OO00O0 .remove ('1.1')#line:146:possible_versions.remove('1.1')
            O0OO0O0OOO0OOOO00 .debug ('Removed 1.1 due to %s',O00O0O0O0OO00O00O )#line:147:logger.debug('Removed 1.1 due to %s', key)
        if O00O0O0O0OO00O00O not in _O0OO0000O0OO0OOO0 and '1.2'in O00O00O0O00OO00O0 :#line:148:if key not in _345_FIELDS and '1.2' in possible_versions:
            O00O00O0O00OO00O0 .remove ('1.2')#line:149:possible_versions.remove('1.2')
            O0OO0O0OOO0OOOO00 .debug ('Removed 1.2 due to %s',O00O0O0O0OO00O00O )#line:150:logger.debug('Removed 1.2 due to %s', key)
        if O00O0O0O0OO00O00O not in _O0OO00OOO0OOO0OO0 and '1.3'in O00O00O0O00OO00O0 :#line:151:if key not in _566_FIELDS and '1.3' in possible_versions:
            O00O00O0O00OO00O0 .remove ('1.3')#line:152:possible_versions.remove('1.3')
            O0OO0O0OOO0OOOO00 .debug ('Removed 1.3 due to %s',O00O0O0O0OO00O00O )#line:153:logger.debug('Removed 1.3 due to %s', key)
        if O00O0O0O0OO00O00O not in _O0OO00OOO0OOO0OO0 and '2.1'in O00O00O0O00OO00O0 :#line:154:if key not in _566_FIELDS and '2.1' in possible_versions:
            if O00O0O0O0OO00O00O !='Description':#line:155:if key != 'Description':  # In 2.1, description allowed after headers
                O00O00O0O00OO00O0 .remove ('2.1')#line:156:possible_versions.remove('2.1')
                O0OO0O0OOO0OOOO00 .debug ('Removed 2.1 due to %s',O00O0O0O0OO00O00O )#line:157:logger.debug('Removed 2.1 due to %s', key)
        if O00O0O0O0OO00O00O not in _OO0O0O0O0OO0O0OOO and '2.0'in O00O00O0O00OO00O0 :#line:158:if key not in _426_FIELDS and '2.0' in possible_versions:
            O00O00O0O00OO00O0 .remove ('2.0')#line:159:possible_versions.remove('2.0')
            O0OO0O0OOO0OOOO00 .debug ('Removed 2.0 due to %s',O00O0O0O0OO00O00O )#line:160:logger.debug('Removed 2.0 due to %s', key)
    if len (O00O00O0O00OO00O0 )==1 :#line:163:if len(possible_versions) == 1:
        return O00O00O0O00OO00O0 [0 ]#line:164:return possible_versions[0]   # found !
    elif len (O00O00O0O00OO00O0 )==0 :#line:165:elif len(possible_versions) == 0:
        O0OO0O0OOO0OOOO00 .debug ('Out of options - unknown metadata set: %s',O0O0O0OOO0OOOO00O )#line:166:logger.debug('Out of options - unknown metadata set: %s', fields)
        raise MetadataConflictError ('Unknown metadata set')#line:167:raise MetadataConflictError('Unknown metadata set')
    O00O00OO000O0O0O0 ='1.1'in O00O00O0O00OO00O0 and _O00OO0O0O00O00OO0 (O0OOOOOOO0OOO0OO0 ,_O0OO0000O0O00OO00 )#line:170:is_1_1 = '1.1' in possible_versions and _has_marker(keys, _314_MARKERS)
    O0OOO0OO0O0O0O0OO ='1.2'in O00O00O0O00OO00O0 and _O00OO0O0O00O00OO0 (O0OOOOOOO0OOO0OO0 ,_OOOOOO00O0O000OOO )#line:171:is_1_2 = '1.2' in possible_versions and _has_marker(keys, _345_MARKERS)
    O00O00OOOO0OOO0O0 ='2.1'in O00O00O0O00OO00O0 and _O00OO0O0O00O00OO0 (O0OOOOOOO0OOO0OO0 ,_O0O00O00O0O00OOO0 )#line:172:is_2_1 = '2.1' in possible_versions and _has_marker(keys, _566_MARKERS)
    O00OOO000000O0OO0 ='2.0'in O00O00O0O00OO00O0 and _O00OO0O0O00O00OO0 (O0OOOOOOO0OOO0OO0 ,_O000O000000OO0O00 )#line:173:is_2_0 = '2.0' in possible_versions and _has_marker(keys, _426_MARKERS)
    if int (O00O00OO000O0O0O0 )+int (O0OOO0OO0O0O0O0OO )+int (O00O00OOOO0OOO0O0 )+int (O00OOO000000O0OO0 )>1 :#line:174:if int(is_1_1) + int(is_1_2) + int(is_2_1) + int(is_2_0) > 1:
        raise MetadataConflictError ('You used incompatible 1.1/1.2/2.0/2.1 fields')#line:175:raise MetadataConflictError('You used incompatible 1.1/1.2/2.0/2.1 fields')
    if not O00O00OO000O0O0O0 and not O0OOO0OO0O0O0O0OO and not O00O00OOOO0OOO0O0 and not O00OOO000000O0OO0 :#line:182:if not is_1_1 and not is_1_2 and not is_2_1 and not is_2_0:
        if PKG_INFO_PREFERRED_VERSION in O00O00O0O00OO00O0 :#line:184:if PKG_INFO_PREFERRED_VERSION in possible_versions:
            return PKG_INFO_PREFERRED_VERSION #line:185:return PKG_INFO_PREFERRED_VERSION
    if O00O00OO000O0O0O0 :#line:186:if is_1_1:
        return '1.1'#line:187:return '1.1'
    if O0OOO0OO0O0O0O0OO :#line:188:if is_1_2:
        return '1.2'#line:189:return '1.2'
    if O00O00OOOO0OOO0O0 :#line:190:if is_2_1:
        return '2.1'#line:191:return '2.1'
    return '2.0'#line:193:return '2.0'
_OOOO0O00OOO0OO0O0 ={'metadata_version':'Metadata-Version','name':'Name','version':'Version','platform':'Platform','supported_platform':'Supported-Platform','summary':'Summary','description':'Description','keywords':'Keywords','home_page':'Home-page','author':'Author','author_email':'Author-email','maintainer':'Maintainer','maintainer_email':'Maintainer-email','license':'License','classifier':'Classifier','download_url':'Download-URL','obsoletes_dist':'Obsoletes-Dist','provides_dist':'Provides-Dist','requires_dist':'Requires-Dist','setup_requires_dist':'Setup-Requires-Dist','requires_python':'Requires-Python','requires_external':'Requires-External','requires':'Requires','provides':'Provides','obsoletes':'Obsoletes','project_url':'Project-URL','private_version':'Private-Version','obsoleted_by':'Obsoleted-By','extension':'Extension','provides_extra':'Provides-Extra',}#line:226:}
_O00O0O00O0O0O0OOO =('Requires-Dist','Obsoletes-Dist','Provides-Dist')#line:228:_PREDICATE_FIELDS = ('Requires-Dist', 'Obsoletes-Dist', 'Provides-Dist')
_O0OO00O00OO00OOO0 =('Requires-Python',)#line:229:_VERSIONS_FIELDS = ('Requires-Python',)
_OO0OOOO00O0OO0000 =('Version',)#line:230:_VERSION_FIELDS = ('Version',)
_OO0O00O0O00OO0O00 =('Platform','Classifier','Obsoletes','Requires','Provides','Obsoletes-Dist','Provides-Dist','Requires-Dist','Requires-External','Project-URL','Supported-Platform','Setup-Requires-Dist','Provides-Extra','Extension')#line:235:'Provides-Extra', 'Extension')
_OO0O0OO00O00OOOOO =('Project-URL',)#line:236:_LISTTUPLEFIELDS = ('Project-URL',)
_O00O0O000OOO00OOO =('Keywords',)#line:238:_ELEMENTSFIELD = ('Keywords',)
_OOO00OOOOO00OOOO0 =('Author','Maintainer','Summary','Description')#line:240:_UNICODEFIELDS = ('Author', 'Maintainer', 'Summary', 'Description')
_OO0OO00000OO00O00 =object ()#line:242:_MISSING = object()
_O0000OOO00O000O00 =re .compile ('[^A-Za-z0-9.]+')#line:244:_FILESAFE = re.compile('[^A-Za-z0-9.]+')
def _O0OOO0OOO00OOO0OO (OO000O00O0O000O0O ,O0O0O0OOOOOOOOOO0 ,for_filename =False ):#line:247:def _get_name_and_version(name, version, for_filename=False):
    ""#line:250:If for_filename is true, return a filename-escaped form."""
    if for_filename :#line:251:if for_filename:
        OO000O00O0O000O0O =_O0000OOO00O000O00 .sub ('-',OO000O00O0O000O0O )#line:255:name = _FILESAFE.sub('-', name)
        O0O0O0OOOOOOOOOO0 =_O0000OOO00O000O00 .sub ('-',O0O0O0OOOOOOOOOO0 .replace (' ','.'))#line:256:version = _FILESAFE.sub('-', version.replace(' ', '.'))
    return '%s-%s'%(OO000O00O0O000O0O ,O0O0O0OOOOOOOOOO0 )#line:257:return '%s-%s' % (name, version)
class OO000OOOOO0OOO0O0 (object ):#line:260:class LegacyMetadata(object):
    ""#line:269:"""
    def __init__ (O00000OOO0O000O0O ,path =None ,fileobj =None ,mapping =None ,scheme ='default'):#line:273:scheme='default'):
        if [path ,fileobj ,mapping ].count (None )<2 :#line:274:if [path, fileobj, mapping].count(None) < 2:
            raise TypeError ('path, fileobj and mapping are exclusive')#line:275:raise TypeError('path, fileobj and mapping are exclusive')
        O00000OOO0O000O0O ._fields ={}#line:276:self._fields = {}
        O00000OOO0O000O0O .requires_files =[]#line:277:self.requires_files = []
        O00000OOO0O000O0O ._dependencies =None #line:278:self._dependencies = None
        O00000OOO0O000O0O .scheme =scheme #line:279:self.scheme = scheme
        if path is not None :#line:280:if path is not None:
            O00000OOO0O000O0O .read (path )#line:281:self.read(path)
        elif fileobj is not None :#line:282:elif fileobj is not None:
            O00000OOO0O000O0O .read_file (fileobj )#line:283:self.read_file(fileobj)
        elif mapping is not None :#line:284:elif mapping is not None:
            O00000OOO0O000O0O .update (mapping )#line:285:self.update(mapping)
            O00000OOO0O000O0O .set_metadata_version ()#line:286:self.set_metadata_version()
    def set_metadata_version (OOOOOO0OOOOOOOOOO ):#line:288:def set_metadata_version(self):
        OOOOOO0OOOOOOOOOO ._fields ['Metadata-Version']=_O0OO000OOOO00OO0O (OOOOOO0OOOOOOOOOO ._fields )#line:289:self._fields['Metadata-Version'] = _best_version(self._fields)
    def _write_field (OOO00OOO0OOOO00O0 ,OOO0OOO000OOO0OO0 ,O00OO0000O00OO00O ,OOOO00OOOOOO0O00O ):#line:291:def _write_field(self, fileobj, name, value):
        OOO0OOO000OOO0OO0 .write ('%s: %s\n'%(O00OO0000O00OO00O ,OOOO00OOOOOO0O00O ))#line:292:fileobj.write('%s: %s\n' % (name, value))
    def __getitem__ (OO00O00O0000O0OO0 ,O0O000O00000O0OO0 ):#line:294:def __getitem__(self, name):
        return OO00O00O0000O0OO0 .get (O0O000O00000O0OO0 )#line:295:return self.get(name)
    def __setitem__ (O0O00O0O0O0OOO0O0 ,O0O0000O00000OO0O ,O0O0O00OOO0000O00 ):#line:297:def __setitem__(self, name, value):
        return O0O00O0O0O0OOO0O0 .set (O0O0000O00000OO0O ,O0O0O00OOO0000O00 )#line:298:return self.set(name, value)
    def __delitem__ (O00OOO0OOOO0O0OO0 ,O0OO0O00OOO0O00OO ):#line:300:def __delitem__(self, name):
        OOO0O00O0O0000OOO =O00OOO0OOOO0O0OO0 ._convert_name (O0OO0O00OOO0O00OO )#line:301:field_name = self._convert_name(name)
        try :#line:302:try:
            del O00OOO0OOOO0O0OO0 ._fields [OOO0O00O0O0000OOO ]#line:303:del self._fields[field_name]
        except KeyError :#line:304:except KeyError:
            raise KeyError (O0OO0O00OOO0O00OO )#line:305:raise KeyError(name)
    def __contains__ (OOO00OO0000O00O00 ,OOOOOO0OOOOO0O0OO ):#line:307:def __contains__(self, name):
        return (OOOOOO0OOOOO0O0OO in OOO00OO0000O00O00 ._fields or OOO00OO0000O00O00 ._convert_name (OOOOOO0OOOOO0O0OO )in OOO00OO0000O00O00 ._fields )#line:309:self._convert_name(name) in self._fields)
    def _convert_name (OO00O0000OO0O00OO ,OO00OO00O00O0O000 ):#line:311:def _convert_name(self, name):
        if OO00OO00O00O0O000 in _O0O0OO00O0OO0OOO0 :#line:312:if name in _ALL_FIELDS:
            return OO00OO00O00O0O000 #line:313:return name
        OO00OO00O00O0O000 =OO00OO00O00O0O000 .replace ('-','_').lower ()#line:314:name = name.replace('-', '_').lower()
        return _OOOO0O00OOO0OO0O0 .get (OO00OO00O00O0O000 ,OO00OO00O00O0O000 )#line:315:return _ATTR2FIELD.get(name, name)
    def _default_value (OO0O0000OO00OO0O0 ,OO0OOOO0O0O000OOO ):#line:317:def _default_value(self, name):
        if OO0OOOO0O0O000OOO in _OO0O00O0O00OO0O00 or OO0OOOO0O0O000OOO in _O00O0O000OOO00OOO :#line:318:if name in _LISTFIELDS or name in _ELEMENTSFIELD:
            return []#line:319:return []
        return 'UNKNOWN'#line:320:return 'UNKNOWN'
    def _remove_line_prefix (OO0O00OOOOO0O0O0O ,O000000O000OO0000 ):#line:322:def _remove_line_prefix(self, value):
        if OO0O00OOOOO0O0O0O .metadata_version in ('1.0','1.1'):#line:323:if self.metadata_version in ('1.0', '1.1'):
            return _OO0O000OOOOOO0OOO .sub ('\n',O000000O000OO0000 )#line:324:return _LINE_PREFIX_PRE_1_2.sub('\n', value)
        else :#line:325:else:
            return _O00OOOOO0OO0O0O0O .sub ('\n',O000000O000OO0000 )#line:326:return _LINE_PREFIX_1_2.sub('\n', value)
    def __getattr__ (OOOOO0OOO0OO00OOO ,OOO00O0O0OOOOO00O ):#line:328:def __getattr__(self, name):
        if OOO00O0O0OOOOO00O in _OOOO0O00OOO0OO0O0 :#line:329:if name in _ATTR2FIELD:
            return OOOOO0OOO0OO00OOO [OOO00O0O0OOOOO00O ]#line:330:return self[name]
        raise AttributeError (OOO00O0O0OOOOO00O )#line:331:raise AttributeError(name)
    def get_fullname (O0OOO0OOOOOO00O00 ,filesafe =False ):#line:339:def get_fullname(self, filesafe=False):
        ""#line:342:If filesafe is true, return a filename-escaped form."""
        return _O0OOO0OOO00OOO0OO (O0OOO0OOOOOO00O00 ['Name'],O0OOO0OOOOOO00O00 ['Version'],filesafe )#line:343:return _get_name_and_version(self['Name'], self['Version'], filesafe)
    def is_field (OOOO0O00O0O0OOOO0 ,O0OOOOO000OOO0OOO ):#line:345:def is_field(self, name):
        ""#line:346:"""return True if name is a valid metadata key"""
        O0OOOOO000OOO0OOO =OOOO0O00O0O0OOOO0 ._convert_name (O0OOOOO000OOO0OOO )#line:347:name = self._convert_name(name)
        return O0OOOOO000OOO0OOO in _O0O0OO00O0OO0OOO0 #line:348:return name in _ALL_FIELDS
    def is_multi_field (O0OOOO0O0O0O0OO0O ,O0OOOO0OOO0000OO0 ):#line:350:def is_multi_field(self, name):
        O0OOOO0OOO0000OO0 =O0OOOO0O0O0O0OO0O ._convert_name (O0OOOO0OOO0000OO0 )#line:351:name = self._convert_name(name)
        return O0OOOO0OOO0000OO0 in _OO0O00O0O00OO0O00 #line:352:return name in _LISTFIELDS
    def read (OO0OO0OO000OO0O0O ,OO0000000OO0OO000 ):#line:354:def read(self, filepath):
        ""#line:355:"""Read the metadata values from a file path."""
        OOO000OOO0000O000 =codecs .open (OO0000000OO0OO000 ,'r',encoding ='utf-8')#line:356:fp = codecs.open(filepath, 'r', encoding='utf-8')
        try :#line:357:try:
            OO0OO0OO000OO0O0O .read_file (OOO000OOO0000O000 )#line:358:self.read_file(fp)
        finally :#line:359:finally:
            OOO000OOO0000O000 .close ()#line:360:fp.close()
    def read_file (OOOO00OO00O00O00O ,OOO00OOO00OO00O0O ):#line:362:def read_file(self, fileob):
        ""#line:363:"""Read the metadata values from a file object."""
        OOO00OO00O000O000 =message_from_file (OOO00OOO00OO00O0O )#line:364:msg = message_from_file(fileob)
        OOOO00OO00O00O00O ._fields ['Metadata-Version']=OOO00OO00O000O000 ['metadata-version']#line:365:self._fields['Metadata-Version'] = msg['metadata-version']
        for OO0O00OOOO00O00O0 in _O0O0OO00O0OO0OOO0 :#line:368:for field in _ALL_FIELDS:
            if OO0O00OOOO00O00O0 not in OOO00OO00O000O000 :#line:369:if field not in msg:
                continue #line:370:continue
            if OO0O00OOOO00O00O0 in _OO0O00O0O00OO0O00 :#line:371:if field in _LISTFIELDS:
                O0OOO0O00O00O0000 =OOO00OO00O000O000 .get_all (OO0O00OOOO00O00O0 )#line:373:values = msg.get_all(field)
                if OO0O00OOOO00O00O0 in _OO0O0OO00O00OOOOO and O0OOO0O00O00O0000 is not None :#line:374:if field in _LISTTUPLEFIELDS and values is not None:
                    O0OOO0O00O00O0000 =[tuple (OOOO00OOOO00O00O0 .split (','))for OOOO00OOOO00O00O0 in O0OOO0O00O00O0000 ]#line:375:values = [tuple(value.split(',')) for value in values]
                OOOO00OO00O00O00O .set (OO0O00OOOO00O00O0 ,O0OOO0O00O00O0000 )#line:376:self.set(field, values)
            else :#line:377:else:
                OO0OOOO00O00OO000 =OOO00OO00O000O000 [OO0O00OOOO00O00O0 ]#line:379:value = msg[field]
                if OO0OOOO00O00OO000 is not None and OO0OOOO00O00OO000 !='UNKNOWN':#line:380:if value is not None and value != 'UNKNOWN':
                    OOOO00OO00O00O00O .set (OO0O00OOOO00O00O0 ,OO0OOOO00O00OO000 )#line:381:self.set(field, value)
    def write (OOO0O0O00O0O0OO0O ,OO00000O0OO000O00 ,skip_unknown =False ):#line:385:def write(self, filepath, skip_unknown=False):
        ""#line:386:"""Write the metadata fields to filepath."""
        O0O00OOOOO0OOO000 =codecs .open (OO00000O0OO000O00 ,'w',encoding ='utf-8')#line:387:fp = codecs.open(filepath, 'w', encoding='utf-8')
        try :#line:388:try:
            OOO0O0O00O0O0OO0O .write_file (O0O00OOOOO0OOO000 ,skip_unknown )#line:389:self.write_file(fp, skip_unknown)
        finally :#line:390:finally:
            O0O00OOOOO0OOO000 .close ()#line:391:fp.close()
    def write_file (OOOO0OOO00OOOOO0O ,O0O000O0O0OOOOOOO ,skip_unknown =False ):#line:393:def write_file(self, fileobject, skip_unknown=False):
        ""#line:394:"""Write the PKG-INFO format data to a file object."""
        OOOO0OOO00OOOOO0O .set_metadata_version ()#line:395:self.set_metadata_version()
        for O000O0OOOO0O0O0O0 in _OO0O0000O0000OOOO (OOOO0OOO00OOOOO0O ['Metadata-Version']):#line:397:for field in _version2fieldlist(self['Metadata-Version']):
            O0O000OO0OOOO0OO0 =OOOO0OOO00OOOOO0O .get (O000O0OOOO0O0O0O0 )#line:398:values = self.get(field)
            if skip_unknown and O0O000OO0OOOO0OO0 in ('UNKNOWN',[],['UNKNOWN']):#line:399:if skip_unknown and values in ('UNKNOWN', [], ['UNKNOWN']):
                continue #line:400:continue
            if O000O0OOOO0O0O0O0 in _O00O0O000OOO00OOO :#line:401:if field in _ELEMENTSFIELD:
                OOOO0OOO00OOOOO0O ._write_field (O0O000O0O0OOOOOOO ,O000O0OOOO0O0O0O0 ,','.join (O0O000OO0OOOO0OO0 ))#line:402:self._write_field(fileobject, field, ','.join(values))
                continue #line:403:continue
            if O000O0OOOO0O0O0O0 not in _OO0O00O0O00OO0O00 :#line:404:if field not in _LISTFIELDS:
                if O000O0OOOO0O0O0O0 =='Description':#line:405:if field == 'Description':
                    if OOOO0OOO00OOOOO0O .metadata_version in ('1.0','1.1'):#line:406:if self.metadata_version in ('1.0', '1.1'):
                        O0O000OO0OOOO0OO0 =O0O000OO0OOOO0OO0 .replace ('\n','\n        ')#line:407:values = values.replace('\n', '\n        ')
                    else :#line:408:else:
                        O0O000OO0OOOO0OO0 =O0O000OO0OOOO0OO0 .replace ('\n','\n       |')#line:409:values = values.replace('\n', '\n       |')
                O0O000OO0OOOO0OO0 =[O0O000OO0OOOO0OO0 ]#line:410:values = [values]
            if O000O0OOOO0O0O0O0 in _OO0O0OO00O00OOOOO :#line:412:if field in _LISTTUPLEFIELDS:
                O0O000OO0OOOO0OO0 =[','.join (O0O0O0O00OOOOO0OO )for O0O0O0O00OOOOO0OO in O0O000OO0OOOO0OO0 ]#line:413:values = [','.join(value) for value in values]
            for O0OO0O0O0OOO0OO00 in O0O000OO0OOOO0OO0 :#line:415:for value in values:
                OOOO0OOO00OOOOO0O ._write_field (O0O000O0O0OOOOOOO ,O000O0OOOO0O0O0O0 ,O0OO0O0O0OOO0OO00 )#line:416:self._write_field(fileobject, field, value)
    def update (OO0OOOO0OO0OO0O0O ,other =None ,**OO0000O0O000O0OO0 ):#line:418:def update(self, other=None, **kwargs):
        ""#line:427:"""
        def _OO00OO000000OO00O (OOO0O0OO0O0OO0OO0 ,OOO00O0O00OO000O0 ):#line:428:def _set(key, value):
            if OOO0O0OO0O0OO0OO0 in _OOOO0O00OOO0OO0O0 and OOO00O0O00OO000O0 :#line:429:if key in _ATTR2FIELD and value:
                OO0OOOO0OO0OO0O0O .set (OO0OOOO0OO0OO0O0O ._convert_name (OOO0O0OO0O0OO0OO0 ),OOO00O0O00OO000O0 )#line:430:self.set(self._convert_name(key), value)
        if not other :#line:432:if not other:
            pass #line:434:pass
        elif hasattr (other ,'keys'):#line:435:elif hasattr(other, 'keys'):
            for O0O0O00000O00OO0O in other .keys ():#line:436:for k in other.keys():
                _OO00OO000000OO00O (O0O0O00000O00OO0O ,other [O0O0O00000O00OO0O ])#line:437:_set(k, other[k])
        else :#line:438:else:
            for O0O0O00000O00OO0O ,OO0OOOO0O0OOOO0OO in other :#line:439:for k, v in other:
                _OO00OO000000OO00O (O0O0O00000O00OO0O ,OO0OOOO0O0OOOO0OO )#line:440:_set(k, v)
        if OO0000O0O000O0OO0 :#line:442:if kwargs:
            for O0O0O00000O00OO0O ,OO0OOOO0O0OOOO0OO in OO0000O0O000O0OO0 .items ():#line:443:for k, v in kwargs.items():
                _OO00OO000000OO00O (O0O0O00000O00OO0O ,OO0OOOO0O0OOOO0OO )#line:444:_set(k, v)
    def set (OOO00000O0000OO0O ,OO0OOO0O000OOOO00 ,O00O0O00O00000O00 ):#line:446:def set(self, name, value):
        ""#line:447:"""Control then set a metadata field."""
        OO0OOO0O000OOOO00 =OOO00000O0000OO0O ._convert_name (OO0OOO0O000OOOO00 )#line:448:name = self._convert_name(name)
        if ((OO0OOO0O000OOOO00 in _O00O0O000OOO00OOO or OO0OOO0O000OOOO00 =='Platform')and not isinstance (O00O0O00O00000O00 ,(list ,tuple ))):#line:451:not isinstance(value, (list, tuple))):
            if isinstance (O00O0O00O00000O00 ,string_types ):#line:452:if isinstance(value, string_types):
                O00O0O00O00000O00 =[OO0OO0O00000000O0 .strip ()for OO0OO0O00000000O0 in O00O0O00O00000O00 .split (',')]#line:453:value = [v.strip() for v in value.split(',')]
            else :#line:454:else:
                O00O0O00O00000O00 =[]#line:455:value = []
        elif (OO0OOO0O000OOOO00 in _OO0O00O0O00OO0O00 and not isinstance (O00O0O00O00000O00 ,(list ,tuple ))):#line:457:not isinstance(value, (list, tuple))):
            if isinstance (O00O0O00O00000O00 ,string_types ):#line:458:if isinstance(value, string_types):
                O00O0O00O00000O00 =[O00O0O00O00000O00 ]#line:459:value = [value]
            else :#line:460:else:
                O00O0O00O00000O00 =[]#line:461:value = []
        if O0OO0O0OOO0OOOO00 .isEnabledFor (logging .WARNING ):#line:463:if logger.isEnabledFor(logging.WARNING):
            OOOO0O0OOOOO00OOO =OOO00000O0000OO0O ['Name']#line:464:project_name = self['Name']
            OOO0O0OO0O00OOOOO =get_scheme (OOO00000O0000OO0O .scheme )#line:466:scheme = get_scheme(self.scheme)
            if OO0OOO0O000OOOO00 in _O00O0O00O0O0O0OOO and O00O0O00O00000O00 is not None :#line:467:if name in _PREDICATE_FIELDS and value is not None:
                for OO0O0OO0OO0O00O0O in O00O0O00O00000O00 :#line:468:for v in value:
                    if not OOO0O0OO0O00OOOOO .is_valid_matcher (OO0O0OO0OO0O00O0O .split (';')[0 ]):#line:470:if not scheme.is_valid_matcher(v.split(';')[0]):
                        O0OO0O0OOO0OOOO00 .warning ("'%s': '%s' is not valid (field '%s')",OOOO0O0OOOOO00OOO ,OO0O0OO0OO0O00O0O ,OO0OOO0O000OOOO00 )#line:473:project_name, v, name)
            elif OO0OOO0O000OOOO00 in _O0OO00O00OO00OOO0 and O00O0O00O00000O00 is not None :#line:475:elif name in _VERSIONS_FIELDS and value is not None:
                if not OOO0O0OO0O00OOOOO .is_valid_constraint_list (O00O0O00O00000O00 ):#line:476:if not scheme.is_valid_constraint_list(value):
                    O0OO0O0OOO0OOOO00 .warning ("'%s': '%s' is not a valid version (field '%s')",OOOO0O0OOOOO00OOO ,O00O0O00O00000O00 ,OO0OOO0O000OOOO00 )#line:478:project_name, value, name)
            elif OO0OOO0O000OOOO00 in _OO0OOOO00O0OO0000 and O00O0O00O00000O00 is not None :#line:479:elif name in _VERSION_FIELDS and value is not None:
                if not OOO0O0OO0O00OOOOO .is_valid_version (O00O0O00O00000O00 ):#line:480:if not scheme.is_valid_version(value):
                    O0OO0O0OOO0OOOO00 .warning ("'%s': '%s' is not a valid version (field '%s')",OOOO0O0OOOOO00OOO ,O00O0O00O00000O00 ,OO0OOO0O000OOOO00 )#line:482:project_name, value, name)
        if OO0OOO0O000OOOO00 in _OOO00OOOOO00OOOO0 :#line:484:if name in _UNICODEFIELDS:
            if OO0OOO0O000OOOO00 =='Description':#line:485:if name == 'Description':
                O00O0O00O00000O00 =OOO00000O0000OO0O ._remove_line_prefix (O00O0O00O00000O00 )#line:486:value = self._remove_line_prefix(value)
        OOO00000O0000OO0O ._fields [OO0OOO0O000OOOO00 ]=O00O0O00O00000O00 #line:488:self._fields[name] = value
    def get (OOOOOO0OO00000O0O ,O0000O000O0OOOOO0 ,default =_OO0OO00000OO00O00 ):#line:490:def get(self, name, default=_MISSING):
        ""#line:491:"""Get a metadata field."""
        O0000O000O0OOOOO0 =OOOOOO0OO00000O0O ._convert_name (O0000O000O0OOOOO0 )#line:492:name = self._convert_name(name)
        if O0000O000O0OOOOO0 not in OOOOOO0OO00000O0O ._fields :#line:493:if name not in self._fields:
            if default is _OO0OO00000OO00O00 :#line:494:if default is _MISSING:
                default =OOOOOO0OO00000O0O ._default_value (O0000O000O0OOOOO0 )#line:495:default = self._default_value(name)
            return default #line:496:return default
        if O0000O000O0OOOOO0 in _OOO00OOOOO00OOOO0 :#line:497:if name in _UNICODEFIELDS:
            O0000OO0O00OOO000 =OOOOOO0OO00000O0O ._fields [O0000O000O0OOOOO0 ]#line:498:value = self._fields[name]
            return O0000OO0O00OOO000 #line:499:return value
        elif O0000O000O0OOOOO0 in _OO0O00O0O00OO0O00 :#line:500:elif name in _LISTFIELDS:
            O0000OO0O00OOO000 =OOOOOO0OO00000O0O ._fields [O0000O000O0OOOOO0 ]#line:501:value = self._fields[name]
            if O0000OO0O00OOO000 is None :#line:502:if value is None:
                return []#line:503:return []
            O0OO0O00OOO0OOO00 =[]#line:504:res = []
            for O0O0O000O0O0OOO00 in O0000OO0O00OOO000 :#line:505:for val in value:
                if O0000O000O0OOOOO0 not in _OO0O0OO00O00OOOOO :#line:506:if name not in _LISTTUPLEFIELDS:
                    O0OO0O00OOO0OOO00 .append (O0O0O000O0O0OOO00 )#line:507:res.append(val)
                else :#line:508:else:
                    O0OO0O00OOO0OOO00 .append ((O0O0O000O0O0OOO00 [0 ],O0O0O000O0O0OOO00 [1 ]))#line:510:res.append((val[0], val[1]))
            return O0OO0O00OOO0OOO00 #line:511:return res
        elif O0000O000O0OOOOO0 in _O00O0O000OOO00OOO :#line:513:elif name in _ELEMENTSFIELD:
            O0000OO0O00OOO000 =OOOOOO0OO00000O0O ._fields [O0000O000O0OOOOO0 ]#line:514:value = self._fields[name]
            if isinstance (O0000OO0O00OOO000 ,string_types ):#line:515:if isinstance(value, string_types):
                return O0000OO0O00OOO000 .split (',')#line:516:return value.split(',')
        return OOOOOO0OO00000O0O ._fields [O0000O000O0OOOOO0 ]#line:517:return self._fields[name]
    def check (OOOOO0OO0000O00OO ,strict =False ):#line:519:def check(self, strict=False):
        ""#line:521:no Name or Version are provided"""
        OOOOO0OO0000O00OO .set_metadata_version ()#line:522:self.set_metadata_version()
        O0O000O0000O0OO00 ,OO00000O0OOO000O0 =[],[]#line:525:missing, warnings = [], []
        for OO000O00O000O0OO0 in ('Name','Version'):#line:527:for attr in ('Name', 'Version'):  # required by PEP 345
            if OO000O00O000O0OO0 not in OOOOO0OO0000O00OO :#line:528:if attr not in self:
                O0O000O0000O0OO00 .append (OO000O00O000O0OO0 )#line:529:missing.append(attr)
        if strict and O0O000O0000O0OO00 !=[]:#line:531:if strict and missing != []:
            O00O0O00O00OOO0O0 ='missing required metadata: %s'%', '.join (O0O000O0000O0OO00 )#line:532:msg = 'missing required metadata: %s' % ', '.join(missing)
            raise MetadataMissingError (O00O0O00O00OOO0O0 )#line:533:raise MetadataMissingError(msg)
        for OO000O00O000O0OO0 in ('Home-page','Author'):#line:535:for attr in ('Home-page', 'Author'):
            if OO000O00O000O0OO0 not in OOOOO0OO0000O00OO :#line:536:if attr not in self:
                O0O000O0000O0OO00 .append (OO000O00O000O0OO0 )#line:537:missing.append(attr)
        if OOOOO0OO0000O00OO ['Metadata-Version']!='1.2':#line:540:if self['Metadata-Version'] != '1.2':
            return O0O000O0000O0OO00 ,OO00000O0OOO000O0 #line:541:return missing, warnings
        OO0OOO00OOOOO00OO =get_scheme (OOOOO0OO0000O00OO .scheme )#line:543:scheme = get_scheme(self.scheme)
        def OOO0000O00OO00OO0 (O000000000OOOO000 ):#line:545:def are_valid_constraints(value):
            for O0OO000O0OOOOO00O in O000000000OOOO000 :#line:546:for v in value:
                if not OO0OOO00OOOOO00OO .is_valid_matcher (O0OO000O0OOOOO00O .split (';')[0 ]):#line:547:if not scheme.is_valid_matcher(v.split(';')[0]):
                    return False #line:548:return False
            return True #line:549:return True
        for O0O000OOOO0OOO00O ,O0OO0OO0OOOO00OO0 in ((_O00O0O00O0O0O0OOO ,OOO0000O00OO00OO0 ),(_O0OO00O00OO00OOO0 ,OO0OOO00OOOOO00OO .is_valid_constraint_list ),(_OO0OOOO00O0OO0000 ,OO0OOO00OOOOO00OO .is_valid_version )):#line:555:scheme.is_valid_version)):
            for O00OOOOO00OOO000O in O0O000OOOO0OOO00O :#line:556:for field in fields:
                O0O000O0O000O0OO0 =OOOOO0OO0000O00OO .get (O00OOOOO00OOO000O ,None )#line:557:value = self.get(field, None)
                if O0O000O0O000O0OO0 is not None and not O0OO0OO0OOOO00OO0 (O0O000O0O000O0OO0 ):#line:558:if value is not None and not controller(value):
                    OO00000O0OOO000O0 .append ("Wrong value for '%s': %s"%(O00OOOOO00OOO000O ,O0O000O0O000O0OO0 ))#line:559:warnings.append("Wrong value for '%s': %s" % (field, value))
        return O0O000O0000O0OO00 ,OO00000O0OOO000O0 #line:561:return missing, warnings
    def todict (O0OOOOO0O0O0000OO ,skip_missing =False ):#line:563:def todict(self, skip_missing=False):
        ""#line:568:"""
        O0OOOOO0O0O0000OO .set_metadata_version ()#line:569:self.set_metadata_version()
        OO00O0O0O00000O0O =(('metadata_version','Metadata-Version'),('name','Name'),('version','Version'),('summary','Summary'),('home_page','Home-page'),('author','Author'),('author_email','Author-email'),('license','License'),('description','Description'),('keywords','Keywords'),('platform','Platform'),('classifiers','Classifier'),('download_url','Download-URL'),)#line:585:)
        OO000O0O00O00O0O0 ={}#line:587:data = {}
        for O0OOOOOOO0O00OO00 ,OO0O0OOOO0000OO0O in OO00O0O0O00000O0O :#line:588:for key, field_name in mapping_1_0:
            if not skip_missing or OO0O0OOOO0000OO0O in O0OOOOO0O0O0000OO ._fields :#line:589:if not skip_missing or field_name in self._fields:
                OO000O0O00O00O0O0 [O0OOOOOOO0O00OO00 ]=O0OOOOO0O0O0000OO [OO0O0OOOO0000OO0O ]#line:590:data[key] = self[field_name]
        if O0OOOOO0O0O0000OO ['Metadata-Version']=='1.2':#line:592:if self['Metadata-Version'] == '1.2':
            OOOOO00000O00O000 =(('requires_dist','Requires-Dist'),('requires_python','Requires-Python'),('requires_external','Requires-External'),('provides_dist','Provides-Dist'),('obsoletes_dist','Obsoletes-Dist'),('project_url','Project-URL'),('maintainer','Maintainer'),('maintainer_email','Maintainer-email'),)#line:602:)
            for O0OOOOOOO0O00OO00 ,OO0O0OOOO0000OO0O in OOOOO00000O00O000 :#line:603:for key, field_name in mapping_1_2:
                if not skip_missing or OO0O0OOOO0000OO0O in O0OOOOO0O0O0000OO ._fields :#line:604:if not skip_missing or field_name in self._fields:
                    if O0OOOOOOO0O00OO00 !='project_url':#line:605:if key != 'project_url':
                        OO000O0O00O00O0O0 [O0OOOOOOO0O00OO00 ]=O0OOOOO0O0O0000OO [OO0O0OOOO0000OO0O ]#line:606:data[key] = self[field_name]
                    else :#line:607:else:
                        OO000O0O00O00O0O0 [O0OOOOOOO0O00OO00 ]=[','.join (O00O00OOO000O0O00 )for O00O00OOO000O0O00 in O0OOOOO0O0O0000OO [OO0O0OOOO0000OO0O ]]#line:608:data[key] = [','.join(u) for u in self[field_name]]
        elif O0OOOOO0O0O0000OO ['Metadata-Version']=='1.1':#line:610:elif self['Metadata-Version'] == '1.1':
            OOO0O0O00OOOOOO0O =(('provides','Provides'),('requires','Requires'),('obsoletes','Obsoletes'),)#line:615:)
            for O0OOOOOOO0O00OO00 ,OO0O0OOOO0000OO0O in OOO0O0O00OOOOOO0O :#line:616:for key, field_name in mapping_1_1:
                if not skip_missing or OO0O0OOOO0000OO0O in O0OOOOO0O0O0000OO ._fields :#line:617:if not skip_missing or field_name in self._fields:
                    OO000O0O00O00O0O0 [O0OOOOOOO0O00OO00 ]=O0OOOOO0O0O0000OO [OO0O0OOOO0000OO0O ]#line:618:data[key] = self[field_name]
        return OO000O0O00O00O0O0 #line:620:return data
    def add_requirements (OO000O000O00OOOOO ,OOO00OO0OOO0O00OO ):#line:622:def add_requirements(self, requirements):
        if OO000O000O00OOOOO ['Metadata-Version']=='1.1':#line:623:if self['Metadata-Version'] == '1.1':
            for OOOOOO0O0OO0000O0 in ('Obsoletes','Requires','Provides'):#line:625:for field in ('Obsoletes', 'Requires', 'Provides'):
                if OOOOOO0O0OO0000O0 in OO000O000O00OOOOO :#line:626:if field in self:
                    del OO000O000O00OOOOO [OOOOOO0O0OO0000O0 ]#line:627:del self[field]
        OO000O000O00OOOOO ['Requires-Dist']+=OOO00OO0OOO0O00OO #line:628:self['Requires-Dist'] += requirements
    def keys (OO00O00OO0000O000 ):#line:633:def keys(self):
        return list (_OO0O0000O0000OOOO (OO00O00OO0000O000 ['Metadata-Version']))#line:634:return list(_version2fieldlist(self['Metadata-Version']))
    def __iter__ (O0OOOO0000000O0OO ):#line:636:def __iter__(self):
        for OOOOO00O0O000000O in O0OOOO0000000O0OO .keys ():#line:637:for key in self.keys():
            yield OOOOO00O0O000000O #line:638:yield key
    def values (O000O00O0OOOOOOO0 ):#line:640:def values(self):
        return [O000O00O0OOOOOOO0 [O00O00OOO0OO00OO0 ]for O00O00OOO0OO00OO0 in O000O00O0OOOOOOO0 .keys ()]#line:641:return [self[key] for key in self.keys()]
    def items (OO0O0OO0000OOOOOO ):#line:643:def items(self):
        return [(OOOOO00000000O000 ,OO0O0OO0000OOOOOO [OOOOO00000000O000 ])for OOOOO00000000O000 in OO0O0OO0000OOOOOO .keys ()]#line:644:return [(key, self[key]) for key in self.keys()]
    def __repr__ (OO00OOO0OO0OOO00O ):#line:646:def __repr__(self):
        return '<%s %s %s>'%(OO00OOO0OO0OOO00O .__class__ .__name__ ,OO00OOO0OO0OOO00O .name ,OO00OOO0OO0OOO00O .version )#line:648:self.version)
OOOO0OO0O0OOO0OO0 ='pydist.json'#line:651:METADATA_FILENAME = 'pydist.json'
O0OOOO0OO0OOO0O00 ='metadata.json'#line:652:WHEEL_METADATA_FILENAME = 'metadata.json'
O0OOO0OO00000O00O ='METADATA'#line:653:LEGACY_METADATA_FILENAME = 'METADATA'
class Metadata (object ):#line:656:class Metadata(object):
    ""#line:661:"""
    METADATA_VERSION_MATCHER =re .compile (r'^\d+(\.\d+)*$')#line:663:METADATA_VERSION_MATCHER = re.compile(r'^\d+(\.\d+)*$')
    NAME_MATCHER =re .compile ('^[0-9A-Z]([0-9A-Z_.-]*[0-9A-Z])?$',re .I )#line:665:NAME_MATCHER = re.compile('^[0-9A-Z]([0-9A-Z_.-]*[0-9A-Z])?$', re.I)
    VERSION_MATCHER =PEP440_VERSION_RE #line:667:VERSION_MATCHER = PEP440_VERSION_RE
    SUMMARY_MATCHER =re .compile ('.{1,2047}')#line:669:SUMMARY_MATCHER = re.compile('.{1,2047}')
    METADATA_VERSION ='2.0'#line:671:METADATA_VERSION = '2.0'
    GENERATOR ='distlib (%s)'%__version__ #line:673:GENERATOR = 'distlib (%s)' % __version__
    MANDATORY_KEYS ={'name':(),'version':(),'summary':('legacy',),}#line:679:}
    INDEX_KEYS =('name version license summary description author ' 'author_email keywords platform home_page classifiers ' 'download_url')#line:683:'download_url')
    DEPENDENCY_KEYS =('extras run_requires test_requires build_requires ' 'dev_requires provides meta_requires obsoleted_by ' 'supports_environments')#line:687:'supports_environments')
    SYNTAX_VALIDATORS ={'metadata_version':(METADATA_VERSION_MATCHER ,()),'name':(NAME_MATCHER ,('legacy',)),'version':(VERSION_MATCHER ,('legacy',)),'summary':(SUMMARY_MATCHER ,('legacy',)),}#line:694:}
    __slots__ =('_legacy','_data','scheme')#line:696:__slots__ = ('_legacy', '_data', 'scheme')
    def __init__ (OOOOO00OOOOO00O00 ,path =None ,fileobj =None ,mapping =None ,scheme ='default'):#line:699:scheme='default'):
        if [path ,fileobj ,mapping ].count (None )<2 :#line:700:if [path, fileobj, mapping].count(None) < 2:
            raise TypeError ('path, fileobj and mapping are exclusive')#line:701:raise TypeError('path, fileobj and mapping are exclusive')
        OOOOO00OOOOO00O00 ._legacy =None #line:702:self._legacy = None
        OOOOO00OOOOO00O00 ._data =None #line:703:self._data = None
        OOOOO00OOOOO00O00 .scheme =scheme #line:704:self.scheme = scheme
        if mapping is not None :#line:706:if mapping is not None:
            try :#line:707:try:
                OOOOO00OOOOO00O00 ._validate_mapping (mapping ,scheme )#line:708:self._validate_mapping(mapping, scheme)
                OOOOO00OOOOO00O00 ._data =mapping #line:709:self._data = mapping
            except MetadataUnrecognizedVersionError :#line:710:except MetadataUnrecognizedVersionError:
                OOOOO00OOOOO00O00 ._legacy =OO000OOOOO0OOO0O0 (mapping =mapping ,scheme =scheme )#line:711:self._legacy = LegacyMetadata(mapping=mapping, scheme=scheme)
                OOOOO00OOOOO00O00 .validate ()#line:712:self.validate()
        else :#line:713:else:
            O0O0OOO000OOO00OO =None #line:714:data = None
            if path :#line:715:if path:
                with open (path ,'rb')as O00000O0O0OOO0O00 :#line:716:with open(path, 'rb') as f:
                    O0O0OOO000OOO00OO =O00000O0O0OOO0O00 .read ()#line:717:data = f.read()
            elif fileobj :#line:718:elif fileobj:
                O0O0OOO000OOO00OO =fileobj .read ()#line:719:data = fileobj.read()
            if O0O0OOO000OOO00OO is None :#line:720:if data is None:
                OOOOO00OOOOO00O00 ._data ={'metadata_version':OOOOO00OOOOO00O00 .METADATA_VERSION ,'generator':OOOOO00OOOOO00O00 .GENERATOR ,}#line:725:}
            else :#line:726:else:
                if not isinstance (O0O0OOO000OOO00OO ,text_type ):#line:727:if not isinstance(data, text_type):
                    O0O0OOO000OOO00OO =O0O0OOO000OOO00OO .decode ('utf-8')#line:728:data = data.decode('utf-8')
                try :#line:729:try:
                    OOOOO00OOOOO00O00 ._data =json .loads (O0O0OOO000OOO00OO )#line:730:self._data = json.loads(data)
                    OOOOO00OOOOO00O00 ._validate_mapping (OOOOO00OOOOO00O00 ._data ,scheme )#line:731:self._validate_mapping(self._data, scheme)
                except ValueError :#line:732:except ValueError:
                    OOOOO00OOOOO00O00 ._legacy =OO000OOOOO0OOO0O0 (fileobj =StringIO (O0O0OOO000OOO00OO ),scheme =scheme )#line:740:scheme=scheme)
                    OOOOO00OOOOO00O00 .validate ()#line:741:self.validate()
    common_keys =set (('name','version','license','keywords','summary'))#line:743:common_keys = set(('name', 'version', 'license', 'keywords', 'summary'))
    none_list =(None ,list )#line:745:none_list = (None, list)
    none_dict =(None ,dict )#line:746:none_dict = (None, dict)
    mapped_keys ={'run_requires':('Requires-Dist',list ),'build_requires':('Setup-Requires-Dist',list ),'dev_requires':none_list ,'test_requires':none_list ,'meta_requires':none_list ,'extras':('Provides-Extra',list ),'modules':none_list ,'namespaces':none_list ,'exports':none_dict ,'commands':none_dict ,'classifiers':('Classifier',list ),'source_url':('Download-URL',None ),'metadata_version':('Metadata-Version',None ),}#line:762:}
    del none_list ,none_dict #line:764:del none_list, none_dict
    def __getattribute__ (OO00000OOO00000OO ,OOO0OO000OOOOO0OO ):#line:766:def __getattribute__(self, key):
        O00O000OO0O0000O0 =object .__getattribute__ (OO00000OOO00000OO ,'common_keys')#line:767:common = object.__getattribute__(self, 'common_keys')
        O0O0O00OO00O000OO =object .__getattribute__ (OO00000OOO00000OO ,'mapped_keys')#line:768:mapped = object.__getattribute__(self, 'mapped_keys')
        if OOO0OO000OOOOO0OO in O0O0O00OO00O000OO :#line:769:if key in mapped:
            O0O00OOOO0OO00000 ,OO0000OO000OO000O =O0O0O00OO00O000OO [OOO0OO000OOOOO0OO ]#line:770:lk, maker = mapped[key]
            if OO00000OOO00000OO ._legacy :#line:771:if self._legacy:
                if O0O00OOOO0OO00000 is None :#line:772:if lk is None:
                    O00000O0OOO0O000O =None if OO0000OO000OO000O is None else OO0000OO000OO000O ()#line:773:result = None if maker is None else maker()
                else :#line:774:else:
                    O00000O0OOO0O000O =OO00000OOO00000OO ._legacy .get (O0O00OOOO0OO00000 )#line:775:result = self._legacy.get(lk)
            else :#line:776:else:
                O0O00O0O0OO0OOOOO =None if OO0000OO000OO000O is None else OO0000OO000OO000O ()#line:777:value = None if maker is None else maker()
                if OOO0OO000OOOOO0OO not in ('commands','exports','modules','namespaces','classifiers'):#line:779:'classifiers'):
                    O00000O0OOO0O000O =OO00000OOO00000OO ._data .get (OOO0OO000OOOOO0OO ,O0O00O0O0OO0OOOOO )#line:780:result = self._data.get(key, value)
                else :#line:781:else:
                    OOOO00OO0O00O0O00 =object ()#line:783:sentinel = object()
                    O00000O0OOO0O000O =OOOO00OO0O00O0O00 #line:784:result = sentinel
                    OO00OO0O00000OOOO =OO00000OOO00000OO ._data .get ('extensions')#line:785:d = self._data.get('extensions')
                    if OO00OO0O00000OOOO :#line:786:if d:
                        if OOO0OO000OOOOO0OO =='commands':#line:787:if key == 'commands':
                            O00000O0OOO0O000O =OO00OO0O00000OOOO .get ('python.commands',O0O00O0O0OO0OOOOO )#line:788:result = d.get('python.commands', value)
                        elif OOO0OO000OOOOO0OO =='classifiers':#line:789:elif key == 'classifiers':
                            OO00OO0O00000OOOO =OO00OO0O00000OOOO .get ('python.details')#line:790:d = d.get('python.details')
                            if OO00OO0O00000OOOO :#line:791:if d:
                                O00000O0OOO0O000O =OO00OO0O00000OOOO .get (OOO0OO000OOOOO0OO ,O0O00O0O0OO0OOOOO )#line:792:result = d.get(key, value)
                        else :#line:793:else:
                            OO00OO0O00000OOOO =OO00OO0O00000OOOO .get ('python.exports')#line:794:d = d.get('python.exports')
                            if not OO00OO0O00000OOOO :#line:795:if not d:
                                OO00OO0O00000OOOO =OO00000OOO00000OO ._data .get ('python.exports')#line:796:d = self._data.get('python.exports')
                            if OO00OO0O00000OOOO :#line:797:if d:
                                O00000O0OOO0O000O =OO00OO0O00000OOOO .get (OOO0OO000OOOOO0OO ,O0O00O0O0OO0OOOOO )#line:798:result = d.get(key, value)
                    if O00000O0OOO0O000O is OOOO00OO0O00O0O00 :#line:799:if result is sentinel:
                        O00000O0OOO0O000O =O0O00O0O0OO0OOOOO #line:800:result = value
        elif OOO0OO000OOOOO0OO not in O00O000OO0O0000O0 :#line:801:elif key not in common:
            O00000O0OOO0O000O =object .__getattribute__ (OO00000OOO00000OO ,OOO0OO000OOOOO0OO )#line:802:result = object.__getattribute__(self, key)
        elif OO00000OOO00000OO ._legacy :#line:803:elif self._legacy:
            O00000O0OOO0O000O =OO00000OOO00000OO ._legacy .get (OOO0OO000OOOOO0OO )#line:804:result = self._legacy.get(key)
        else :#line:805:else:
            O00000O0OOO0O000O =OO00000OOO00000OO ._data .get (OOO0OO000OOOOO0OO )#line:806:result = self._data.get(key)
        return O00000O0OOO0O000O #line:807:return result
    def _validate_value (O0O0OOOO000O000OO ,O00OOO00O0O0000O0 ,O000O0O0O000OOO00 ,scheme =None ):#line:809:def _validate_value(self, key, value, scheme=None):
        if O00OOO00O0O0000O0 in O0O0OOOO000O000OO .SYNTAX_VALIDATORS :#line:810:if key in self.SYNTAX_VALIDATORS:
            OOOO00O00O0O0O0O0 ,OOO00O00O0O0O0000 =O0O0OOOO000O000OO .SYNTAX_VALIDATORS [O00OOO00O0O0000O0 ]#line:811:pattern, exclusions = self.SYNTAX_VALIDATORS[key]
            if (scheme or O0O0OOOO000O000OO .scheme )not in OOO00O00O0O0O0000 :#line:812:if (scheme or self.scheme) not in exclusions:
                OO0O00O00OO0OO0OO =OOOO00O00O0O0O0O0 .match (O000O0O0O000OOO00 )#line:813:m = pattern.match(value)
                if not OO0O00O00OO0OO0OO :#line:814:if not m:
                    raise MetadataInvalidError ("'%s' is an invalid value for " "the '%s' property"%(O000O0O0O000OOO00 ,O00OOO00O0O0000O0 ))#line:817:key))
    def __setattr__ (O0OOO0O0OO00OO0OO ,OO000OO000OOOOOO0 ,OOO0O0OO00O0OOOO0 ):#line:819:def __setattr__(self, key, value):
        O0OOO0O0OO00OO0OO ._validate_value (OO000OO000OOOOOO0 ,OOO0O0OO00O0OOOO0 )#line:820:self._validate_value(key, value)
        OOOO00OOO0OOOO0O0 =object .__getattribute__ (O0OOO0O0OO00OO0OO ,'common_keys')#line:821:common = object.__getattribute__(self, 'common_keys')
        OO0OO00O00O00O0O0 =object .__getattribute__ (O0OOO0O0OO00OO0OO ,'mapped_keys')#line:822:mapped = object.__getattribute__(self, 'mapped_keys')
        if OO000OO000OOOOOO0 in OO0OO00O00O00O0O0 :#line:823:if key in mapped:
            O000O0OOO0OOOO00O ,_O0O00OOO0O000O0OO =OO0OO00O00O00O0O0 [OO000OO000OOOOOO0 ]#line:824:lk, _ = mapped[key]
            if O0OOO0O0OO00OO0OO ._legacy :#line:825:if self._legacy:
                if O000O0OOO0OOOO00O is None :#line:826:if lk is None:
                    raise NotImplementedError #line:827:raise NotImplementedError
                O0OOO0O0OO00OO0OO ._legacy [O000O0OOO0OOOO00O ]=OOO0O0OO00O0OOOO0 #line:828:self._legacy[lk] = value
            elif OO000OO000OOOOOO0 not in ('commands','exports','modules','namespaces','classifiers'):#line:830:'classifiers'):
                O0OOO0O0OO00OO0OO ._data [OO000OO000OOOOOO0 ]=OOO0O0OO00O0OOOO0 #line:831:self._data[key] = value
            else :#line:832:else:
                OO00OOOO0O0OO0O0O =O0OOO0O0OO00OO0OO ._data .setdefault ('extensions',{})#line:834:d = self._data.setdefault('extensions', {})
                if OO000OO000OOOOOO0 =='commands':#line:835:if key == 'commands':
                    OO00OOOO0O0OO0O0O ['python.commands']=OOO0O0OO00O0OOOO0 #line:836:d['python.commands'] = value
                elif OO000OO000OOOOOO0 =='classifiers':#line:837:elif key == 'classifiers':
                    OO00OOOO0O0OO0O0O =OO00OOOO0O0OO0O0O .setdefault ('python.details',{})#line:838:d = d.setdefault('python.details', {})
                    OO00OOOO0O0OO0O0O [OO000OO000OOOOOO0 ]=OOO0O0OO00O0OOOO0 #line:839:d[key] = value
                else :#line:840:else:
                    OO00OOOO0O0OO0O0O =OO00OOOO0O0OO0O0O .setdefault ('python.exports',{})#line:841:d = d.setdefault('python.exports', {})
                    OO00OOOO0O0OO0O0O [OO000OO000OOOOOO0 ]=OOO0O0OO00O0OOOO0 #line:842:d[key] = value
        elif OO000OO000OOOOOO0 not in OOOO00OOO0OOOO0O0 :#line:843:elif key not in common:
            object .__setattr__ (O0OOO0O0OO00OO0OO ,OO000OO000OOOOOO0 ,OOO0O0OO00O0OOOO0 )#line:844:object.__setattr__(self, key, value)
        else :#line:845:else:
            if OO000OO000OOOOOO0 =='keywords':#line:846:if key == 'keywords':
                if isinstance (OOO0O0OO00O0OOOO0 ,string_types ):#line:847:if isinstance(value, string_types):
                    OOO0O0OO00O0OOOO0 =OOO0O0OO00O0OOOO0 .strip ()#line:848:value = value.strip()
                    if OOO0O0OO00O0OOOO0 :#line:849:if value:
                        OOO0O0OO00O0OOOO0 =OOO0O0OO00O0OOOO0 .split ()#line:850:value = value.split()
                    else :#line:851:else:
                        OOO0O0OO00O0OOOO0 =[]#line:852:value = []
            if O0OOO0O0OO00OO0OO ._legacy :#line:853:if self._legacy:
                O0OOO0O0OO00OO0OO ._legacy [OO000OO000OOOOOO0 ]=OOO0O0OO00O0OOOO0 #line:854:self._legacy[key] = value
            else :#line:855:else:
                O0OOO0O0OO00OO0OO ._data [OO000OO000OOOOOO0 ]=OOO0O0OO00O0OOOO0 #line:856:self._data[key] = value
    @property #line:858:@property
    def name_and_version (O00O00OO0OO0OO000 ):#line:859:def name_and_version(self):
        return _O0OOO0OOO00OOO0OO (O00O00OO0OO0OO000 .name ,O00O00OO0OO0OO000 .version ,True )#line:860:return _get_name_and_version(self.name, self.version, True)
    @property #line:862:@property
    def provides (OO0OO0O000000O0O0 ):#line:863:def provides(self):
        if OO0OO0O000000O0O0 ._legacy :#line:864:if self._legacy:
            OO00O000OO00000OO =OO0OO0O000000O0O0 ._legacy ['Provides-Dist']#line:865:result = self._legacy['Provides-Dist']
        else :#line:866:else:
            OO00O000OO00000OO =OO0OO0O000000O0O0 ._data .setdefault ('provides',[])#line:867:result = self._data.setdefault('provides', [])
        O0000000O0OOO00OO ='%s (%s)'%(OO0OO0O000000O0O0 .name ,OO0OO0O000000O0O0 .version )#line:868:s = '%s (%s)' % (self.name, self.version)
        if O0000000O0OOO00OO not in OO00O000OO00000OO :#line:869:if s not in result:
            OO00O000OO00000OO .append (O0000000O0OOO00OO )#line:870:result.append(s)
        return OO00O000OO00000OO #line:871:return result
    @provides .setter #line:873:@provides.setter
    def provides (O0O000O00O0OOO0OO ,O0000000O00OO0O0O ):#line:874:def provides(self, value):
        if O0O000O00O0OOO0OO ._legacy :#line:875:if self._legacy:
            O0O000O00O0OOO0OO ._legacy ['Provides-Dist']=O0000000O00OO0O0O #line:876:self._legacy['Provides-Dist'] = value
        else :#line:877:else:
            O0O000O00O0OOO0OO ._data ['provides']=O0000000O00OO0O0O #line:878:self._data['provides'] = value
    def get_requirements (O0O000OO0O00OOOOO ,O0OOOOO0O00000000 ,extras =None ,env =None ):#line:880:def get_requirements(self, reqts, extras=None, env=None):
        ""#line:888:"""
        if O0O000OO0O00OOOOO ._legacy :#line:889:if self._legacy:
            OO0O00000O0O000OO =O0OOOOO0O00000000 #line:890:result = reqts
        else :#line:891:else:
            OO0O00000O0O000OO =[]#line:892:result = []
            extras =get_extras (extras or [],O0O000OO0O00OOOOO .extras )#line:893:extras = get_extras(extras or [], self.extras)
            for OO0OO0OOO00O0OOO0 in O0OOOOO0O00000000 :#line:894:for d in reqts:
                if 'extra'not in OO0OO0OOO00O0OOO0 and 'environment'not in OO0OO0OOO00O0OOO0 :#line:895:if 'extra' not in d and 'environment' not in d:
                    OO0O0O000OO0O00O0 =True #line:897:include = True
                else :#line:898:else:
                    if 'extra'not in OO0OO0OOO00O0OOO0 :#line:899:if 'extra' not in d:
                        OO0O0O000OO0O00O0 =True #line:901:include = True
                    else :#line:902:else:
                        OO0O0O000OO0O00O0 =OO0OO0OOO00O0OOO0 .get ('extra')in extras #line:903:include = d.get('extra') in extras
                    if OO0O0O000OO0O00O0 :#line:904:if include:
                        O00000O0O0O00OOO0 =OO0OO0OOO00O0OOO0 .get ('environment')#line:906:marker = d.get('environment')
                        if O00000O0O0O00OOO0 :#line:907:if marker:
                            OO0O0O000OO0O00O0 =interpret (O00000O0O0O00OOO0 ,env )#line:908:include = interpret(marker, env)
                if OO0O0O000OO0O00O0 :#line:909:if include:
                    OO0O00000O0O000OO .extend (OO0OO0OOO00O0OOO0 ['requires'])#line:910:result.extend(d['requires'])
            for OO0O0OOO0O0000OO0 in ('build','dev','test'):#line:911:for key in ('build', 'dev', 'test'):
                O000O0OOO00OOOOO0 =':%s:'%OO0O0OOO0O0000OO0 #line:912:e = ':%s:' % key
                if O000O0OOO00OOOOO0 in extras :#line:913:if e in extras:
                    extras .remove (O000O0OOO00OOOOO0 )#line:914:extras.remove(e)
                    O0OOOOO0O00000000 =O0O000OO0O00OOOOO ._data .get ('%s_requires'%OO0O0OOO0O0000OO0 ,[])#line:917:reqts = self._data.get('%s_requires' % key, [])
                    OO0O00000O0O000OO .extend (O0O000OO0O00OOOOO .get_requirements (O0OOOOO0O00000000 ,extras =extras ,env =env ))#line:919:env=env))
        return OO0O00000O0O000OO #line:920:return result
    @property #line:922:@property
    def dictionary (O0OOO0OO0O000OOO0 ):#line:923:def dictionary(self):
        if O0OOO0OO0O000OOO0 ._legacy :#line:924:if self._legacy:
            return O0OOO0OO0O000OOO0 ._from_legacy ()#line:925:return self._from_legacy()
        return O0OOO0OO0O000OOO0 ._data #line:926:return self._data
    @property #line:928:@property
    def dependencies (O00OOOOO0000OOOOO ):#line:929:def dependencies(self):
        if O00OOOOO0000OOOOO ._legacy :#line:930:if self._legacy:
            raise NotImplementedError #line:931:raise NotImplementedError
        else :#line:932:else:
            return extract_by_key (O00OOOOO0000OOOOO ._data ,O00OOOOO0000OOOOO .DEPENDENCY_KEYS )#line:933:return extract_by_key(self._data, self.DEPENDENCY_KEYS)
    @dependencies .setter #line:935:@dependencies.setter
    def dependencies (OOOO0OOOO0O0O0O0O ,OO00000OOOOOO0O00 ):#line:936:def dependencies(self, value):
        if OOOO0OOOO0O0O0O0O ._legacy :#line:937:if self._legacy:
            raise NotImplementedError #line:938:raise NotImplementedError
        else :#line:939:else:
            OOOO0OOOO0O0O0O0O ._data .update (OO00000OOOOOO0O00 )#line:940:self._data.update(value)
    def _validate_mapping (OOO00000OOO0O0OOO ,OO0O00OOO00OO0000 ,OO00O0O0O000O0OOO ):#line:942:def _validate_mapping(self, mapping, scheme):
        if OO0O00OOO00OO0000 .get ('metadata_version')!=OOO00000OOO0O0OOO .METADATA_VERSION :#line:943:if mapping.get('metadata_version') != self.METADATA_VERSION:
            raise MetadataUnrecognizedVersionError ()#line:944:raise MetadataUnrecognizedVersionError()
        OOOO0O00O000OOO0O =[]#line:945:missing = []
        for O00OOOOO0OO00O0OO ,OOOOO00OO0O00OO00 in OOO00000OOO0O0OOO .MANDATORY_KEYS .items ():#line:946:for key, exclusions in self.MANDATORY_KEYS.items():
            if O00OOOOO0OO00O0OO not in OO0O00OOO00OO0000 :#line:947:if key not in mapping:
                if OO00O0O0O000O0OOO not in OOOOO00OO0O00OO00 :#line:948:if scheme not in exclusions:
                    OOOO0O00O000OOO0O .append (O00OOOOO0OO00O0OO )#line:949:missing.append(key)
        if OOOO0O00O000OOO0O :#line:950:if missing:
            OO0O000OOO0OO0O00 ='Missing metadata items: %s'%', '.join (OOOO0O00O000OOO0O )#line:951:msg = 'Missing metadata items: %s' % ', '.join(missing)
            raise MetadataMissingError (OO0O000OOO0OO0O00 )#line:952:raise MetadataMissingError(msg)
        for OOO0O0O00O000OOOO ,OOO0O00O000O0O0O0 in OO0O00OOO00OO0000 .items ():#line:953:for k, v in mapping.items():
            OOO00000OOO0O0OOO ._validate_value (OOO0O0O00O000OOOO ,OOO0O00O000O0O0O0 ,OO00O0O0O000O0OOO )#line:954:self._validate_value(k, v, scheme)
    def validate (O000OO000OO0OOO0O ):#line:956:def validate(self):
        if O000OO000OO0OOO0O ._legacy :#line:957:if self._legacy:
            O0OO0000000O00000 ,OO00000O0000OOO00 =O000OO000OO0OOO0O ._legacy .check (True )#line:958:missing, warnings = self._legacy.check(True)
            if O0OO0000000O00000 or OO00000O0000OOO00 :#line:959:if missing or warnings:
                O0OO0O0OOO0OOOO00 .warning ('Metadata: missing: %s, warnings: %s',O0OO0000000O00000 ,OO00000O0000OOO00 )#line:961:missing, warnings)
        else :#line:962:else:
            O000OO000OO0OOO0O ._validate_mapping (O000OO000OO0OOO0O ._data ,O000OO000OO0OOO0O .scheme )#line:963:self._validate_mapping(self._data, self.scheme)
    def todict (O00O00000OOOOOO00 ):#line:965:def todict(self):
        if O00O00000OOOOOO00 ._legacy :#line:966:if self._legacy:
            return O00O00000OOOOOO00 ._legacy .todict (True )#line:967:return self._legacy.todict(True)
        else :#line:968:else:
            OOO0O00O0OOOO0O0O =extract_by_key (O00O00000OOOOOO00 ._data ,O00O00000OOOOOO00 .INDEX_KEYS )#line:969:result = extract_by_key(self._data, self.INDEX_KEYS)
            return OOO0O00O0OOOO0O0O #line:970:return result
    def _from_legacy (OO0OOO0O0OOO0O00O ):#line:972:def _from_legacy(self):
        assert OO0OOO0O0OOO0O00O ._legacy and not OO0OOO0O0OOO0O00O ._data #line:973:assert self._legacy and not self._data
        OOO0OOOOO000O0O00 ={'metadata_version':OO0OOO0O0OOO0O00O .METADATA_VERSION ,'generator':OO0OOO0O0OOO0O00O .GENERATOR ,}#line:977:}
        O0OOOOOOOOOOOOO00 =OO0OOO0O0OOO0O00O ._legacy .todict (True )#line:978:lmd = self._legacy.todict(True)     # skip missing ones
        for O0OO0OOO0O0O0000O in ('name','version','license','summary','description','classifier'):#line:980:'classifier'):
            if O0OO0OOO0O0O0000O in O0OOOOOOOOOOOOO00 :#line:981:if k in lmd:
                if O0OO0OOO0O0O0000O =='classifier':#line:982:if k == 'classifier':
                    OOOOO00OOO0O0O000 ='classifiers'#line:983:nk = 'classifiers'
                else :#line:984:else:
                    OOOOO00OOO0O0O000 =O0OO0OOO0O0O0000O #line:985:nk = k
                OOO0OOOOO000O0O00 [OOOOO00OOO0O0O000 ]=O0OOOOOOOOOOOOO00 [O0OO0OOO0O0O0000O ]#line:986:result[nk] = lmd[k]
        O0OO0O00OOO000OO0 =O0OOOOOOOOOOOOO00 .get ('Keywords',[])#line:987:kw = lmd.get('Keywords', [])
        if O0OO0O00OOO000OO0 ==['']:#line:988:if kw == ['']:
            O0OO0O00OOO000OO0 =[]#line:989:kw = []
        OOO0OOOOO000O0O00 ['keywords']=O0OO0O00OOO000OO0 #line:990:result['keywords'] = kw
        OO0O000O0OOO0OO0O =(('requires_dist','run_requires'),('setup_requires_dist','build_requires'))#line:992:('setup_requires_dist', 'build_requires'))
        for O0O0O0O0O0OO0OOOO ,OOOOO00OOO0O0O000 in OO0O000O0OOO0OO0O :#line:993:for ok, nk in keys:
            if O0O0O0O0O0OO0OOOO in O0OOOOOOOOOOOOO00 and O0OOOOOOOOOOOOO00 [O0O0O0O0O0OO0OOOO ]:#line:994:if ok in lmd and lmd[ok]:
                OOO0OOOOO000O0O00 [OOOOO00OOO0O0O000 ]=[{'requires':O0OOOOOOOOOOOOO00 [O0O0O0O0O0OO0OOOO ]}]#line:995:result[nk] = [{'requires': lmd[ok]}]
        OOO0OOOOO000O0O00 ['provides']=OO0OOO0O0OOO0O00O .provides #line:996:result['provides'] = self.provides
        O000O0000000O0OOO ={}#line:997:author = {}
        OO0OO00OO00OO00O0 ={}#line:998:maintainer = {}
        return OOO0OOOOO000O0O00 #line:999:return result
    LEGACY_MAPPING ={'name':'Name','version':'Version','license':'License','summary':'Summary','description':'Description','classifiers':'Classifier',}#line:1008:}
    def _to_legacy (OO0OOO00000O0000O ):#line:1010:def _to_legacy(self):
        def OOO0OOOO0O0000O0O (O0O0OOOO00OO000OO ):#line:1011:def process_entries(entries):
            O0O00O0O000OOO0OO =set ()#line:1012:reqts = set()
            for O0OOOO00OOO0O00OO in O0O0OOOO00OO000OO :#line:1013:for e in entries:
                O00O0OOO000000OOO =O0OOOO00OOO0O00OO .get ('extra')#line:1014:extra = e.get('extra')
                O0OO0OO000O00OOOO =O0OOOO00OOO0O00OO .get ('environment')#line:1015:env = e.get('environment')
                OO00OO0O0O00OO000 =O0OOOO00OOO0O00OO ['requires']#line:1016:rlist = e['requires']
                for O0O0OO000O0000000 in OO00OO0O0O00OO000 :#line:1017:for r in rlist:
                    if not O0OO0OO000O00OOOO and not O00O0OOO000000OOO :#line:1018:if not env and not extra:
                        O0O00O0O000OOO0OO .add (O0O0OO000O0000000 )#line:1019:reqts.add(r)
                    else :#line:1020:else:
                        O00000OO00OO0OOOO =''#line:1021:marker = ''
                        if O00O0OOO000000OOO :#line:1022:if extra:
                            O00000OO00OO0OOOO ='extra == "%s"'%O00O0OOO000000OOO #line:1023:marker = 'extra == "%s"' % extra
                        if O0OO0OO000O00OOOO :#line:1024:if env:
                            if O00000OO00OO0OOOO :#line:1025:if marker:
                                O00000OO00OO0OOOO ='(%s) and %s'%(O0OO0OO000O00OOOO ,O00000OO00OO0OOOO )#line:1026:marker = '(%s) and %s' % (env, marker)
                            else :#line:1027:else:
                                O00000OO00OO0OOOO =O0OO0OO000O00OOOO #line:1028:marker = env
                        O0O00O0O000OOO0OO .add (';'.join ((O0O0OO000O0000000 ,O00000OO00OO0OOOO )))#line:1029:reqts.add(';'.join((r, marker)))
            return O0O00O0O000OOO0OO #line:1030:return reqts
        assert OO0OOO00000O0000O ._data and not OO0OOO00000O0000O ._legacy #line:1032:assert self._data and not self._legacy
        O0O0O0OO0O0OOO0O0 =OO000OOOOO0OOO0O0 ()#line:1033:result = LegacyMetadata()
        OOO00O00O0OOO0000 =OO0OOO00000O0000O ._data #line:1034:nmd = self._data
        for O0OOO0OO0000000OO ,O0OO0O0O00O00OO0O in OO0OOO00000O0000O .LEGACY_MAPPING .items ():#line:1035:for nk, ok in self.LEGACY_MAPPING.items():
            if O0OOO0OO0000000OO in OOO00O00O0OOO0000 :#line:1036:if nk in nmd:
                O0O0O0OO0O0OOO0O0 [O0OO0O0O00O00OO0O ]=OOO00O00O0OOO0000 [O0OOO0OO0000000OO ]#line:1037:result[ok] = nmd[nk]
        OOO000OO0000O0O00 =OOO0OOOO0O0000O0O (OO0OOO00000O0000O .run_requires +OO0OOO00000O0000O .meta_requires )#line:1038:r1 = process_entries(self.run_requires + self.meta_requires)
        OO0O0O00OO0OO0O0O =OOO0OOOO0O0000O0O (OO0OOO00000O0000O .build_requires +OO0OOO00000O0000O .dev_requires )#line:1039:r2 = process_entries(self.build_requires + self.dev_requires)
        if OO0OOO00000O0000O .extras :#line:1040:if self.extras:
            O0O0O0OO0O0OOO0O0 ['Provides-Extra']=sorted (OO0OOO00000O0000O .extras )#line:1041:result['Provides-Extra'] = sorted(self.extras)
        O0O0O0OO0O0OOO0O0 ['Requires-Dist']=sorted (OOO000OO0000O0O00 )#line:1042:result['Requires-Dist'] = sorted(r1)
        O0O0O0OO0O0OOO0O0 ['Setup-Requires-Dist']=sorted (OO0O0O00OO0OO0O0O )#line:1043:result['Setup-Requires-Dist'] = sorted(r2)
        return O0O0O0OO0O0OOO0O0 #line:1045:return result
    def write (OOO000O0O000000O0 ,path =None ,fileobj =None ,legacy =False ,skip_unknown =True ):#line:1047:def write(self, path=None, fileobj=None, legacy=False, skip_unknown=True):
        if [path ,fileobj ].count (None )!=1 :#line:1048:if [path, fileobj].count(None) != 1:
            raise ValueError ('Exactly one of path and fileobj is needed')#line:1049:raise ValueError('Exactly one of path and fileobj is needed')
        OOO000O0O000000O0 .validate ()#line:1050:self.validate()
        if legacy :#line:1051:if legacy:
            if OOO000O0O000000O0 ._legacy :#line:1052:if self._legacy:
                O00000000OO00O00O =OOO000O0O000000O0 ._legacy #line:1053:legacy_md = self._legacy
            else :#line:1054:else:
                O00000000OO00O00O =OOO000O0O000000O0 ._to_legacy ()#line:1055:legacy_md = self._to_legacy()
            if path :#line:1056:if path:
                O00000000OO00O00O .write (path ,skip_unknown =skip_unknown )#line:1057:legacy_md.write(path, skip_unknown=skip_unknown)
            else :#line:1058:else:
                O00000000OO00O00O .write_file (fileobj ,skip_unknown =skip_unknown )#line:1059:legacy_md.write_file(fileobj, skip_unknown=skip_unknown)
        else :#line:1060:else:
            if OOO000O0O000000O0 ._legacy :#line:1061:if self._legacy:
                OO0000OOOOO00O000 =OOO000O0O000000O0 ._from_legacy ()#line:1062:d = self._from_legacy()
            else :#line:1063:else:
                OO0000OOOOO00O000 =OOO000O0O000000O0 ._data #line:1064:d = self._data
            if fileobj :#line:1065:if fileobj:
                json .dump (OO0000OOOOO00O000 ,fileobj ,ensure_ascii =True ,indent =2 ,sort_keys =True )#line:1067:sort_keys=True)
            else :#line:1068:else:
                with codecs .open (path ,'w','utf-8')as O0O000OO00OOO00OO :#line:1069:with codecs.open(path, 'w', 'utf-8') as f:
                    json .dump (OO0000OOOOO00O000 ,O0O000OO00OOO00OO ,ensure_ascii =True ,indent =2 ,sort_keys =True )#line:1071:sort_keys=True)
    def add_requirements (O0OOOO0OOOO00000O ,OOO0O00OO0OO0OOO0 ):#line:1073:def add_requirements(self, requirements):
        if O0OOOO0OOOO00000O ._legacy :#line:1074:if self._legacy:
            O0OOOO0OOOO00000O ._legacy .add_requirements (OOO0O00OO0OO0OOO0 )#line:1075:self._legacy.add_requirements(requirements)
        else :#line:1076:else:
            O0O00OO0OOO0O000O =O0OOOO0OOOO00000O ._data .setdefault ('run_requires',[])#line:1077:run_requires = self._data.setdefault('run_requires', [])
            OOO000OO0OO00OOO0 =None #line:1078:always = None
            for O0O00OO0OOO0O0OOO in O0O00OO0OOO0O000O :#line:1079:for entry in run_requires:
                if 'environment'not in O0O00OO0OOO0O0OOO and 'extra'not in O0O00OO0OOO0O0OOO :#line:1080:if 'environment' not in entry and 'extra' not in entry:
                    OOO000OO0OO00OOO0 =O0O00OO0OOO0O0OOO #line:1081:always = entry
                    break #line:1082:break
            if OOO000OO0OO00OOO0 is None :#line:1083:if always is None:
                OOO000OO0OO00OOO0 ={'requires':OOO0O00OO0OO0OOO0 }#line:1084:always = { 'requires': requirements }
                O0O00OO0OOO0O000O .insert (0 ,OOO000OO0OO00OOO0 )#line:1085:run_requires.insert(0, always)
            else :#line:1086:else:
                O00O000000OO0O00O =set (OOO000OO0OO00OOO0 ['requires'])|set (OOO0O00OO0OO0OOO0 )#line:1087:rset = set(always['requires']) | set(requirements)
                OOO000OO0OO00OOO0 ['requires']=sorted (O00O000000OO0O00O )#line:1088:always['requires'] = sorted(rset)
    def __repr__ (O0OO000O0O0O00O0O ):#line:1090:def __repr__(self):
        OO0O0O0000OOOO0OO =O0OO000O0O0O00O0O .name or '(no name)'#line:1091:name = self.name or '(no name)'
        OOO0OOOO0000O0000 =O0OO000O0O0O00O0O .version or 'no version'#line:1092:version = self.version or 'no version'
        return '<%s %s %s (%s)>'%(O0OO000O0O0O00O0O .__class__ .__name__ ,O0OO000O0O0O00O0O .metadata_version ,OO0O0O0000OOOO0OO ,OOO0OOOO0000O0000 )#line:1094:self.metadata_version, name, version)
