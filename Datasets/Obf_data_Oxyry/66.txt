""#line:9:"""
import os #line:10:import os
import sys #line:11:import sys
import time #line:12:import time
from datetime import timedelta #line:13:from datetime import timedelta
from .auth import _basic_auth_str #line:15:from .auth import _basic_auth_str
from .compat import cookielib ,is_py3 ,OrderedDict ,urljoin ,urlparse ,Mapping #line:16:from .compat import cookielib, is_py3, OrderedDict, urljoin, urlparse, Mapping
from .cookies import (cookiejar_from_dict ,extract_cookies_to_jar ,RequestsCookieJar ,merge_cookies )#line:18:cookiejar_from_dict, extract_cookies_to_jar, RequestsCookieJar, merge_cookies)
from .models import Request ,PreparedRequest ,DEFAULT_REDIRECT_LIMIT #line:19:from .models import Request, PreparedRequest, DEFAULT_REDIRECT_LIMIT
from .hooks import default_hooks ,dispatch_hook #line:20:from .hooks import default_hooks, dispatch_hook
from ._internal_utils import to_native_string #line:21:from ._internal_utils import to_native_string
from .utils import to_key_val_list ,default_headers ,DEFAULT_PORTS #line:22:from .utils import to_key_val_list, default_headers, DEFAULT_PORTS
from .exceptions import (TooManyRedirects ,InvalidSchema ,ChunkedEncodingError ,ContentDecodingError )#line:24:TooManyRedirects, InvalidSchema, ChunkedEncodingError, ContentDecodingError)
from .structures import CaseInsensitiveDict #line:26:from .structures import CaseInsensitiveDict
from .adapters import HTTPAdapter #line:27:from .adapters import HTTPAdapter
from .utils import (requote_uri ,get_environ_proxies ,get_netrc_auth ,should_bypass_proxies ,get_auth_from_url ,rewind_body )#line:32:)
from .status_codes import codes #line:34:from .status_codes import codes
from .models import REDIRECT_STATI #line:37:from .models import REDIRECT_STATI
if sys .platform =='win32':#line:40:if sys.platform == 'win32':
    try :#line:41:try:  # Python 3.4+
        preferred_clock =time .perf_counter #line:42:preferred_clock = time.perf_counter
    except AttributeError :#line:43:except AttributeError:  # Earlier than Python 3.
        preferred_clock =time .clock #line:44:preferred_clock = time.clock
else :#line:45:else:
    preferred_clock =time .time #line:46:preferred_clock = time.time
def merge_setting (OO00OO00OOO000OO0 ,OO0OO00OO000OO000 ,dict_class =OrderedDict ):#line:49:def merge_setting(request_setting, session_setting, dict_class=OrderedDict):
    ""#line:53:"""
    if OO0OO00OO000OO000 is None :#line:55:if session_setting is None:
        return OO00OO00OOO000OO0 #line:56:return request_setting
    if OO00OO00OOO000OO0 is None :#line:58:if request_setting is None:
        return OO0OO00OO000OO000 #line:59:return session_setting
    if not (isinstance (OO0OO00OO000OO000 ,Mapping )and isinstance (OO00OO00OOO000OO0 ,Mapping )):#line:65:):
        return OO00OO00OOO000OO0 #line:66:return request_setting
    OO000O0O00O00OO00 =dict_class (to_key_val_list (OO0OO00OO000OO000 ))#line:68:merged_setting = dict_class(to_key_val_list(session_setting))
    OO000O0O00O00OO00 .update (to_key_val_list (OO00OO00OOO000OO0 ))#line:69:merged_setting.update(to_key_val_list(request_setting))
    O0O0000000000O00O =[O00OOO00OOOO00O0O for (O00OOO00OOOO00O0O ,O0O0O0O0OOO0OO0O0 )in OO000O0O00O00OO00 .items ()if O0O0O0O0OOO0OO0O0 is None ]#line:73:none_keys = [k for (k, v) in merged_setting.items() if v is None]
    for OOOO0OO00OO00O0OO in O0O0000000000O00O :#line:74:for key in none_keys:
        del OO000O0O00O00OO00 [OOOO0OO00OO00O0OO ]#line:75:del merged_setting[key]
    return OO000O0O00O00OO00 #line:77:return merged_setting
def merge_hooks (OOOOOO0OOOOOO00O0 ,OO0OOO0O000O0OO0O ,dict_class =OrderedDict ):#line:80:def merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):
    ""#line:85:"""
    if OO0OOO0O000O0OO0O is None or OO0OOO0O000O0OO0O .get ('response')==[]:#line:86:if session_hooks is None or session_hooks.get('response') == []:
        return OOOOOO0OOOOOO00O0 #line:87:return request_hooks
    if OOOOOO0OOOOOO00O0 is None or OOOOOO0OOOOOO00O0 .get ('response')==[]:#line:89:if request_hooks is None or request_hooks.get('response') == []:
        return OO0OOO0O000O0OO0O #line:90:return session_hooks
    return merge_setting (OOOOOO0OOOOOO00O0 ,OO0OOO0O000O0OO0O ,dict_class )#line:92:return merge_setting(request_hooks, session_hooks, dict_class)
class SessionRedirectMixin (object ):#line:95:class SessionRedirectMixin(object):
    def get_redirect_target (OO000O00000000000 ,OOO00OO00000000O0 ):#line:97:def get_redirect_target(self, resp):
        ""#line:98:"""Receives a Response. Returns a redirect URI or ``None``"""
        if OOO00OO00000000O0 .is_redirect :#line:105:if resp.is_redirect:
            O0OOO000OO0OO0O00 =OOO00OO00000000O0 .headers ['location']#line:106:location = resp.headers['location']
            if is_py3 :#line:113:if is_py3:
                O0OOO000OO0OO0O00 =O0OOO000OO0OO0O00 .encode ('latin1')#line:114:location = location.encode('latin1')
            return to_native_string (O0OOO000OO0OO0O00 ,'utf8')#line:115:return to_native_string(location, 'utf8')
        return None #line:116:return None
    def should_strip_auth (O00O0OO00OOOO00O0 ,O000O0O0O0O0OOO0O ,OOO00OOO00OO00O00 ):#line:118:def should_strip_auth(self, old_url, new_url):
        ""#line:119:"""Decide whether Authorization header should be removed when redirecting"""
        O00O0000O000000O0 =urlparse (O000O0O0O0O0OOO0O )#line:120:old_parsed = urlparse(old_url)
        OO00O00O0OO0OOOOO =urlparse (OOO00OOO00OO00O00 )#line:121:new_parsed = urlparse(new_url)
        if O00O0000O000000O0 .hostname !=OO00O00O0OO0OOOOO .hostname :#line:122:if old_parsed.hostname != new_parsed.hostname:
            return True #line:123:return True
        if (O00O0000O000000O0 .scheme =='http'and O00O0000O000000O0 .port in (80 ,None )and OO00O00O0OO0OOOOO .scheme =='https'and OO00O00O0OO0OOOOO .port in (443 ,None )):#line:129:and new_parsed.scheme == 'https' and new_parsed.port in (443, None)):
            return False #line:130:return False
        O0OOO0OO0000OO00O =O00O0000O000000O0 .port !=OO00O00O0OO0OOOOO .port #line:133:changed_port = old_parsed.port != new_parsed.port
        OO00OO00O0OOO0000 =O00O0000O000000O0 .scheme !=OO00O00O0OO0OOOOO .scheme #line:134:changed_scheme = old_parsed.scheme != new_parsed.scheme
        OOO00OO00O00O000O =(DEFAULT_PORTS .get (O00O0000O000000O0 .scheme ,None ),None )#line:135:default_port = (DEFAULT_PORTS.get(old_parsed.scheme, None), None)
        if (not OO00OO00O0OOO0000 and O00O0000O000000O0 .port in OOO00OO00O00O000O and OO00O00O0OO0OOOOO .port in OOO00OO00O00O000O ):#line:137:and new_parsed.port in default_port):
            return False #line:138:return False
        return O0OOO0OO0000OO00O or OO00OO00O0OOO0000 #line:141:return changed_port or changed_scheme
    def resolve_redirects (OO00O00OO0OO0OO0O ,OOO0OOOO00OO00OO0 ,O0O0OO00O0O00OO0O ,stream =False ,timeout =None ,verify =True ,cert =None ,proxies =None ,yield_requests =False ,**OO00OOO000O00O00O ):#line:144:verify=True, cert=None, proxies=None, yield_requests=False, **adapter_kwargs):
        ""#line:145:"""Receives a Response. Returns a generator of Responses or Requests."""
        O0O0OO000000OO0O0 =[]#line:147:hist = []  # keep track of history
        O000O00O000OOOO00 =OO00O00OO0OO0OO0O .get_redirect_target (OOO0OOOO00OO00OO0 )#line:149:url = self.get_redirect_target(resp)
        OO00O0000OOO00O0O =urlparse (O0O0OO00O0O00OO0O .url ).fragment #line:150:previous_fragment = urlparse(req.url).fragment
        while O000O00O000OOOO00 :#line:151:while url:
            O00OO0000O0O00O0O =O0O0OO00O0O00OO0O .copy ()#line:152:prepared_request = req.copy()
            O0O0OO000000OO0O0 .append (OOO0OOOO00OO00OO0 )#line:156:hist.append(resp)
            OOO0OOOO00OO00OO0 .history =O0O0OO000000OO0O0 [1 :]#line:157:resp.history = hist[1:]
            try :#line:159:try:
                OOO0OOOO00OO00OO0 .content #line:160:resp.content  # Consume socket so it can be released
            except (ChunkedEncodingError ,ContentDecodingError ,RuntimeError ):#line:161:except (ChunkedEncodingError, ContentDecodingError, RuntimeError):
                OOO0OOOO00OO00OO0 .raw .read (decode_content =False )#line:162:resp.raw.read(decode_content=False)
            if len (OOO0OOOO00OO00OO0 .history )>=OO00O00OO0OO0OO0O .max_redirects :#line:164:if len(resp.history) >= self.max_redirects:
                raise TooManyRedirects ('Exceeded %s redirects.'%OO00O00OO0OO0OO0O .max_redirects ,response =OOO0OOOO00OO00OO0 )#line:165:raise TooManyRedirects('Exceeded %s redirects.' % self.max_redirects, response=resp)
            OOO0OOOO00OO00OO0 .close ()#line:168:resp.close()
            if O000O00O000OOOO00 .startswith ('//'):#line:171:if url.startswith('//'):
                O0O00O0000000OOOO =urlparse (OOO0OOOO00OO00OO0 .url )#line:172:parsed_rurl = urlparse(resp.url)
                O000O00O000OOOO00 ='%s:%s'%(to_native_string (O0O00O0000000OOOO .scheme ),O000O00O000OOOO00 )#line:173:url = '%s:%s' % (to_native_string(parsed_rurl.scheme), url)
            OO00O000OOOO000O0 =urlparse (O000O00O000OOOO00 )#line:176:parsed = urlparse(url)
            if OO00O000OOOO000O0 .fragment ==''and OO00O0000OOO00O0O :#line:177:if parsed.fragment == '' and previous_fragment:
                OO00O000OOOO000O0 =OO00O000OOOO000O0 ._replace (fragment =OO00O0000OOO00O0O )#line:178:parsed = parsed._replace(fragment=previous_fragment)
            elif OO00O000OOOO000O0 .fragment :#line:179:elif parsed.fragment:
                OO00O0000OOO00O0O =OO00O000OOOO000O0 .fragment #line:180:previous_fragment = parsed.fragment
            O000O00O000OOOO00 =OO00O000OOOO000O0 .geturl ()#line:181:url = parsed.geturl()
            if not OO00O000OOOO000O0 .netloc :#line:186:if not parsed.netloc:
                O000O00O000OOOO00 =urljoin (OOO0OOOO00OO00OO0 .url ,requote_uri (O000O00O000OOOO00 ))#line:187:url = urljoin(resp.url, requote_uri(url))
            else :#line:188:else:
                O000O00O000OOOO00 =requote_uri (O000O00O000OOOO00 )#line:189:url = requote_uri(url)
            O00OO0000O0O00O0O .url =to_native_string (O000O00O000OOOO00 )#line:191:prepared_request.url = to_native_string(url)
            OO00O00OO0OO0OO0O .rebuild_method (O00OO0000O0O00O0O ,OOO0OOOO00OO00OO0 )#line:193:self.rebuild_method(prepared_request, resp)
            if OOO0OOOO00OO00OO0 .status_code not in (codes .temporary_redirect ,codes .permanent_redirect ):#line:196:if resp.status_code not in (codes.temporary_redirect, codes.permanent_redirect):
                OO0O0000OO0OO000O =('Content-Length','Content-Type','Transfer-Encoding')#line:198:purged_headers = ('Content-Length', 'Content-Type', 'Transfer-Encoding')
                for O00000O000OO0OO0O in OO0O0000OO0OO000O :#line:199:for header in purged_headers:
                    O00OO0000O0O00O0O .headers .pop (O00000O000OO0OO0O ,None )#line:200:prepared_request.headers.pop(header, None)
                O00OO0000O0O00O0O .body =None #line:201:prepared_request.body = None
            OOOOOO0OO000000OO =O00OO0000O0O00O0O .headers #line:203:headers = prepared_request.headers
            try :#line:204:try:
                del OOOOOO0OO000000OO ['Cookie']#line:205:del headers['Cookie']
            except KeyError :#line:206:except KeyError:
                pass #line:207:pass
            extract_cookies_to_jar (O00OO0000O0O00O0O ._cookies ,O0O0OO00O0O00OO0O ,OOO0OOOO00OO00OO0 .raw )#line:212:extract_cookies_to_jar(prepared_request._cookies, req, resp.raw)
            merge_cookies (O00OO0000O0O00O0O ._cookies ,OO00O00OO0OO0OO0O .cookies )#line:213:merge_cookies(prepared_request._cookies, self.cookies)
            O00OO0000O0O00O0O .prepare_cookies (O00OO0000O0O00O0O ._cookies )#line:214:prepared_request.prepare_cookies(prepared_request._cookies)
            proxies =OO00O00OO0OO0OO0O .rebuild_proxies (O00OO0000O0O00O0O ,proxies )#line:217:proxies = self.rebuild_proxies(prepared_request, proxies)
            OO00O00OO0OO0OO0O .rebuild_auth (O00OO0000O0O00O0O ,OOO0OOOO00OO00OO0 )#line:218:self.rebuild_auth(prepared_request, resp)
            OOOO0O0OO0O000OOO =(O00OO0000O0O00O0O ._body_position is not None and ('Content-Length'in OOOOOO0OO000000OO or 'Transfer-Encoding'in OOOOOO0OO000000OO ))#line:226:)
            if OOOO0O0OO0O000OOO :#line:229:if rewindable:
                rewind_body (O00OO0000O0O00O0O )#line:230:rewind_body(prepared_request)
            O0O0OO00O0O00OO0O =O00OO0000O0O00O0O #line:233:req = prepared_request
            if yield_requests :#line:235:if yield_requests:
                yield O0O0OO00O0O00OO0O #line:236:yield req
            else :#line:237:else:
                OOO0OOOO00OO00OO0 =OO00O00OO0OO0OO0O .send (O0O0OO00O0O00OO0O ,stream =stream ,timeout =timeout ,verify =verify ,cert =cert ,proxies =proxies ,allow_redirects =False ,**OO00OOO000O00O00O )#line:248:)
                extract_cookies_to_jar (OO00O00OO0OO0OO0O .cookies ,O00OO0000O0O00O0O ,OOO0OOOO00OO00OO0 .raw )#line:250:extract_cookies_to_jar(self.cookies, prepared_request, resp.raw)
                O000O00O000OOOO00 =OO00O00OO0OO0OO0O .get_redirect_target (OOO0OOOO00OO00OO0 )#line:253:url = self.get_redirect_target(resp)
                yield OOO0OOOO00OO00OO0 #line:254:yield resp
    def rebuild_auth (O0OOO0OOO00O0O000 ,O000O00OOOO0000OO ,OOOO00O00OO0OO0O0 ):#line:256:def rebuild_auth(self, prepared_request, response):
        ""#line:260:"""
        OO0OOO0O000OOO0OO =O000O00OOOO0000OO .headers #line:261:headers = prepared_request.headers
        OOO0O00OOO0OO0O0O =O000O00OOOO0000OO .url #line:262:url = prepared_request.url
        if 'Authorization'in OO0OOO0O000OOO0OO and O0OOO0OOO00O0O000 .should_strip_auth (OOOO00O00OO0OO0O0 .request .url ,OOO0O00OOO0OO0O0O ):#line:264:if 'Authorization' in headers and self.should_strip_auth(response.request.url, url):
            del OO0OOO0O000OOO0OO ['Authorization']#line:267:del headers['Authorization']
        O0OO0O0O000O0O00O =get_netrc_auth (OOO0O00OOO0OO0O0O )if O0OOO0OOO00O0O000 .trust_env else None #line:270:new_auth = get_netrc_auth(url) if self.trust_env else None
        if O0OO0O0O000O0O00O is not None :#line:271:if new_auth is not None:
            O000O00OOOO0000OO .prepare_auth (O0OO0O0O000O0O00O )#line:272:prepared_request.prepare_auth(new_auth)
        return #line:274:return
    def rebuild_proxies (O00OOO0OO0O000O00 ,OO0O00O0OOO0OOO0O ,O00O00O00OOOOOOO0 ):#line:276:def rebuild_proxies(self, prepared_request, proxies):
        ""#line:287:"""
        O00O00O00OOOOOOO0 =O00O00O00OOOOOOO0 if O00O00O00OOOOOOO0 is not None else {}#line:288:proxies = proxies if proxies is not None else {}
        O0OOO00OOOOOO0000 =OO0O00O0OOO0OOO0O .headers #line:289:headers = prepared_request.headers
        O0OO0OO0O0000OO00 =OO0O00O0OOO0OOO0O .url #line:290:url = prepared_request.url
        OOO0OOO000000O00O =urlparse (O0OO0OO0O0000OO00 ).scheme #line:291:scheme = urlparse(url).scheme
        OOO0OO00O00OO00OO =O00O00O00OOOOOOO0 .copy ()#line:292:new_proxies = proxies.copy()
        O0O00OO00OO0OOO0O =O00O00O00OOOOOOO0 .get ('no_proxy')#line:293:no_proxy = proxies.get('no_proxy')
        OO0O00OOO00OOO0OO =should_bypass_proxies (O0OO0OO0O0000OO00 ,no_proxy =O0O00OO00OO0OOO0O )#line:295:bypass_proxy = should_bypass_proxies(url, no_proxy=no_proxy)
        if O00OOO0OO0O000O00 .trust_env and not OO0O00OOO00OOO0OO :#line:296:if self.trust_env and not bypass_proxy:
            OO0O00OO000OOOOO0 =get_environ_proxies (O0OO0OO0O0000OO00 ,no_proxy =O0O00OO00OO0OOO0O )#line:297:environ_proxies = get_environ_proxies(url, no_proxy=no_proxy)
            OOO000OO00OOOOOO0 =OO0O00OO000OOOOO0 .get (OOO0OOO000000O00O ,OO0O00OO000OOOOO0 .get ('all'))#line:299:proxy = environ_proxies.get(scheme, environ_proxies.get('all'))
            if OOO000OO00OOOOOO0 :#line:301:if proxy:
                OOO0OO00O00OO00OO .setdefault (OOO0OOO000000O00O ,OOO000OO00OOOOOO0 )#line:302:new_proxies.setdefault(scheme, proxy)
        if 'Proxy-Authorization'in O0OOO00OOOOOO0000 :#line:304:if 'Proxy-Authorization' in headers:
            del O0OOO00OOOOOO0000 ['Proxy-Authorization']#line:305:del headers['Proxy-Authorization']
        try :#line:307:try:
            O00O000O000OOO000 ,O0OO00O000O00OOOO =get_auth_from_url (OOO0OO00O00OO00OO [OOO0OOO000000O00O ])#line:308:username, password = get_auth_from_url(new_proxies[scheme])
        except KeyError :#line:309:except KeyError:
            O00O000O000OOO000 ,O0OO00O000O00OOOO =None ,None #line:310:username, password = None, None
        if O00O000O000OOO000 and O0OO00O000O00OOOO :#line:312:if username and password:
            O0OOO00OOOOOO0000 ['Proxy-Authorization']=_basic_auth_str (O00O000O000OOO000 ,O0OO00O000O00OOOO )#line:313:headers['Proxy-Authorization'] = _basic_auth_str(username, password)
        return OOO0OO00O00OO00OO #line:315:return new_proxies
    def rebuild_method (OOOOO0OOO0OO000O0 ,OOOO0O0O0O000OOOO ,OOO000OOOOOO0OO0O ):#line:317:def rebuild_method(self, prepared_request, response):
        ""#line:320:"""
        O00OO000OO00000OO =OOOO0O0O0O000OOOO .method #line:321:method = prepared_request.method
        if OOO000OOOOOO0OO0O .status_code ==codes .see_other and O00OO000OO00000OO !='HEAD':#line:324:if response.status_code == codes.see_other and method != 'HEAD':
            O00OO000OO00000OO ='GET'#line:325:method = 'GET'
        if OOO000OOOOOO0OO0O .status_code ==codes .found and O00OO000OO00000OO !='HEAD':#line:329:if response.status_code == codes.found and method != 'HEAD':
            O00OO000OO00000OO ='GET'#line:330:method = 'GET'
        if OOO000OOOOOO0OO0O .status_code ==codes .moved and O00OO000OO00000OO =='POST':#line:334:if response.status_code == codes.moved and method == 'POST':
            O00OO000OO00000OO ='GET'#line:335:method = 'GET'
        OOOO0O0O0O000OOOO .method =O00OO000OO00000OO #line:337:prepared_request.method = method
class Session (SessionRedirectMixin ):#line:340:class Session(SessionRedirectMixin):
    ""#line:357:"""
    __attrs__ =['headers','cookies','auth','proxies','hooks','params','verify','cert','prefetch','adapters','stream','trust_env','max_redirects',]#line:363:]
    def __init__ (O0000OOOOO000O0OO ):#line:365:def __init__(self):
        O0000OOOOO000O0OO .headers =default_headers ()#line:370:self.headers = default_headers()
        O0000OOOOO000O0OO .auth =None #line:374:self.auth = None
        O0000OOOOO000O0OO .proxies ={}#line:379:self.proxies = {}
        O0000OOOOO000O0OO .hooks =default_hooks ()#line:382:self.hooks = default_hooks()
        O0000OOOOO000O0OO .params ={}#line:387:self.params = {}
        O0000OOOOO000O0OO .stream =False #line:390:self.stream = False
        O0000OOOOO000O0OO .verify =True #line:393:self.verify = True
        O0000OOOOO000O0OO .cert =None #line:397:self.cert = None
        O0000OOOOO000O0OO .max_redirects =DEFAULT_REDIRECT_LIMIT #line:403:self.max_redirects = DEFAULT_REDIRECT_LIMIT
        O0000OOOOO000O0OO .trust_env =True #line:407:self.trust_env = True
        O0000OOOOO000O0OO .cookies =cookiejar_from_dict ({})#line:413:self.cookies = cookiejar_from_dict({})
        O0000OOOOO000O0OO .adapters =OrderedDict ()#line:416:self.adapters = OrderedDict()
        O0000OOOOO000O0OO .mount ('https://',HTTPAdapter ())#line:417:self.mount('https://', HTTPAdapter())
        O0000OOOOO000O0OO .mount ('http://',HTTPAdapter ())#line:418:self.mount('http://', HTTPAdapter())
    def __enter__ (OOO00O00OO0OOOO0O ):#line:420:def __enter__(self):
        return OOO00O00OO0OOOO0O #line:421:return self
    def __exit__ (O00000OOOO0O0O0OO ,*O0OOOO0OOOO0000OO ):#line:423:def __exit__(self, *args):
        O00000OOOO0O0O0OO .close ()#line:424:self.close()
    def prepare_request (OO0000OO00000OOOO ,O00O00O00O000000O ):#line:426:def prepare_request(self, request):
        ""#line:435:"""
        O00OO0O00OO0OOOOO =O00O00O00O000000O .cookies or {}#line:436:cookies = request.cookies or {}
        if not isinstance (O00OO0O00OO0OOOOO ,cookielib .CookieJar ):#line:439:if not isinstance(cookies, cookielib.CookieJar):
            O00OO0O00OO0OOOOO =cookiejar_from_dict (O00OO0O00OO0OOOOO )#line:440:cookies = cookiejar_from_dict(cookies)
        O00O0OO00000O0O00 =merge_cookies (merge_cookies (RequestsCookieJar (),OO0000OO00000OOOO .cookies ),O00OO0O00OO0OOOOO )#line:444:merge_cookies(RequestsCookieJar(), self.cookies), cookies)
        OO0O0O00O0O0O0000 =O00O00O00O000000O .auth #line:447:auth = request.auth
        if OO0000OO00000OOOO .trust_env and not OO0O0O00O0O0O0000 and not OO0000OO00000OOOO .auth :#line:448:if self.trust_env and not auth and not self.auth:
            OO0O0O00O0O0O0000 =get_netrc_auth (O00O00O00O000000O .url )#line:449:auth = get_netrc_auth(request.url)
        OOOO000OO0O0OOO00 =PreparedRequest ()#line:451:p = PreparedRequest()
        OOOO000OO0O0OOO00 .prepare (method =O00O00O00O000000O .method .upper (),url =O00O00O00O000000O .url ,files =O00O00O00O000000O .files ,data =O00O00O00O000000O .data ,json =O00O00O00O000000O .json ,headers =merge_setting (O00O00O00O000000O .headers ,OO0000OO00000OOOO .headers ,dict_class =CaseInsensitiveDict ),params =merge_setting (O00O00O00O000000O .params ,OO0000OO00000OOOO .params ),auth =merge_setting (OO0O0O00O0O0O0000 ,OO0000OO00000OOOO .auth ),cookies =O00O0OO00000O0O00 ,hooks =merge_hooks (O00O00O00O000000O .hooks ,OO0000OO00000OOOO .hooks ),)#line:463:)
        return OOOO000OO0O0OOO00 #line:464:return p
    def request (OO00OOOO00O00O0OO ,O00O0OOOO000OOO00 ,O0OO0OOO0OO0O00O0 ,params =None ,data =None ,headers =None ,cookies =None ,files =None ,auth =None ,timeout =None ,allow_redirects =True ,proxies =None ,hooks =None ,stream =None ,verify =None ,cert =None ,json =None ):#line:469:hooks=None, stream=None, verify=None, cert=None, json=None):
        ""#line:505:"""
        OOO00OO00OO0OO0O0 =Request (method =O00O0OOOO000OOO00 .upper (),url =O0OO0OOO0OO0O00O0 ,headers =headers ,files =files ,data =data or {},json =json ,params =params or {},auth =auth ,cookies =cookies ,hooks =hooks ,)#line:518:)
        OOOOO0O0000000O0O =OO00OOOO00O00O0OO .prepare_request (OOO00OO00OO0OO0O0 )#line:519:prep = self.prepare_request(req)
        proxies =proxies or {}#line:521:proxies = proxies or {}
        O0O00O0000OOOOOOO =OO00OOOO00O00O0OO .merge_environment_settings (OOOOO0O0000000O0O .url ,proxies ,stream ,verify ,cert )#line:525:)
        OO0OOO0OOO00O0O00 ={'timeout':timeout ,'allow_redirects':allow_redirects ,}#line:531:}
        OO0OOO0OOO00O0O00 .update (O0O00O0000OOOOOOO )#line:532:send_kwargs.update(settings)
        OO0O000O0000OO0OO =OO00OOOO00O00O0OO .send (OOOOO0O0000000O0O ,**OO0OOO0OOO00O0O00 )#line:533:resp = self.send(prep, **send_kwargs)
        return OO0O000O0000OO0OO #line:535:return resp
    def get (OOOOO00OO0O000OOO ,O0O00O00O000OOOOO ,**OO00OOOO0O000OOO0 ):#line:537:def get(self, url, **kwargs):
        ""#line:543:"""
        OO00OOOO0O000OOO0 .setdefault ('allow_redirects',True )#line:545:kwargs.setdefault('allow_redirects', True)
        return OOOOO00OO0O000OOO .request ('GET',O0O00O00O000OOOOO ,**OO00OOOO0O000OOO0 )#line:546:return self.request('GET', url, **kwargs)
    def options (OOOOOO00OO0OOOOOO ,OOOO0O0OOOO0O00OO ,**O0OO00O00OOO00O00 ):#line:548:def options(self, url, **kwargs):
        ""#line:554:"""
        O0OO00O00OOO00O00 .setdefault ('allow_redirects',True )#line:556:kwargs.setdefault('allow_redirects', True)
        return OOOOOO00OO0OOOOOO .request ('OPTIONS',OOOO0O0OOOO0O00OO ,**O0OO00O00OOO00O00 )#line:557:return self.request('OPTIONS', url, **kwargs)
    def head (O0OO00OO000OO0O00 ,OO00O0OO00OO0O0OO ,**O0O00OOOO0OOOO000 ):#line:559:def head(self, url, **kwargs):
        ""#line:565:"""
        O0O00OOOO0OOOO000 .setdefault ('allow_redirects',False )#line:567:kwargs.setdefault('allow_redirects', False)
        return O0OO00OO000OO0O00 .request ('HEAD',OO00O0OO00OO0O0OO ,**O0O00OOOO0OOOO000 )#line:568:return self.request('HEAD', url, **kwargs)
    def post (O00O0O0O0O0O0OO00 ,O0OO00O000OOO000O ,data =None ,json =None ,**OOOOO00O00OOOOOOO ):#line:570:def post(self, url, data=None, json=None, **kwargs):
        ""#line:579:"""
        return O00O0O0O0O0O0OO00 .request ('POST',O0OO00O000OOO000O ,data =data ,json =json ,**OOOOO00O00OOOOOOO )#line:581:return self.request('POST', url, data=data, json=json, **kwargs)
    def put (O0OOO000000OOOOO0 ,OO0OOOO0OO0O0O0O0 ,data =None ,**O0O000OOOO00O00O0 ):#line:583:def put(self, url, data=None, **kwargs):
        ""#line:591:"""
        return O0OOO000000OOOOO0 .request ('PUT',OO0OOOO0OO0O0O0O0 ,data =data ,**O0O000OOOO00O00O0 )#line:593:return self.request('PUT', url, data=data, **kwargs)
    def patch (OO0O00O0OO0OOO0O0 ,OO0O00O0OOOO00O00 ,data =None ,**O0000000O0O0OOOO0 ):#line:595:def patch(self, url, data=None, **kwargs):
        ""#line:603:"""
        return OO0O00O0OO0OOO0O0 .request ('PATCH',OO0O00O0OOOO00O00 ,data =data ,**O0000000O0O0OOOO0 )#line:605:return self.request('PATCH', url, data=data, **kwargs)
    def delete (O0O0OO0O000OOOO0O ,OO0000O0OOO0O00O0 ,**O0O000OO0O0000O00 ):#line:607:def delete(self, url, **kwargs):
        ""#line:613:"""
        return O0O0OO0O000OOOO0O .request ('DELETE',OO0000O0OOO0O00O0 ,**O0O000OO0O0000O00 )#line:615:return self.request('DELETE', url, **kwargs)
    def send (O0OOOOO00000O0OO0 ,O0O0OOOOO0O00OOO0 ,**O0OOO0OO000OOOOO0 ):#line:617:def send(self, request, **kwargs):
        ""#line:621:"""
        O0OOO0OO000OOOOO0 .setdefault ('stream',O0OOOOO00000O0OO0 .stream )#line:624:kwargs.setdefault('stream', self.stream)
        O0OOO0OO000OOOOO0 .setdefault ('verify',O0OOOOO00000O0OO0 .verify )#line:625:kwargs.setdefault('verify', self.verify)
        O0OOO0OO000OOOOO0 .setdefault ('cert',O0OOOOO00000O0OO0 .cert )#line:626:kwargs.setdefault('cert', self.cert)
        O0OOO0OO000OOOOO0 .setdefault ('proxies',O0OOOOO00000O0OO0 .proxies )#line:627:kwargs.setdefault('proxies', self.proxies)
        if isinstance (O0O0OOOOO0O00OOO0 ,Request ):#line:631:if isinstance(request, Request):
            raise ValueError ('You can only send PreparedRequests.')#line:632:raise ValueError('You can only send PreparedRequests.')
        OOOO00OO0OOO0O00O =O0OOO0OO000OOOOO0 .pop ('allow_redirects',True )#line:635:allow_redirects = kwargs.pop('allow_redirects', True)
        O0O0O0O0OOOOO00O0 =O0OOO0OO000OOOOO0 .get ('stream')#line:636:stream = kwargs.get('stream')
        O00O0OOOO00O00O0O =O0O0OOOOO0O00OOO0 .hooks #line:637:hooks = request.hooks
        O0O0O000O0000000O =O0OOOOO00000O0OO0 .get_adapter (url =O0O0OOOOO0O00OOO0 .url )#line:640:adapter = self.get_adapter(url=request.url)
        OO00O0OOOOO0O00O0 =preferred_clock ()#line:643:start = preferred_clock()
        O00O000OOO000O00O =O0O0O000O0000000O .send (O0O0OOOOO0O00OOO0 ,**O0OOO0OO000OOOOO0 )#line:646:r = adapter.send(request, **kwargs)
        O0OOO0000O0000O0O =preferred_clock ()-OO00O0OOOOO0O00O0 #line:649:elapsed = preferred_clock() - start
        O00O000OOO000O00O .elapsed =timedelta (seconds =O0OOO0000O0000O0O )#line:650:r.elapsed = timedelta(seconds=elapsed)
        O00O000OOO000O00O =dispatch_hook ('response',O00O0OOOO00O00O0O ,O00O000OOO000O00O ,**O0OOO0OO000OOOOO0 )#line:653:r = dispatch_hook('response', hooks, r, **kwargs)
        if O00O000OOO000O00O .history :#line:656:if r.history:
            for O0000OOO00OOO0000 in O00O000OOO000O00O .history :#line:659:for resp in r.history:
                extract_cookies_to_jar (O0OOOOO00000O0OO0 .cookies ,O0000OOO00OOO0000 .request ,O0000OOO00OOO0000 .raw )#line:660:extract_cookies_to_jar(self.cookies, resp.request, resp.raw)
        extract_cookies_to_jar (O0OOOOO00000O0OO0 .cookies ,O0O0OOOOO0O00OOO0 ,O00O000OOO000O00O .raw )#line:662:extract_cookies_to_jar(self.cookies, request, r.raw)
        OOO000OO0OO0OO00O =O0OOOOO00000O0OO0 .resolve_redirects (O00O000OOO000O00O ,O0O0OOOOO0O00OOO0 ,**O0OOO0OO000OOOOO0 )#line:665:gen = self.resolve_redirects(r, request, **kwargs)
        O0OOOOOOOO0O00OO0 =[OO00OOOOO0O0OO00O for OO00OOOOO0O0OO00O in OOO000OO0OO0OO00O ]if OOOO00OO0OOO0O00O else []#line:668:history = [resp for resp in gen] if allow_redirects else []
        if O0OOOOOOOO0O00OO0 :#line:671:if history:
            O0OOOOOOOO0O00OO0 .insert (0 ,O00O000OOO000O00O )#line:673:history.insert(0, r)
            O00O000OOO000O00O =O0OOOOOOOO0O00OO0 .pop ()#line:675:r = history.pop()
            O00O000OOO000O00O .history =O0OOOOOOOO0O00OO0 #line:676:r.history = history
        if not OOOO00OO0OOO0O00O :#line:679:if not allow_redirects:
            try :#line:680:try:
                O00O000OOO000O00O ._next =next (O0OOOOO00000O0OO0 .resolve_redirects (O00O000OOO000O00O ,O0O0OOOOO0O00OOO0 ,yield_requests =True ,**O0OOO0OO000OOOOO0 ))#line:681:r._next = next(self.resolve_redirects(r, request, yield_requests=True, **kwargs))
            except StopIteration :#line:682:except StopIteration:
                pass #line:683:pass
        if not O0O0O0O0OOOOO00O0 :#line:685:if not stream:
            O00O000OOO000O00O .content #line:686:r.content
        return O00O000OOO000O00O #line:688:return r
    def merge_environment_settings (O000000OOOOOO00O0 ,OO00000O00O00OO00 ,OOO000OOOO00O0OO0 ,O00O0O00O000O00OO ,O0O0OO000OO00000O ,O00OOO00OOO0O0O0O ):#line:690:def merge_environment_settings(self, url, proxies, stream, verify, cert):
        ""#line:695:"""
        if O000000OOOOOO00O0 .trust_env :#line:697:if self.trust_env:
            OO0OOO00000OOOOO0 =OOO000OOOO00O0OO0 .get ('no_proxy')if OOO000OOOO00O0OO0 is not None else None #line:699:no_proxy = proxies.get('no_proxy') if proxies is not None else None
            OO0O0OOO0O0OO0O00 =get_environ_proxies (OO00000O00O00OO00 ,no_proxy =OO0OOO00000OOOOO0 )#line:700:env_proxies = get_environ_proxies(url, no_proxy=no_proxy)
            for (O00OOO0O000O0000O ,OO00OOO0OO0000000 )in OO0O0OOO0O0OO0O00 .items ():#line:701:for (k, v) in env_proxies.items():
                OOO000OOOO00O0OO0 .setdefault (O00OOO0O000O0000O ,OO00OOO0OO0000000 )#line:702:proxies.setdefault(k, v)
            if O0O0OO000OO00000O is True or O0O0OO000OO00000O is None :#line:706:if verify is True or verify is None:
                O0O0OO000OO00000O =(os .environ .get ('REQUESTS_CA_BUNDLE')or os .environ .get ('CURL_CA_BUNDLE'))#line:708:os.environ.get('CURL_CA_BUNDLE'))
        OOO000OOOO00O0OO0 =merge_setting (OOO000OOOO00O0OO0 ,O000000OOOOOO00O0 .proxies )#line:711:proxies = merge_setting(proxies, self.proxies)
        O00O0O00O000O00OO =merge_setting (O00O0O00O000O00OO ,O000000OOOOOO00O0 .stream )#line:712:stream = merge_setting(stream, self.stream)
        O0O0OO000OO00000O =merge_setting (O0O0OO000OO00000O ,O000000OOOOOO00O0 .verify )#line:713:verify = merge_setting(verify, self.verify)
        O00OOO00OOO0O0O0O =merge_setting (O00OOO00OOO0O0O0O ,O000000OOOOOO00O0 .cert )#line:714:cert = merge_setting(cert, self.cert)
        return {'verify':O0O0OO000OO00000O ,'proxies':OOO000OOOO00O0OO0 ,'stream':O00O0O00O000O00OO ,'cert':O00OOO00OOO0O0O0O }#line:717:'cert': cert}
    def get_adapter (O000O0OOOO00O00O0 ,O0OOOOO00O0O000O0 ):#line:719:def get_adapter(self, url):
        ""#line:724:"""
        for (O000O00OOO0000O0O ,O0OOO0O00OOO00O00 )in O000O0OOOO00O00O0 .adapters .items ():#line:725:for (prefix, adapter) in self.adapters.items():
            if O0OOOOO00O0O000O0 .lower ().startswith (O000O00OOO0000O0O .lower ()):#line:727:if url.lower().startswith(prefix.lower()):
                return O0OOO0O00OOO00O00 #line:728:return adapter
        raise InvalidSchema ("No connection adapters were found for '%s'"%O0OOOOO00O0O000O0 )#line:731:raise InvalidSchema("No connection adapters were found for '%s'" % url)
    def close (OOOO00OOO0OOO00OO ):#line:733:def close(self):
        ""#line:734:"""Closes all adapters and as such the session"""
        for O0OOOO00O00OO00OO in OOOO00OOO0OOO00OO .adapters .values ():#line:735:for v in self.adapters.values():
            O0OOOO00O00OO00OO .close ()#line:736:v.close()
    def mount (O0OO0OOOOOO0000O0 ,OO0OO000OO00000O0 ,OO0O0O0OOOO00000O ):#line:738:def mount(self, prefix, adapter):
        ""#line:742:"""
        O0OO0OOOOOO0000O0 .adapters [OO0OO000OO00000O0 ]=OO0O0O0OOOO00000O #line:743:self.adapters[prefix] = adapter
        OO000000O00O00OOO =[O000OO0OOOO0000O0 for O000OO0OOOO0000O0 in O0OO0OOOOOO0000O0 .adapters if len (O000OO0OOOO0000O0 )<len (OO0OO000OO00000O0 )]#line:744:keys_to_move = [k for k in self.adapters if len(k) < len(prefix)]
        for OOO00OO0O00OOOO0O in OO000000O00O00OOO :#line:746:for key in keys_to_move:
            O0OO0OOOOOO0000O0 .adapters [OOO00OO0O00OOOO0O ]=O0OO0OOOOOO0000O0 .adapters .pop (OOO00OO0O00OOOO0O )#line:747:self.adapters[key] = self.adapters.pop(key)
    def __getstate__ (O0O0O00000OO0OOO0 ):#line:749:def __getstate__(self):
        OOOO0O0OOO0O00000 ={OO0O000000O0OO0O0 :getattr (O0O0O00000OO0OOO0 ,OO0O000000O0OO0O0 ,None )for OO0O000000O0OO0O0 in O0O0O00000OO0OOO0 .__attrs__ }#line:750:state = {attr: getattr(self, attr, None) for attr in self.__attrs__}
        return OOOO0O0OOO0O00000 #line:751:return state
    def __setstate__ (O0O00O00O0OOOOOOO ,OO0OO00OOO0O0OOOO ):#line:753:def __setstate__(self, state):
        for O0O00OO00OO00OOOO ,OO0O000OO0000O0OO in OO0OO00OOO0O0OOOO .items ():#line:754:for attr, value in state.items():
            setattr (O0O00O00O0OOOOOOO ,O0O00OO00OO00OOOO ,OO0O000OO0000O0OO )#line:755:setattr(self, attr, value)
def session ():#line:758:def session():
    ""#line:769:"""
    return Session ()#line:770:return Session()
