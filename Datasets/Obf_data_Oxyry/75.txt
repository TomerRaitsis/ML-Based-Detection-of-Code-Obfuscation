from __future__ import absolute_import #line:1:from __future__ import absolute_import
import logging #line:3:import logging
import os .path #line:4:import os.path
import re #line:5:import re
from pip ._vendor .packaging .version import parse as parse_version #line:7:from pip._vendor.packaging.version import parse as parse_version
from pip ._vendor .six .moves .urllib import parse as urllib_parse #line:8:from pip._vendor.six.moves.urllib import parse as urllib_parse
from pip ._vendor .six .moves .urllib import request as urllib_request #line:9:from pip._vendor.six.moves.urllib import request as urllib_request
from pip ._internal .exceptions import BadCommand #line:11:from pip._internal.exceptions import BadCommand
from pip ._internal .utils .compat import samefile #line:12:from pip._internal.utils.compat import samefile
from pip ._internal .utils .misc import (display_path ,make_vcs_requirement_url ,redact_password_from_url ,)#line:15:)
from pip ._internal .utils .temp_dir import TempDirectory #line:16:from pip._internal.utils.temp_dir import TempDirectory
from pip ._internal .vcs import RemoteNotFoundError ,VersionControl ,vcs #line:17:from pip._internal.vcs import RemoteNotFoundError, VersionControl, vcs
urlsplit =urllib_parse .urlsplit #line:19:urlsplit = urllib_parse.urlsplit
urlunsplit =urllib_parse .urlunsplit #line:20:urlunsplit = urllib_parse.urlunsplit
logger =logging .getLogger (__name__ )#line:23:logger = logging.getLogger(__name__)
HASH_REGEX =re .compile ('[a-fA-F0-9]{40}')#line:26:HASH_REGEX = re.compile('[a-fA-F0-9]{40}')
def looks_like_hash (O0O0OO00000O0O0O0 ):#line:29:def looks_like_hash(sha):
    return bool (HASH_REGEX .match (O0O0OO00000O0O0O0 ))#line:30:return bool(HASH_REGEX.match(sha))
class Git (VersionControl ):#line:33:class Git(VersionControl):
    name ='git'#line:34:name = 'git'
    dirname ='.git'#line:35:dirname = '.git'
    repo_name ='clone'#line:36:repo_name = 'clone'
    schemes =('git','git+http','git+https','git+ssh','git+git','git+file',)#line:39:)
    unset_environ =('GIT_DIR','GIT_WORK_TREE')#line:42:unset_environ = ('GIT_DIR', 'GIT_WORK_TREE')
    default_arg_rev ='HEAD'#line:43:default_arg_rev = 'HEAD'
    def __init__ (OOO0O0O0OOOOO0OOO ,url =None ,*OOO0O00000O0OOOO0 ,**O0O00OO000O0OO0O0 ):#line:45:def __init__(self, url=None, *args, **kwargs):
        if url :#line:49:if url:
            O0O000O0O0OOO0O0O ,O0OO0O0O00OOOOOO0 ,O00OOO0OO0O0O0000 ,O0000O0OOOO0O00OO ,OO0O000O00OOO0000 =urlsplit (url )#line:50:scheme, netloc, path, query, fragment = urlsplit(url)
            if O0O000O0O0OOO0O0O .endswith ('file'):#line:51:if scheme.endswith('file'):
                O000O00000O00OOOO =O00OOO0OO0O0O0000 [:-len (O00OOO0OO0O0O0000 .lstrip ('/'))]#line:52:initial_slashes = path[:-len(path.lstrip('/'))]
                O0OO00O000OOO0O00 =(O000O00000O00OOOO +urllib_request .url2pathname (O00OOO0OO0O0O0000 ).replace ('\\','/').lstrip ('/'))#line:57:)
                url =urlunsplit ((O0O000O0O0OOO0O0O ,O0OO0O0O00OOOOOO0 ,O0OO00O000OOO0O00 ,O0000O0OOOO0O00OO ,OO0O000O00OOO0000 ))#line:58:url = urlunsplit((scheme, netloc, newpath, query, fragment))
                OOOOOOOO0000OOOO0 =O0O000O0O0OOO0O0O .find ('+')+1 #line:59:after_plus = scheme.find('+') + 1
                url =O0O000O0O0OOO0O0O [:OOOOOOOO0000OOOO0 ]+urlunsplit ((O0O000O0O0OOO0O0O [OOOOOOOO0000OOOO0 :],O0OO0O0O00OOOOOO0 ,O0OO00O000OOO0O00 ,O0000O0OOOO0O00OO ,OO0O000O00OOO0000 ),)#line:62:)
        super (Git ,OOO0O0O0OOOOO0OOO ).__init__ (url ,*OOO0O00000O0OOOO0 ,**O0O00OO000O0OO0O0 )#line:64:super(Git, self).__init__(url, *args, **kwargs)
    def get_base_rev_args (OO0OOO000OO00OOOO ,OOO00OO000OOO000O ):#line:66:def get_base_rev_args(self, rev):
        return [OOO00OO000OOO000O ]#line:67:return [rev]
    def get_git_version (O00000OOOO00O00O0 ):#line:69:def get_git_version(self):
        OO0OOOO0000O00OOO ='git version '#line:70:VERSION_PFX = 'git version '
        OOOOO0OOO000OO0OO =O00000OOOO00O00O0 .run_command (['version'],show_stdout =False )#line:71:version = self.run_command(['version'], show_stdout=False)
        if OOOOO0OOO000OO0OO .startswith (OO0OOOO0000O00OOO ):#line:72:if version.startswith(VERSION_PFX):
            OOOOO0OOO000OO0OO =OOOOO0OOO000OO0OO [len (OO0OOOO0000O00OOO ):].split ()[0 ]#line:73:version = version[len(VERSION_PFX):].split()[0]
        else :#line:74:else:
            OOOOO0OOO000OO0OO =''#line:75:version = ''
        OOOOO0OOO000OO0OO ='.'.join (OOOOO0OOO000OO0OO .split ('.')[:3 ])#line:79:version = '.'.join(version.split('.')[:3])
        return parse_version (OOOOO0OOO000OO0OO )#line:80:return parse_version(version)
    def get_current_branch (OOO00000OOO0O00O0 ,O0O0O00OO0O0000O0 ):#line:82:def get_current_branch(self, location):
        ""#line:86:"""
        O0O0OO0OOOO0000O0 =['symbolic-ref','-q','HEAD']#line:91:args = ['symbolic-ref', '-q', 'HEAD']
        OO00O000O000O0O00 =OOO00000OOO0O00O0 .run_command (O0O0OO0OOOO0000O0 ,extra_ok_returncodes =(1 ,),show_stdout =False ,cwd =O0O0O00OO0O0000O0 ,)#line:94:)
        O00OOOO0O00000O0O =OO00O000O000O0O00 .strip ()#line:95:ref = output.strip()
        if O00OOOO0O00000O0O .startswith ('refs/heads/'):#line:97:if ref.startswith('refs/heads/'):
            return O00OOOO0O00000O0O [len ('refs/heads/'):]#line:98:return ref[len('refs/heads/'):]
        return None #line:100:return None
    def export (OO0OO0OOOO0O0O000 ,OO000OOO00OO0OOOO ):#line:102:def export(self, location):
        ""#line:103:"""Export the Git repository at the url to the destination location"""
        if not OO000OOO00OO0OOOO .endswith ('/'):#line:104:if not location.endswith('/'):
            OO000OOO00OO0OOOO =OO000OOO00OO0OOOO +'/'#line:105:location = location + '/'
        with TempDirectory (kind ="export")as OO0O0OO00000OO0O0 :#line:107:with TempDirectory(kind="export") as temp_dir:
            OO0OO0OOOO0O0O000 .unpack (OO0O0OO00000OO0O0 .path )#line:108:self.unpack(temp_dir.path)
            OO0OO0OOOO0O0O000 .run_command (['checkout-index','-a','-f','--prefix',OO000OOO00OO0OOOO ],show_stdout =False ,cwd =OO0O0OO00000OO0O0 .path )#line:112:)
    def get_revision_sha (OO0000OO0OO000O0O ,OO0OO0O0O0OOO0000 ,OOO0O0O0OOOOOO0OO ):#line:114:def get_revision_sha(self, dest, rev):
        ""#line:122:"""
        OO0OO00OO0O0OO000 =OO0000OO0OO000O0O .run_command (['show-ref',OOO0O0O0OOOOOO0OO ],cwd =OO0OO0O0O0OOO0000 ,show_stdout =False ,on_returncode ='ignore')#line:125:show_stdout=False, on_returncode='ignore')
        O0O00O00OOO00O0O0 ={}#line:126:refs = {}
        for O00000OOO0O00O000 in OO0OO00OO0O0OO000 .strip ().splitlines ():#line:127:for line in output.strip().splitlines():
            try :#line:128:try:
                OOOO0O00OO000O00O ,O00OO0OO000OO000O =O00000OOO0O00O000 .split ()#line:129:sha, ref = line.split()
            except ValueError :#line:130:except ValueError:
                raise ValueError ('unexpected show-ref line: {!r}'.format (O00000OOO0O00O000 ))#line:133:raise ValueError('unexpected show-ref line: {!r}'.format(line))
            O0O00O00OOO00O0O0 [O00OO0OO000OO000O ]=OOOO0O00OO000O00O #line:135:refs[ref] = sha
        OO0O00O0O0O0OO0O0 ='refs/remotes/origin/{}'.format (OOO0O0O0OOOOOO0OO )#line:137:branch_ref = 'refs/remotes/origin/{}'.format(rev)
        OO00OOO0O0O0O0O00 ='refs/tags/{}'.format (OOO0O0O0OOOOOO0OO )#line:138:tag_ref = 'refs/tags/{}'.format(rev)
        OOOO0O00OO000O00O =O0O00O00OOO00O0O0 .get (OO0O00O0O0O0OO0O0 )#line:140:sha = refs.get(branch_ref)
        if OOOO0O00OO000O00O is not None :#line:141:if sha is not None:
            return (OOOO0O00OO000O00O ,True )#line:142:return (sha, True)
        OOOO0O00OO000O00O =O0O00O00OOO00O0O0 .get (OO00OOO0O0O0O0O00 )#line:144:sha = refs.get(tag_ref)
        return (OOOO0O00OO000O00O ,False )#line:146:return (sha, False)
    def resolve_revision (O0OO00OOO00OOO00O ,OOOOO0O0OO0O0O0OO ,O0O0O0OO000OOOOO0 ,OO0OO00000000OOO0 ):#line:148:def resolve_revision(self, dest, url, rev_options):
        ""#line:155:"""
        O0O0OOOO00OO00000 =OO0OO00000000OOO0 .arg_rev #line:156:rev = rev_options.arg_rev
        OO00OO00OO0000OO0 ,O00OOO0O000OO00OO =O0OO00OOO00OOO00O .get_revision_sha (OOOOO0O0OO0O0O0OO ,O0O0OOOO00OO00000 )#line:157:sha, is_branch = self.get_revision_sha(dest, rev)
        if OO00OO00OO0000OO0 is not None :#line:159:if sha is not None:
            OO0OO00000000OOO0 =OO0OO00000000OOO0 .make_new (OO00OO00OO0000OO0 )#line:160:rev_options = rev_options.make_new(sha)
            OO0OO00000000OOO0 .branch_name =O0O0OOOO00OO00000 if O00OOO0O000OO00OO else None #line:161:rev_options.branch_name = rev if is_branch else None
            return OO0OO00000000OOO0 #line:163:return rev_options
        if not looks_like_hash (O0O0OOOO00OO00000 ):#line:167:if not looks_like_hash(rev):
            logger .warning ("Did not find branch or tag '%s', assuming revision or ref.",O0O0OOOO00OO00000 ,)#line:171:)
        if not O0O0OOOO00OO00000 .startswith ('refs/'):#line:173:if not rev.startswith('refs/'):
            return OO0OO00000000OOO0 #line:174:return rev_options
        O0OO00OOO00OOO00O .run_command (['fetch','-q',O0O0O0OO000OOOOO0 ]+OO0OO00000000OOO0 .to_args (),cwd =OOOOO0O0OO0O0O0OO ,)#line:180:)
        OO00OO00OO0000OO0 =O0OO00OOO00OOO00O .get_revision (OOOOO0O0OO0O0O0OO ,rev ='FETCH_HEAD')#line:182:sha = self.get_revision(dest, rev='FETCH_HEAD')
        OO0OO00000000OOO0 =OO0OO00000000OOO0 .make_new (OO00OO00OO0000OO0 )#line:183:rev_options = rev_options.make_new(sha)
        return OO0OO00000000OOO0 #line:185:return rev_options
    def is_commit_id_equal (O0O0OO0OO0O0OOO00 ,OOO0O000000OOO00O ,O0OO00000O00OO00O ):#line:187:def is_commit_id_equal(self, dest, name):
        ""#line:194:"""
        if not O0OO00000O00OO00O :#line:195:if not name:
            return False #line:197:return False
        return O0O0OO0OO0O0OOO00 .get_revision (OOO0O000000OOO00O )==O0OO00000O00OO00O #line:199:return self.get_revision(dest) == name
    def fetch_new (OOO0O0OOOOOO0OOO0 ,OO00O0OO0OO0OOOO0 ,OOOO0OOOO0OOOOO0O ,OOO0O00O0O000OO00 ):#line:201:def fetch_new(self, dest, url, rev_options):
        OOOO0OOOO0OO00O00 =OOO0O00O0O000OO00 .to_display ()#line:202:rev_display = rev_options.to_display()
        logger .info ('Cloning %s%s to %s',redact_password_from_url (OOOO0OOOO0OOOOO0O ),OOOO0OOOO0OO00O00 ,display_path (OO00O0OO0OO0OOOO0 ),)#line:206:)
        OOO0O0OOOOOO0OOO0 .run_command (['clone','-q',OOOO0OOOO0OOOOO0O ,OO00O0OO0OO0OOOO0 ])#line:207:self.run_command(['clone', '-q', url, dest])
        if OOO0O00O0O000OO00 .rev :#line:209:if rev_options.rev:
            OOO0O00O0O000OO00 =OOO0O0OOOOOO0OOO0 .resolve_revision (OO00O0OO0OO0OOOO0 ,OOOO0OOOO0OOOOO0O ,OOO0O00O0O000OO00 )#line:211:rev_options = self.resolve_revision(dest, url, rev_options)
            OO00OOO00O00O0O0O =getattr (OOO0O00O0O000OO00 ,'branch_name',None )#line:212:branch_name = getattr(rev_options, 'branch_name', None)
            if OO00OOO00O00O0O0O is None :#line:213:if branch_name is None:
                if not OOO0O0OOOOOO0OOO0 .is_commit_id_equal (OO00O0OO0OO0OOOO0 ,OOO0O00O0O000OO00 .rev ):#line:216:if not self.is_commit_id_equal(dest, rev_options.rev):
                    OOOO00O00000O0OOO =['checkout','-q']+OOO0O00O0O000OO00 .to_args ()#line:217:cmd_args = ['checkout', '-q'] + rev_options.to_args()
                    OOO0O0OOOOOO0OOO0 .run_command (OOOO00O00000O0OOO ,cwd =OO00O0OO0OO0OOOO0 )#line:218:self.run_command(cmd_args, cwd=dest)
            elif OOO0O0OOOOOO0OOO0 .get_current_branch (OO00O0OO0OO0OOOO0 )!=OO00OOO00O00O0O0O :#line:219:elif self.get_current_branch(dest) != branch_name:
                OO00OOOO0OO00OO0O ='origin/{}'.format (OO00OOO00O00O0O0O )#line:222:track_branch = 'origin/{}'.format(branch_name)
                OOOO00O00000O0OOO =['checkout','-b',OO00OOO00O00O0O0O ,'--track',OO00OOOO0OO00OO0O ,]#line:225:]
                OOO0O0OOOOOO0OOO0 .run_command (OOOO00O00000O0OOO ,cwd =OO00O0OO0OO0OOOO0 )#line:226:self.run_command(cmd_args, cwd=dest)
        OOO0O0OOOOOO0OOO0 .update_submodules (OO00O0OO0OO0OOOO0 )#line:229:self.update_submodules(dest)
    def switch (OO0O000OOOO00OO00 ,OOOO0000O0O000O00 ,OO000OO00000OO00O ,O0OO000OO0O00OOOO ):#line:231:def switch(self, dest, url, rev_options):
        OO0O000OOOO00OO00 .run_command (['config','remote.origin.url',OO000OO00000OO00O ],cwd =OOOO0000O0O000O00 )#line:232:self.run_command(['config', 'remote.origin.url', url], cwd=dest)
        OO0000O0O0O000O00 =['checkout','-q']+O0OO000OO0O00OOOO .to_args ()#line:233:cmd_args = ['checkout', '-q'] + rev_options.to_args()
        OO0O000OOOO00OO00 .run_command (OO0000O0O0O000O00 ,cwd =OOOO0000O0O000O00 )#line:234:self.run_command(cmd_args, cwd=dest)
        OO0O000OOOO00OO00 .update_submodules (OOOO0000O0O000O00 )#line:236:self.update_submodules(dest)
    def update (OOO00000O0O00OOO0 ,O000000O0OO0O0O0O ,O0OOOO0OO0000O00O ,O00O0OOO0O00OO000 ):#line:238:def update(self, dest, url, rev_options):
        if OOO00000O0O00OOO0 .get_git_version ()>=parse_version ('1.9.0'):#line:240:if self.get_git_version() >= parse_version('1.9.0'):
            OOO00000O0O00OOO0 .run_command (['fetch','-q','--tags'],cwd =O000000O0OO0O0O0O )#line:242:self.run_command(['fetch', '-q', '--tags'], cwd=dest)
        else :#line:243:else:
            OOO00000O0O00OOO0 .run_command (['fetch','-q'],cwd =O000000O0OO0O0O0O )#line:244:self.run_command(['fetch', '-q'], cwd=dest)
        O00O0OOO0O00OO000 =OOO00000O0O00OOO0 .resolve_revision (O000000O0OO0O0O0O ,O0OOOO0OO0000O00O ,O00O0OOO0O00OO000 )#line:246:rev_options = self.resolve_revision(dest, url, rev_options)
        OOO0OOO0OOOO00000 =['reset','--hard','-q']+O00O0OOO0O00OO000 .to_args ()#line:247:cmd_args = ['reset', '--hard', '-q'] + rev_options.to_args()
        OOO00000O0O00OOO0 .run_command (OOO0OOO0OOOO00000 ,cwd =O000000O0OO0O0O0O )#line:248:self.run_command(cmd_args, cwd=dest)
        OOO00000O0O00OOO0 .update_submodules (O000000O0OO0O0O0O )#line:250:self.update_submodules(dest)
    @classmethod #line:252:@classmethod
    def get_remote_url (O0OOOOO00000OO00O ,OOO0000OOO000OO0O ):#line:253:def get_remote_url(cls, location):
        ""#line:259:"""
        O00OO000OOO00OO00 =O0OOOOO00000OO00O .run_command (['config','--get-regexp',r'remote\..*\.url'],extra_ok_returncodes =(1 ,),show_stdout =False ,cwd =OOO0000OOO000OO0O ,)#line:265:)
        O00O000OOOO0O0000 =O00OO000OOO00OO00 .splitlines ()#line:266:remotes = stdout.splitlines()
        try :#line:267:try:
            O0OO0OO0O0OOOO0O0 =O00O000OOOO0O0000 [0 ]#line:268:found_remote = remotes[0]
        except IndexError :#line:269:except IndexError:
            raise RemoteNotFoundError #line:270:raise RemoteNotFoundError
        for OO0O0OOO0OOO00OO0 in O00O000OOOO0O0000 :#line:272:for remote in remotes:
            if OO0O0OOO0OOO00OO0 .startswith ('remote.origin.url '):#line:273:if remote.startswith('remote.origin.url '):
                O0OO0OO0O0OOOO0O0 =OO0O0OOO0OOO00OO0 #line:274:found_remote = remote
                break #line:275:break
        OO000OO00O00OOOOO =O0OO0OO0O0OOOO0O0 .split (' ')[1 ]#line:276:url = found_remote.split(' ')[1]
        return OO000OO00O00OOOOO .strip ()#line:277:return url.strip()
    @classmethod #line:279:@classmethod
    def get_revision (OOO0OO0000O0O00O0 ,O00OO0O000O000OO0 ,rev =None ):#line:280:def get_revision(cls, location, rev=None):
        if rev is None :#line:281:if rev is None:
            rev ='HEAD'#line:282:rev = 'HEAD'
        OOO0OOOO00000O00O =OOO0OO0000O0O00O0 .run_command (['rev-parse',rev ],show_stdout =False ,cwd =O00OO0O000O000OO0 ,)#line:285:)
        return OOO0OOOO00000O00O .strip ()#line:286:return current_rev.strip()
    @classmethod #line:288:@classmethod
    def _get_subdirectory (OO00OOOOO00OO0OO0 ,O0OOOOO0O000O0O0O ):#line:289:def _get_subdirectory(cls, location):
        ""#line:290:"""Return the relative path of setup.py to the git repo root."""
        O0OO0OO00O0OO00OO =OO00OOOOO00OO0OO0 .run_command (['rev-parse','--git-dir'],show_stdout =False ,cwd =O0OOOOO0O000O0O0O ).strip ()#line:293:show_stdout=False, cwd=location).strip()
        if not os .path .isabs (O0OO0OO00O0OO00OO ):#line:294:if not os.path.isabs(git_dir):
            O0OO0OO00O0OO00OO =os .path .join (O0OOOOO0O000O0O0O ,O0OO0OO00O0OO00OO )#line:295:git_dir = os.path.join(location, git_dir)
        O0OOOO00OO0OO0O00 =os .path .join (O0OO0OO00O0OO00OO ,'..')#line:296:root_dir = os.path.join(git_dir, '..')
        O000OO0OOO0O0OOO0 =O0OOOOO0O000O0O0O #line:298:orig_location = location
        while not os .path .exists (os .path .join (O0OOOOO0O000O0O0O ,'setup.py')):#line:299:while not os.path.exists(os.path.join(location, 'setup.py')):
            O00OOO000O0O000OO =O0OOOOO0O000O0O0O #line:300:last_location = location
            O0OOOOO0O000O0O0O =os .path .dirname (O0OOOOO0O000O0O0O )#line:301:location = os.path.dirname(location)
            if O0OOOOO0O000O0O0O ==O00OOO000O0O000OO :#line:302:if location == last_location:
                logger .warning ("Could not find setup.py for directory %s (tried all " "parent directories)",O000OO0OOO0O0OOO0 ,)#line:309:)
                return None #line:310:return None
        if samefile (O0OOOO00OO0OO0O00 ,O0OOOOO0O000O0O0O ):#line:312:if samefile(root_dir, location):
            return None #line:313:return None
        return os .path .relpath (O0OOOOO0O000O0O0O ,O0OOOO00OO0OO0O00 )#line:314:return os.path.relpath(location, root_dir)
    @classmethod #line:316:@classmethod
    def get_src_requirement (OOOO00OO0O0000000 ,O0O0O00OOO0OOOO0O ,OOO0OOOOO000O00OO ):#line:317:def get_src_requirement(cls, location, project_name):
        OOO0OO000OO000OO0 =OOOO00OO0O0000000 .get_remote_url (O0O0O00OOO0OOOO0O )#line:318:repo = cls.get_remote_url(location)
        if not OOO0OO000OO000OO0 .lower ().startswith ('git:'):#line:319:if not repo.lower().startswith('git:'):
            OOO0OO000OO000OO0 ='git+'+OOO0OO000OO000OO0 #line:320:repo = 'git+' + repo
        OO00O00OOOO000000 =OOOO00OO0O0000000 .get_revision (O0O0O00OOO0OOOO0O )#line:321:current_rev = cls.get_revision(location)
        OO000000000O00OO0 =OOOO00OO0O0000000 ._get_subdirectory (O0O0O00OOO0OOOO0O )#line:322:subdir = cls._get_subdirectory(location)
        O0OOOOOOOOOO0O000 =make_vcs_requirement_url (OOO0OO000OO000OO0 ,OO00O00OOOO000000 ,OOO0OOOOO000O00OO ,subdir =OO000000000O00OO0 )#line:324:subdir=subdir)
        return O0OOOOOOOOOO0O000 #line:326:return req
    def get_url_rev_and_auth (OO0O0O000O0OOO0OO ,OOO0000OOO000O0OO ):#line:328:def get_url_rev_and_auth(self, url):
        ""#line:334:"""
        if '://'not in OOO0000OOO000O0OO :#line:335:if '://' not in url:
            assert 'file:'not in OOO0000OOO000O0OO #line:336:assert 'file:' not in url
            OOO0000OOO000O0OO =OOO0000OOO000O0OO .replace ('git+','git+ssh://')#line:337:url = url.replace('git+', 'git+ssh://')
            OOO0000OOO000O0OO ,O00OOO00OOOOO000O ,O0000O0000OO0O0O0 =super (Git ,OO0O0O000O0OOO0OO ).get_url_rev_and_auth (OOO0000OOO000O0OO )#line:338:url, rev, user_pass = super(Git, self).get_url_rev_and_auth(url)
            OOO0000OOO000O0OO =OOO0000OOO000O0OO .replace ('ssh://','')#line:339:url = url.replace('ssh://', '')
        else :#line:340:else:
            OOO0000OOO000O0OO ,O00OOO00OOOOO000O ,O0000O0000OO0O0O0 =super (Git ,OO0O0O000O0OOO0OO ).get_url_rev_and_auth (OOO0000OOO000O0OO )#line:341:url, rev, user_pass = super(Git, self).get_url_rev_and_auth(url)
        return OOO0000OOO000O0OO ,O00OOO00OOOOO000O ,O0000O0000OO0O0O0 #line:343:return url, rev, user_pass
    def update_submodules (O0O0OO0OOOO0OOOOO ,O0O000000O0000O0O ):#line:345:def update_submodules(self, location):
        if not os .path .exists (os .path .join (O0O000000O0000O0O ,'.gitmodules')):#line:346:if not os.path.exists(os.path.join(location, '.gitmodules')):
            return #line:347:return
        O0O0OO0OOOO0OOOOO .run_command (['submodule','update','--init','--recursive','-q'],cwd =O0O000000O0000O0O ,)#line:351:)
    @classmethod #line:353:@classmethod
    def controls_location (O0O0O000000OO00O0 ,O0OOO0OO000OOO0OO ):#line:354:def controls_location(cls, location):
        if super (Git ,O0O0O000000OO00O0 ).controls_location (O0OOO0OO000OOO0OO ):#line:355:if super(Git, cls).controls_location(location):
            return True #line:356:return True
        try :#line:357:try:
            OOO00O0OOOOO0O0O0 =O0O0O000000OO00O0 .run_command (['rev-parse'],cwd =O0OOO0OO000OOO0OO ,show_stdout =False ,on_returncode ='ignore')#line:361:on_returncode='ignore')
            return not OOO00O0OOOOO0O0O0 #line:362:return not r
        except BadCommand :#line:363:except BadCommand:
            logger .debug ("could not determine if %s is under git control " "because git is not available",O0OOO0OO000OOO0OO )#line:365:"because git is not available", location)
            return False #line:366:return False
vcs .register (Git )#line:369:vcs.register(Git)
